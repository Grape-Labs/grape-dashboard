[{"/Users/kirk/Solana/grape-dashboard/src/index.tsx":"1","/Users/kirk/Solana/grape-dashboard/src/reportWebVitals.ts":"2","/Users/kirk/Solana/grape-dashboard/src/App.tsx":"3","/Users/kirk/Solana/grape-dashboard/src/components/Tools/constants.ts":"4","/Users/kirk/Solana/grape-dashboard/src/config/theme.tsx":"5","/Users/kirk/Solana/grape-dashboard/src/contexts/session.tsx":"6","/Users/kirk/Solana/grape-dashboard/src/components/Header/Header.tsx":"7","/Users/kirk/Solana/grape-dashboard/src/components/ConfirmDialog/ConfirmDialog.tsx":"8","/Users/kirk/Solana/grape-dashboard/src/views/index.tsx":"9","/Users/kirk/Solana/grape-dashboard/src/models/Session.ts":"10","/Users/kirk/Solana/grape-dashboard/src/components/ConnectDialog/ConnectDialog.tsx":"11","/Users/kirk/Solana/grape-dashboard/src/views/Home/Home.jsx":"12","/Users/kirk/Solana/grape-dashboard/src/utils/wallet/NakedWallet.ts":"13","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/index.ts":"14","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/useWalletDialog.ts":"15","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDisconnectButton.tsx":"16","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDialogProvider.tsx":"17","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDialogButton.tsx":"18","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletIcon.tsx":"19","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDialog.tsx":"20","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletMultiButton.tsx":"21","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletConnectButton.tsx":"22","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletListItem.tsx":"23","/Users/kirk/Solana/grape-dashboard/src/views/Governance/Governance.tsx":"24","/Users/kirk/Solana/grape-dashboard/src/views/Payments/Payments.tsx":"25","/Users/kirk/Solana/grape-dashboard/src/views/Membership/Membership.tsx":"26","/Users/kirk/Solana/grape-dashboard/src/views/News/News.tsx":"27","/Users/kirk/Solana/grape-dashboard/src/views/Register/Register.tsx":"28","/Users/kirk/Solana/grape-dashboard/src/views/Confirmation/Confirmation.tsx":"29","/Users/kirk/Solana/grape-dashboard/src/views/Settings/Settings.tsx":"30","/Users/kirk/Solana/grape-dashboard/src/views/GrapePartners/GrapePartners.jsx":"31","/Users/kirk/Solana/grape-dashboard/src/views/Farms/Farms.jsx":"32","/Users/kirk/Solana/grape-dashboard/src/views/Contribute/Contribute.jsx":"33","/Users/kirk/Solana/grape-dashboard/src/views/Portfolio/Portfolio.jsx":"34","/Users/kirk/Solana/grape-dashboard/src/views/Servers/Servers.jsx":"35","/Users/kirk/Solana/grape-dashboard/src/views/Feed/TwitterFeed.tsx":"36","/Users/kirk/Solana/grape-dashboard/src/components/Tools/WalletAddress.tsx":"37","/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/SolIcon.tsx":"38","/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/SolCurrencyIcon.tsx":"39","/Users/kirk/Solana/grape-dashboard/src/models/UserServer.ts":"40","/Users/kirk/Solana/grape-dashboard/src/utils/token/safe-math.ts":"41","/Users/kirk/Solana/grape-dashboard/src/utils/token/farms.ts":"42","/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/GrapeIcon.tsx":"43","/Users/kirk/Solana/grape-dashboard/src/components/Tools/PretifyCommaNumber.tsx":"44","/Users/kirk/Solana/grape-dashboard/src/views/Summary/Summary.tsx":"45","/Users/kirk/Solana/grape-dashboard/src/views/TransactionHistory/TransactionHistory.tsx":"46","/Users/kirk/Solana/grape-dashboard/src/models/User.ts":"47","/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/DiscordIcon.tsx":"48","/Users/kirk/Solana/grape-dashboard/src/views/Settings/TwitterSettings.tsx":"49","/Users/kirk/Solana/grape-dashboard/src/views/Portfolio/PortfolioTable.jsx":"50","/Users/kirk/Solana/grape-dashboard/src/views/Contribute/ContributeTable.jsx":"51","/Users/kirk/Solana/grape-dashboard/src/views/Farms/FarmsTable.jsx":"52","/Users/kirk/Solana/grape-dashboard/src/utils/token/ids.ts":"53","/Users/kirk/Solana/grape-dashboard/src/utils/token/tokens.ts":"54","/Users/kirk/Solana/grape-dashboard/src/utils/ftx-pay.tsx":"55","/Users/kirk/Solana/grape-dashboard/src/views/OrcaSwap/OrcaSwap.tsx":"56","/Users/kirk/Solana/grape-dashboard/src/views/SendToken/SendToken.tsx":"57","/Users/kirk/Solana/grape-dashboard/src/views/TopHolders/TopHolders.tsx":"58"},{"size":290,"mtime":1646858493040,"results":"59","hashOfConfig":"60"},{"size":424,"mtime":1646858493041,"results":"61","hashOfConfig":"60"},{"size":8701,"mtime":1646866326946,"results":"62","hashOfConfig":"60"},{"size":506,"mtime":1646858493037,"results":"63","hashOfConfig":"60"},{"size":1173,"mtime":1646858493038,"results":"64","hashOfConfig":"60"},{"size":1400,"mtime":1646858493038,"results":"65","hashOfConfig":"60"},{"size":9511,"mtime":1646860482174,"results":"66","hashOfConfig":"60"},{"size":1654,"mtime":1646858493036,"results":"67","hashOfConfig":"60"},{"size":743,"mtime":1646858493046,"results":"68","hashOfConfig":"60"},{"size":1038,"mtime":1646858493040,"results":"69","hashOfConfig":"60"},{"size":18075,"mtime":1646858493036,"results":"70","hashOfConfig":"60"},{"size":2880,"mtime":1646866272987,"results":"71","hashOfConfig":"60"},{"size":501,"mtime":1646858493042,"results":"72","hashOfConfig":"60"},{"size":292,"mtime":1646858493037,"results":"73","hashOfConfig":"60"},{"size":372,"mtime":1646858493038,"results":"74","hashOfConfig":"60"},{"size":1669,"mtime":1646858493037,"results":"75","hashOfConfig":"60"},{"size":560,"mtime":1646858493037,"results":"76","hashOfConfig":"60"},{"size":777,"mtime":1646858493037,"results":"77","hashOfConfig":"60"},{"size":646,"mtime":1646858493037,"results":"78","hashOfConfig":"60"},{"size":6926,"mtime":1646858493037,"results":"79","hashOfConfig":"60"},{"size":11630,"mtime":1646865976692,"results":"80","hashOfConfig":"60"},{"size":1655,"mtime":1646858493037,"results":"81","hashOfConfig":"60"},{"size":767,"mtime":1646858493037,"results":"82","hashOfConfig":"60"},{"size":7917,"mtime":1646868859405,"results":"83","hashOfConfig":"60"},{"size":26052,"mtime":1646858493045,"results":"84","hashOfConfig":"60"},{"size":6415,"mtime":1646858493044,"results":"85","hashOfConfig":"60"},{"size":1085,"mtime":1646866295415,"results":"86","hashOfConfig":"60"},{"size":10709,"mtime":1646858493045,"results":"87","hashOfConfig":"60"},{"size":3834,"mtime":1646858493043,"results":"88","hashOfConfig":"60"},{"size":10554,"mtime":1646867124244,"results":"89","hashOfConfig":"60"},{"size":10726,"mtime":1646858493044,"results":"90","hashOfConfig":"60"},{"size":29824,"mtime":1646858493043,"results":"91","hashOfConfig":"60"},{"size":25943,"mtime":1646858493043,"results":"92","hashOfConfig":"60"},{"size":32404,"mtime":1646858493045,"results":"93","hashOfConfig":"60"},{"size":19227,"mtime":1646860498180,"results":"94","hashOfConfig":"60"},{"size":3661,"mtime":1646858493044,"results":"95","hashOfConfig":"60"},{"size":4811,"mtime":1646858493037,"results":"96","hashOfConfig":"60"},{"size":1463,"mtime":1646858493036,"results":"97","hashOfConfig":"60"},{"size":4145,"mtime":1646858493036,"results":"98","hashOfConfig":"60"},{"size":2831,"mtime":1646858493040,"results":"99","hashOfConfig":"60"},{"size":1902,"mtime":1646858493042,"results":"100","hashOfConfig":"60"},{"size":48433,"mtime":1646858493041,"results":"101","hashOfConfig":"60"},{"size":9471,"mtime":1646858493036,"results":"102","hashOfConfig":"60"},{"size":1501,"mtime":1646858493036,"results":"103","hashOfConfig":"60"},{"size":2592,"mtime":1646869149363,"results":"104","hashOfConfig":"60"},{"size":11673,"mtime":1646858493046,"results":"105","hashOfConfig":"60"},{"size":1094,"mtime":1646858493040,"results":"106","hashOfConfig":"60"},{"size":1067,"mtime":1646858493036,"results":"107","hashOfConfig":"60"},{"size":25282,"mtime":1646858493046,"results":"108","hashOfConfig":"60"},{"size":15314,"mtime":1646868588221,"results":"109","hashOfConfig":"60"},{"size":14018,"mtime":1646866317496,"results":"110","hashOfConfig":"60"},{"size":11261,"mtime":1646866820717,"results":"111","hashOfConfig":"60"},{"size":2276,"mtime":1646858493041,"results":"112","hashOfConfig":"60"},{"size":88385,"mtime":1646858493042,"results":"113","hashOfConfig":"60"},{"size":236,"mtime":1646858493041,"results":"114","hashOfConfig":"60"},{"size":33566,"mtime":1646858493044,"results":"115","hashOfConfig":"60"},{"size":27881,"mtime":1646858493045,"results":"116","hashOfConfig":"60"},{"size":10181,"mtime":1646858493046,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zis4kc",{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":56,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":2,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":92,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":57,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},"/Users/kirk/Solana/grape-dashboard/src/index.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/reportWebVitals.ts",[],"/Users/kirk/Solana/grape-dashboard/src/App.tsx",["272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289"],"import React, { FC, ReactNode, useCallback, useMemo } from 'react';\nimport { styled, ThemeProvider } from '@mui/material/styles';\nimport { HashRouter, BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport { HomeView, ServersView, SettingsView, ConfirmationView, RegisterView, NewsView, GrapePartnersView, MembershipView, ContributeView, PaymentsView } from \"./views\";\nimport { SessionProvider } from \"./contexts/session\";\nimport CssBaseline from '@mui/material/CssBaseline';\nimport MuiDrawer from '@mui/material/Drawer';\n\nimport {\n  Box,\n  Grid,\n  Paper,\n  Container,\n  Typography,\n  AppBar,\n} from '@mui/material';\n\nimport Header from './components/Header/Header';\nimport { SnackbarProvider } from 'notistack';\nimport { useConnection, ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork, WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { Connection, Keypair, SystemProgram, Transaction, clusterApiUrl } from '@solana/web3.js';\nimport { Helmet } from 'react-helmet';\n\nimport { useSnackbar } from 'notistack';\nimport ConfirmDialog from './components/ConfirmDialog/ConfirmDialog';\n\n//import { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '../WalletAdapterMui';\n\n/*\nimport {\n  LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SlopeWalletAdapter,\n  SolflareWalletAdapter,\n  SolletExtensionWalletAdapter,\n  SolletWalletAdapter,\n  TorusWalletAdapter,\n  //CloverWalletAdapter,\n  //MathWalletAdapter,\n  //Coin98WalletAdapter,\n  //SolongWalletAdapter,\n} from '@solana/wallet-adapter-wallets';\n*/\n\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\n\n//import { mainListItems, secondaryListItems } from './components/SidebarList/SidebarList';\nimport grapeTheme from  './config/theme'\nimport \"./App.less\";\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from './components/Tools/constants';\n\nfunction Copyright(props: any) {\n  return (\n    <Typography sx={{background:'transparent'}} variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      Grape Network\n      {/*\n      <Link color=\"inherit\" href=\"https://verify.grapes.network\">\n        Grape Network | Dashboard vXYZ\n      </Link>\n      */}\n    </Typography>\n  );\n}\n\nconst drawerWidth: number = 240;\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n  ({ theme, open }) => ({\n    '& .MuiDrawer-paper': {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      boxSizing: 'border-box',\n      ...(!open && {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n          easing: theme.transitions.easing.sharp,\n          duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n          width: theme.spacing(9),\n        },\n      }),\n    },\n  }),\n);\n\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  // You can also provide a custom RPC endpoint\n  const network = WalletAdapterNetwork.Mainnet; //.Devnet; //.Mainnet;\n  // You can also provide a custom RPC endpoint\n  const endpoint = GRAPE_RPC_ENDPOINT; //useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(() => [\n    getPhantomWallet(),\n    getSolflareWallet(),\n    getSlopeWallet(),\n    getSolletWallet({ network }),\n    getSolletExtensionWallet({ network }),\n    //getLedgerWallet(),\n    getTorusWallet({\n      options: { clientId: 'BCX2hQWDez2_qJhmSuQC7DXD4OG0VfGEFjCZfLar2EA5NvKyudCxOOlOcQ4YZbPGQhdwLonSXZr3i_siIJVhtwI' }\n    }),\n    /*\n    new PhantomWalletAdapter(),\n    new SlopeWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new TorusWalletAdapter(),\n    new LedgerWalletAdapter(),\n    new SolletWalletAdapter({ network }),\n    new SolletExtensionWalletAdapter({ network }),\n    */\n    //new CloverWalletAdapter(),\n    //new MathWalletAdapter(),\n    //new Coin98WalletAdapter(),\n    //new SolongWalletAdapter(),\n  ], [network]);\n\n  return (\n    <>\n    <Helmet>\n      <title>Grape Dashboard</title>\n      <meta name=\"theme-color\" content=\"#ffffff\" />\n      <meta name=\"description\" content=\"Grape Dashboard\" />\n      \n      <meta name=\"msapplication-TileColor\" content=\"#da532c\"/>\n      <meta name=\"theme-color\" content=\"#ffffff\"/>\n\n      <meta property=\"og:url\" content=\"https://verify.grapes.network/\"/>\n      <meta property=\"og:type\" content=\"website\"/>\n      <meta property=\"og:title\" content=\"Grape Network | The Grape Ape Network\"/>\n      <meta property=\"og:description\" content=\"Decentralized Social Networking Create, Reward &amp; Secure any online community by harnessing the power of Solana\"/>\n      <meta property=\"og:image\" content=\"/grape_og.png\"/>\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content='https://verify.grapes.network' />\n      <meta name=\"twitter:title\" content='Grape Network' />\n      <meta name=\"twitter:description\" content='' />\n      <meta name=\"twitter:image\" content='/grape_og.png' />\n    </Helmet>\n    <ThemeProvider theme={grapeTheme}>\n      <SnackbarProvider>\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} autoConnect>\n              \n              <Grid \n                //color={grapeTheme.palette.primary.light}\n                sx={{ \n                  flex: 1\n                }}>\n                <CssBaseline />\n                <HashRouter>\n                  <SessionProvider>\n                    <AppBar position=\"fixed\" color=\"primary\" style={{ background: 'rgba(0,0,0,0.5)' }}>\n                        <Header\n                            open={open} \n                            toggleDrawer={toggleDrawer}\n                        />\n\n                      </AppBar>\n                      \n                      <Grid\n                        component=\"main\"\n                        sx={{\n                          mt: 6,\n                          display: 'flex',\n                          flexGrow: 1\n                        }}\n                      >\n                        <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4}}>\n                          <ConfirmDialog />\n                          <Routes>\n                            <Route path=\"/\" element={<HomeView/>} />\n                            <Route index element={<HomeView/>} />\n                            <Route path=\"dashboard\" element={<HomeView/>} />\n                            <Route path=\"contribute\" element={<ContributeView />} />\n                            <Route path=\"servers\" element={<ServersView />} />\n                            <Route path=\"settings\" element={<SettingsView />} />\n                            <Route path=\"partners\" element={<GrapePartnersView />} />\n                            <Route path=\"confirmation\" element={<ConfirmationView />} />\n                            <Route path=\"register\" element={<RegisterView />} />\n                            <Route path=\"membership\" element={<MembershipView />} />\n                            <Route path=\"news\" element={<NewsView />} />\n                            <Route path=\"payments\" element={<PaymentsView />} />\n                            <Route path=\"*\" element={<NotFound/>} />\n                          </Routes>\n                          \n                          <Copyright sx={{ mt: 4 }} />\n                        </Container>\n                      </Grid>\n                  </SessionProvider>\n                </HashRouter>\n              </Grid>\n              \n            </WalletProvider>\n          </ConnectionProvider>\n        </SnackbarProvider>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport const NotFound = () => {\n  return (\n    <>\n      <Paper className=\"grape-paper-background\">\n        <Grid \n          className=\"grape-paper\" \n          container\n          alignContent=\"center\"\n          justifyContent=\"center\"\n          direction=\"column\">\n          <Grid item>\n            <Typography \n              align=\"center\"\n              variant=\"h3\">\n              {'No Grapes Here...'}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n  </>\n  )\n}\n\n//export const Dashboard: FC<{ children: ReactNode }> = ({ children }) => {\nexport default function Dashboard() {\n  return <DashboardContent />;\n}","/Users/kirk/Solana/grape-dashboard/src/components/Tools/constants.ts",[],"/Users/kirk/Solana/grape-dashboard/src/config/theme.tsx",["290","291"],"import { createTheme, makeStyles } from '@mui/material/styles';\n// paper: #12151B\n\n//background: rgb(18,21,28);\n//background: linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%);\n\n \n//background: #F0F2F0;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #000C40, #F0F2F0);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #000C40, #F0F2F0); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n//background: #141E30;  /* fallback for old browsers */\n//background: -webkit-linear-gradient(to right, #243B55, #141E30);  /* Chrome 10-25, Safari 5.1-6 */\n//background: linear-gradient(to right, #243B55, #141E30); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\nconst themeInstance = {\n  background: 'linear-gradient(0deg, rgba(18,21,28,1) 10%, rgba(2,0,36,1) 35%, rgba(90,111,179,1) 100%)',//'#0A1D30',\n};\n\nconst theme = createTheme({\n//const useStyles = makeStyles((theme: typeof themeInstance) => ({\n  palette: {\n    mode: \"dark\",\n    background: {\n      default: '#0A1D30',\n      paper: \"#000000\"\n    },\n  }\n});\n\n\n\nexport default theme;","/Users/kirk/Solana/grape-dashboard/src/contexts/session.tsx",["292","293"],"import React, { createContext, useContext, useState, useEffect, useReducer } from 'react';\nimport Session from '../models/Session';\n\n//Initial state\nconst LOCAL_STORAGE_KEY = 'grape-session';\n// let grapeSession = localStorage.getItem(LOCAL_STORAGE_KEY);\n// if (grapeSession === \"undefined\") grapeSession = null;\n// let initialState = JSON.parse(grapeSession) || null;\n\n// if (initialState === \"undefined\") {\n//   initialState = null;\n// }\nconst initialState = new Session(null);\n\nconst localState = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n\n//Reducer\nlet reducer = (session: Session, newSession: Session) => {\n  if (newSession === null) {\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n    return initialState;\n  }\n\n  return { ...session, ...newSession };\n};\n\n//Context\ninterface SessionContext {\n  session: Session,\n  setSession: React.Dispatch<any>\n}\n\nexport const SessionContext = createContext<SessionContext>({} as SessionContext);\nexport const useSession = () => useContext(SessionContext);\n\n//Provider\nexport const SessionProvider: React.FC = ({ children }) => {\n  const [session, setSession] = useReducer(reducer, localState || initialState);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(session));\n  }, [session]);\n\n  return (\n    <SessionContext.Provider value={{ session, setSession }}>\n      {children}\n    </SessionContext.Provider>\n  )\n}","/Users/kirk/Solana/grape-dashboard/src/components/Header/Header.tsx",["294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316"],"import * as React from 'react';\nimport { Link, useLocation, NavLink } from 'react-router-dom';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\nimport { useSnackbar } from 'notistack';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\n\n//import Wallet from '../../utils/wallet/Wallet';\n//import PhantomWallet from '../../utils/wallet/Phantom';\n//import SolflareWallet from '../../utils/wallet/Solflare';\n\nimport { useSession } from \"../../contexts/session\";\n\nimport {\n    MenuItem,\n    Menu,\n    Tooltip,\n    Dialog,\n    DialogTitle,\n    List,\n    ListItem,\n    ListItemText\n} from '@mui/material';\n\nimport AssessmentIcon from '@mui/icons-material/Assessment';\nimport GroupWorkIcon from '@mui/icons-material/GroupWork';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport ImageIcon from '@mui/icons-material/Image';\nimport RssFeedIcon from '@mui/icons-material/RssFeed';\nimport IconButton from '@mui/material/IconButton';\nimport LocalOfferIcon from '@mui/icons-material/LocalOffer';\n\nimport DashboardOutlinedIcon from '@mui/icons-material/DashboardOutlined';\nimport PhotoOutlinedIcon from '@mui/icons-material/PhotoOutlined';\nimport InsertChartOutlinedIcon from '@mui/icons-material/InsertChartOutlined';\n\nimport ConnectDialog from '../ConnectDialog/ConnectDialog';\nimport { truncate } from 'lodash';\nimport RssFeed from '@mui/icons-material/RssFeed';\n\nexport interface State extends SnackbarOrigin {\n    open: boolean;\n}\n\nfunction getParam(param: string) {\n    //return new URLSearchParams(document.location.search).get(param);\n    return new URLSearchParams(window.location.search).get(param);\n}\n\ninterface HeaderProps{\n    children?:React.ReactNode;\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function Header(props: any) {\n    const { open_menu } = props;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const { session, setSession } = useSession();\n    const [tokenParam, setTokenParam] = React.useState(getParam('token'));\n    const [discordId, setDiscordId] = React.useState(getParam('discord_id'));\n    const [userId, setUserId] = React.useState(getParam('user_id'));\n    const [providers, setProviders] = React.useState(['Sollet', 'Sollet Extension', 'Phantom','Solflare']);\n    const [open_wallet, setOpenWallet] = React.useState(false);\n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const isWalletOpen = Boolean(anchorEl);\n    const wallets = session && session.userWallets;\n\n    const location = useLocation();\n    const currPath = location.pathname;\n    const searchParams = new URLSearchParams(location.search);\n    //const currPath = location?.pathname ?? \"\";\n    const { enqueueSnackbar } = useSnackbar();\n\n    const isConnected = session && session.isConnected;\n\n    async function disconnect() {\n        setSession(null);\n        window.location.href = \"/\"\n    }    \n\n    //Menu\n    const menuId = 'primary-wallet-account-menu';\n    const menuWalletId = 'primary-fullwallet-account-menu';\n\n    const handleProfileMenuOpen = (event: any) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        // this.props.parentCallback(\"Data from child\");\n    };\n\n    const handleWalletConnectClickOpen = (type: string, callback: any) => {\n        callback && callback();\n    };\n\n    const handleCloseWallet = (value: any) => {\n        setOpenWallet(false);\n\n    };\n\n    function SimpleDialog(props: any) {\n        const { onClose, selectedValue, open_wallet } = props;\n\n        const handleCloseWallet = () => {\n            onClose(selectedValue);\n        };\n\n        const handleListItemClick = (value: any) => {\n            onClose(value);\n        };\n\n        return (\n            <Dialog onClose={handleCloseWallet} aria-labelledby=\"simple-dialog-title\" open={open_wallet}>\n                <DialogTitle id=\"simple-dialog-title\">Select Wallet</DialogTitle>\n                <List>\n                    {providers.map((provider) => (\n                        <ListItem button onClick={() => handleListItemClick(provider)} key={provider}>\n                            <ListItemText primary={provider} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    }\n\n    const handleClickSnackbar = () => {\n        enqueueSnackbar(`Copied...`,{ variant: 'success' });\n        \n        handleMenuClose();\n        //setSnackbarState(true);\n    };\n\n    const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSnackbarState(false);\n    };\n\n\n    return (\n\n        <Toolbar\n            color=\"inherit\"\n            sx={{\n                pr: '24px', // keep right padding when drawer closed\n                background: 'none'\n            }}\n            >\n            \n            <Box display='flex' flexGrow={1}>\n                <Typography\n                    component=\"h1\"\n                    variant=\"h6\"\n                    color=\"inherit\"\n                    noWrap\n                    display='flex'\n                >\n                    <img src=\"/grape_white_logo.svg\" height=\"40px\" className=\"header-logo\" alt=\"Grape\" />\n                </Typography>\n                \n                <Tooltip title={`Dashboard`}><IconButton component={NavLink} color=\"inherit\" to=\"/\"><DashboardOutlinedIcon/></IconButton></Tooltip>\n                <Tooltip title={`Collection`}><IconButton component=\"a\" href='https://grape.art' target=\"_blank\"><PhotoOutlinedIcon/></IconButton></Tooltip>\n                <Tooltip title={`Partners`}><IconButton component={NavLink} color=\"inherit\" to=\"/partners\"><InsertChartOutlinedIcon/></IconButton></Tooltip>\n                <Tooltip title={`News`}><IconButton component={NavLink} color=\"inherit\" to=\"/news\"><RssFeedIcon/></IconButton></Tooltip>\n            </Box>\n            <div>\n\n                {currPath !== \"/register\" && currPath !== \"/start\" ?\n                    <>\n                    {searchParams.toString().length <= 100 &&\n                        \n                        <div className=\"header-action\">\n                            <ConnectDialog \n                                session={session}\n                                isConnected={isConnected}\n                                userId={userId}\n                                menuId='primary-wallet-account-menu'\n                                menuWalletId='primary-fullwallet-account-menu'\n                                handleProfileMenuOpen={handleProfileMenuOpen}\n                                handleClickOpen={handleWalletConnectClickOpen}\n                                buttonText=\"Connect\"\n                                nakedWallet={false}\n                                login={true}   \n                                token={null}   \n                                discordId={null} \n                            />\n\n                            \n                            <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\n                                <Menu\n                                    anchorEl={anchorEl}\n                                    id={menuId}\n                                    keepMounted\n                                    open={isWalletOpen}\n                                    //open={open_wallet}\n                                    onClose={handleMenuClose}\n                                >\n                                    <CopyToClipboard \n                                        text={session.publicKey} \n                                        //onCopy={copySnackbar}>\n                                        onCopy={handleClickSnackbar}>\n                                        <MenuItem>\n                                            <ContentCopyIcon sx={{ mr:1 }} /> Copy to clipboard\n                                        </MenuItem>\n                                    </CopyToClipboard>\n                                    <MenuItem\n                                        component=\"a\"\n                                        href={`https://explorer.solana.com/address/${session.publicKey}`}\n                                        target=\"_blank\"\n                                    >\n                                        <OpenInNewIcon sx={{ mr:1 }} /> Explore\n                                    </MenuItem>\n                                    <MenuItem onClick={disconnect}><LinkOffIcon sx={{ mr:1 }} />Disconnect</MenuItem>\n                                </Menu>\n                            </Box>\n\n                            <SimpleDialog open={open_wallet} onClose={handleCloseWallet} />\n                            \n                        </div>\n                    }\n                </>\n                :\n                <>\n                </>\n                }\n            </div>\n        </Toolbar>\n        \n    );\n}\n\nexport default Header;\n","/Users/kirk/Solana/grape-dashboard/src/components/ConfirmDialog/ConfirmDialog.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/views/index.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/models/Session.ts",[],"/Users/kirk/Solana/grape-dashboard/src/components/ConnectDialog/ConnectDialog.tsx",["317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372"],"import React, { FC, useCallback, useMemo } from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n  Box,\n  Typography,\n\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  IconButton,\n  List,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n  ListItem,\n  Divider,\n  TextField,\n  Grid,\n  Backdrop,\n  CircularProgress\n} from '@mui/material';\n\nimport { useSnackbar } from 'notistack';\nimport CloseIcon from '@mui/icons-material/Close';\nimport DisconnectIcon from '@mui/icons-material/LinkOff';\nimport AccountBalanceWalletOutlinedIcon from '@mui/icons-material/AccountBalanceWalletOutlined';\n\nimport bs58 from 'bs58';\nimport { sign } from 'tweetnacl';\n\nimport { NakedWallet } from '../../utils/wallet/NakedWallet';\nimport { useSession } from \"../../contexts/session\";\nimport Session from '../../models/Session';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction, Signer } from '@solana/web3.js';\nimport { useConnection, ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '../WalletAdapterMui';\n//import { WalletDialogProvider, WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-material-ui';\nimport { WalletAdapterNetwork, WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { propsToClassKey } from '@mui/styles';\n\nimport { confirmDialog } from '../ConfirmDialog/ConfirmDialog';\nimport { GRAPE_APP_API_URL } from '../Tools/constants';\n\n// Default styles\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\n\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nconst WalletNavigation: FC = (props:any) => {\n  //const { connection } = useConnection();\n  const { userId, discordId, token, login } = props;\n  const { session, setSession } = useSession();\n  const { connection } = useConnection();\n  const { publicKey, wallet, disconnect, sendTransaction, signMessage } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const message  = '$GRAPE';\n  //session: Object;\n  \n  function sleep(milliseconds:number) {\n    const date = Date.now();\n    let currentDate = null;\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n  async function disconnectSession(redirect:boolean) {\n    await disconnect().catch(() => { /* catch any errors */ });\n    setSession(null);\n    if (redirect)\n        window.location.href = \"/\";\n  }\n\n  function createNakedSession(cnsPublicKey: string){\n    setSession(NakedWallet(cnsPublicKey, session));\n  }\n  \n  async function confirmWalletWithTransaction() { \n    const amountToSend = 0.00001;\n    const decimals = 9;\n    const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n    const transaction = new Transaction()\n    .add(\n        SystemProgram.transfer({\n            fromPubkey: publicKey,\n            toPubkey: publicKey,\n            lamports: adjustedAmountToSend,\n        })\n    );\n    \n    //enqueueSnackbar(`Preparing to send ${amountToSend} ${name} to ${toaddress}`,{ variant: 'info' });\n    console.log(\"Preparing transaction to self: \" + amountToSend);\n    enqueueSnackbar(`Preparing transaction`,{ variant: 'info' });\n    const sm_signature = await sendTransaction(transaction, connection);\n    //enqueueSnackbar(`Transaction ready`,{ variant: 'info' });\n    enqueueSnackbar(`Please wait while the transaction completes, this may take a few seconds`,{ variant: 'info', autoHideDuration: 5000 });\n    console.log(\"Confirming Transaction: \" + JSON.stringify(sm_signature));\n    sleep(5000);\n    //enqueueSnackbar(`Confirming transaction`,{ variant: 'info' });\n    await connection.confirmTransaction(sm_signature, 'processed');\n    //if (!transaction.verifySignatures()){\n    if (!sm_signature){\n      console.log(\"Signature Verification = false\");\n      disconnectSession(true);\n    }\n    enqueueSnackbar(`Transaction complete`,{ variant: 'success' });\n    \n    return sm_signature;\n  }\n\n  //if (!publicKey) throw new WalletNotConnectedError();\n  const VerifyWallet = useCallback(async (sent_publicKey) => {\n    console.log(\"CD: Running wallet verification...\");\n    try {\n        let naked_session = false;\n        // `publicKey` will be null if the wallet isn't connected\n        \n        //console.log('pubkey: '+publicKey + ' vs ' + sent_publicKey);\n        if (!publicKey){\n          //console.log('CD: WALLET NOT CONNECTED...');\n          //disconnect().catch(() => { /* catch any errors */ });\n          //throw new Error('Wallet not connected!');\n        }\n        // `signMessage` will be undefined if the wallet doesn't support it\n        //console.log(\"Checking signing support \"+wallet?.name + \" wallet\");\n        \n        // ask to sign message only if no session\n        \n        if (!session.isConnected){\n          //console.log(\"No session\");\n          if (!signMessage){ \n            if (wallet?.adapter.name){\n              console.log(wallet?.adapter.name + ' wallet does not support message signing!');\n\n              if (wallet?.adapter.name == \"Solflare\"){\n              //  console.log(\"CD: SOLFLARE WALLET CONNECTED!\");\n              }\n\n              if (wallet?.adapter.name){ // only if a wallet has a name but cannot sign (naked wallet)\n                alert(\"WARNING: Message signing is not supported with \"+wallet?.adapter.name+\" for Grape Access!\");\n                // allow wallet to board but only as a naked wallet (since signing is required)\n                createNakedSession(publicKey.toBase58());\n                return null;\n                //publicKey = null;\n              }\n            } else{\n              //alert(publicKey);\n              if ((publicKey)&&(login)){ // no wallet name but we have the publicKey:\n                createNakedSession(publicKey.toBase58());\n                naked_session = true;\n                return null;\n              }\n            }\n            //if (wallet.name != \"Ledger\"){\n            disconnectSession(false);\n            //alert(\"Wallet does not support message signing!\");\n            throw new Error('Wallet does not support message signing!');\n          }\n          \n          // Encode anything as bytes\n          const smessage = new TextEncoder().encode(message);\n          // Sign the bytes using the wallet\n          console.log(wallet?.adapter.name + \" attempting to sign message\");\n\n          let fromTransaction = false;\n          let sm_signature = await signMessage(smessage)\n          .catch((error: any)=>{\n            \n            if (publicKey){\n             \n            } else{\n                return null;\n            }\n\n          });\n\n          if (!sm_signature){\n            if (window.confirm(\"Grape signs a message to verify your wallet\\n\\nYour current wallet could not be verified, some wallets including Ledger do not support message signing, if you would like to send a transaction to your wallet to confirm your wallet please press OK\")){\n              fromTransaction = true;\n              sm_signature = await confirmWalletWithTransaction();\n              sm_signature = new TextEncoder().encode(sm_signature); // convert to \"utf-8\"\n            }\n            \n          }\n          \n          //console.log(\"sm_signature: \"+sm_signature);\n          if ((!sm_signature)&&(publicKey)){ // signature is null but there is a publickey\n            // 1. set naked session (above)\n            // 2. prompt user that they will need to make a transaction to themselves in order to have access to add/remove servers\n            createNakedSession(publicKey.toString());\n            return null;\n          } else if (!sm_signature){ // invalid signature\n            disconnectSession(false);\n          }\n          \n          //console.log(\"smessage: \"+smessage);\n          //console.log(\"Signature: \"+sm_signature);\n          //console.log(\"pKey: \"+publicKey.toBytes());\n\n          // Verify that the bytes were signed using the private key that matches the known public key\n          if (wallet?.adapter.name != \"Slope\"){\n            if (!fromTransaction){ // verify signature from signed message\n              if (!sign.detached.verify(smessage, sm_signature, publicKey.toBytes())){ \n                disconnectSession(false);\n                throw new Error('CD: Invalid signature!');\n              }\n            }\n          }\n\n          const bs58_address = bs58.decode(publicKey.toString());\n          const address = {\"type\":\"Buffer\",\"data\":Object.values(bs58_address)}\n          const signature = {\"type\":\"Buffer\",\"data\":Object.values(sm_signature)}\n          \n          //const address = bs58.decode(bs58_address.toString());\n          //const signature2 = bs58.decode(sm_signature); \n\n          //console.log(\"Signature 1: \"+signature);\n          //console.log(\"Signature 2: \"+signature2);\n\n          //const address = bs58.decode(signed.publicKey);\n          //const decoded_signature = Buffer.from(signature, 'utf8');\n          //const decoded_signature = Buffer.from(signature).toString('utf8');\n          \n          console.log(JSON.stringify({\n              userId: userId,\n              token: message,\n              address: bs58_address,\n              publicKey: publicKey.toString(),\n              signature: signature,\n              fromTransaction: fromTransaction\n          }));\n\n          console.log(wallet?.adapter.name + \" connecting to Grape Dashboard...\");\n          \n          if (login){ // login\n            console.log(\"LOGIN GRAPE\");\n            if (GRAPE_APP_API_URL){\n              const response = await fetch(`${GRAPE_APP_API_URL}/login`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    token: message,\n                    address: bs58_address,\n                    publicKey: publicKey.toString(),\n                    signature: signature,\n                    fromTransaction: fromTransaction\n                })\n              }).catch( err => {\n                console.log(\"ERROR: \"+err);\n                return null;\n              });\n              const session = await response.json();\n            \n              console.log(wallet?.adapter.name+\" connected to Grape Dashboard!\");\n              session.token = {address, signature};\n              session.publicKey = publicKey.toString();\n              session.isConnected = true;\n              session.fromTransaction = fromTransaction;\n              if (!response)\n                session.isWallet = false;\n              else\n                session.isWallet = true;\n              setSession(session);\n            } else{\n              createNakedSession(publicKey.toBase58());\n            }\n          } else{ // register\n            console.log(\"REGISTERING WITH GRAPE\");\n            console.log(JSON.stringify({\n                userId: userId,\n                token: token,\n                address: bs58_address,\n                publicKey: publicKey.toString(),\n                signature: signature,\n                fromTransaction: fromTransaction\n            }));\n            \n            if (GRAPE_APP_API_URL){\n              const response2 = await fetch(`${GRAPE_APP_API_URL}/register`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    userId: userId,\n                    token: token,\n                    address: bs58_address,\n                    publicKey: publicKey.toString(),\n                    signature: signature,\n                    fromTransaction: fromTransaction\n                })\n              }).catch( err => {\n                console.log(\"ERROR: \"+err);\n                return null;\n              });\n              const session2 = await response2.json();\n              console.log(wallet?.adapter.name+\" connected to Grape Dashboard!\");\n              session2.token = {address, signature};\n              session2.publicKey = publicKey.toString();\n              session2.discordId = discordId;\n              session.fromTransaction = fromTransaction;\n              if (!response2){\n                session2.isConnected = false;\n                session.isWallet = false;\n              }else{\n                session2.isConnected = true;\n                session.isWallet = true;\n              }\n              setSession(session2);\n            }\n            //console.log(\"CD: Session created (\"+publicKey.toString()+\")\");\n          }\n          \n            \n        }\n        return session;\n    \n    } catch (error: any) {\n      console.log(`Signing failed: ${error?.message}`);\n      disconnectSession(false);\n      //setSession(null);\n      return null;\n    }\n  }, [signMessage]);\n//};\n\n  //console.log('Pre call: '+publicKey);\n\n  const [callstopk, setCallToPk] = React.useState(0);\n  \n  React.useEffect(() => { \n    \n    setCallToPk(callstopk+1);\n\n    if ((!session.publicKey)&&(publicKey)){\n      if (publicKey.toString().length > 0){\n        //console.log(callstopk+\". CD SESSION CHANGED: \"+session.publicKey);\n        //console.log(callstopk+\". CD WALLET PK: \"+publicKey);  \n        // show dialog to connect \n        VerifyWallet(publicKey);\n      }\n    }\n  }, [publicKey]);\n\n  // <WalletDisconnectButton startIcon={<DisconnectIcon />} style={{ marginLeft: 8 }} />\n  return(\n    <React.Fragment>\n      <WalletMultiButton />\n    </React.Fragment>\n  );\n}\n\nconst WalletButton: FC = (props:any) => {\n  const [open, setOpen] = React.useState(false);\n  const { publicKey, wallet, disconnect, sendTransaction, signMessage } = useWallet();\n  \n  function trimAddress(addr: string) {\n    let start = addr.substring(0, 5);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n  }\n\n  function showWalletAddress(addr: string){\n    return (\n      <React.Fragment>\n        <AccountBalanceWalletOutlinedIcon fontSize=\"small\" sx={{ mr:1 }}  /> {trimAddress(addr)}\n      </React.Fragment>\n    )\n  }\n  \n  const handleOpen = () => {\n      setOpen(true);\n    };\n    const handleClose = () => {\n      setOpen(false);\n    };\n    \n   return(\n      <WalletNavigation {...props} />\n   );\n  \n};\n\nexport default function ConnectDialog(props: any) {\n  const { isConnected, menuId, handleProfileMenuOpen, handleClickOpen, buttonText, nakedWallet, userId, discordId, token, login } = props;\n  const [open, setOpen] = React.useState(false);\n  const { session, setSession } = useSession();\n  //const [providers, setProviders] = React.useState(['Sollet', 'Sollet Extension', 'Phantom', 'Solflare']);\n  //const [anchorEl, setAnchorEl] = React.useState(null);\n  \n  function trimAddress(addr: string) {\n    let start = addr.substring(0, 5);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n  }\n\n  function showWalletAddress(addr: string){\n    return (\n      <React.Fragment>\n        <AccountBalanceWalletOutlinedIcon fontSize=\"small\" sx={{ mr:1 }}  /> {trimAddress(addr)}\n      </React.Fragment>\n    )\n  }\n\n  const ManualWalletForm = () => {\n    const [walletId, setInputValue] = React.useState('');\n    const [error, setError] = React.useState(false)\n    const handleInput = (val: any) => {\n      return val;\n    };\n\n    function handleSubmit(event: any) {\n      event.preventDefault();\n      // use the inputValue which is the wallet ID\n      console.log( 'MANUALLY SET WALLET ID:' + walletId); \n      if ((walletId.length >= 32) && \n          (walletId.length <= 44)){\n        // WalletId is base58 validate the type too later on\n        setSession(NakedWallet(walletId, session));\n        handleClose();\n      } else{\n        // Invalid Wallet ID\n        \n      }\n        //console.log( 'SET WALLET:', walletId); \n    }\n    \n    //console.log(\"CONNECT USERID: \"+walletId);\n\n    return (\n        <>\n          <form onSubmit={handleSubmit}>\n            <Grid container>\n              <Grid item>\n                <TextField\n                  autoFocus\n                  autoComplete='off'\n                  margin=\"dense\"\n                  id=\"wallet_id\"\n                  label=\"Paste Wallet ID\"\n                  type=\"text\"\n                  fullWidth\n                  variant=\"standard\"\n                  value={walletId}\n                  onChange={(e) => setInputValue(e.target.value)}\n                />\n              </Grid>\n              <Grid item alignItems=\"center\" style={{ display: \"flex\" }}>\n                <Button \n                  type=\"submit\"\n                  variant=\"contained\" \n                  title=\"GO\">\n                    Go\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </>\n    );\n  }\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  /*\n  const handleClickOpen = () => {\n    setOpen(true);\n  };*/\n  \n  const wallet_connect_body = (\n    <React.Fragment>\n      {nakedWallet &&\n        <React.Fragment>\n          <Divider />\n          <ManualWalletForm />\n        </React.Fragment>\n      }\n    </React.Fragment>\n  );\n\n  return (\n    <>\n      <WalletDialogProvider>    \n        <WalletButton {...props}/>\n        {wallet_connect_body}\n      </WalletDialogProvider>\n    </>\n\n  );\n}","/Users/kirk/Solana/grape-dashboard/src/views/Home/Home.jsx",["373","374","375","376","377","378","379","380","381","382"],"import React, { FC, useCallback, useMemo } from 'react';\nimport { useSession } from \"../../contexts/session\";\n\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport { useSnackbar } from 'notistack';\nimport { ServersView, SettingsView, PortfolioView, GovernanceView } from \"../\";\n\nfunction ConnectedWalletComponent(props) {\n  return (\n    <React.Fragment>\n      <ServersView /> \n      <SettingsView />\n    </React.Fragment>\n  );\n}\n\nfunction BasicComponent(props) {\n  return (\n    <React.Fragment>\n      <PortfolioView />\n      <GovernanceView />\n    </React.Fragment>\n  );\n}\n\nconst RenderDashboardComponents = (props) => {\n  const { publicKey, wallet } = useWallet();\n  const session = props.session;\n  //const publicKey = props.publicKey;\n  const isConnected = session && session.isConnected;\n  const isWallet = session && session.isWallet;\n  \n  // show if connected\n  //if (publicKey){\n      switch(isConnected) {\n      case isWallet: // display only if verified pk in wallet\n        return <React.Fragment><BasicComponent /><ConnectedWalletComponent /></React.Fragment>\n      default:\n        return <BasicComponent />\n      }\n  //}\n}\n\nexport const HomeView = (props) => {\n  const { session, setSession } = useSession();\n  const isConnected = session && session.isConnected;\n  const { publicKey, wallet } = useWallet();\n  const [callstopk, setCallToPk] = React.useState(0);\n  \n  React.useEffect(() => { \n    \n    setCallToPk(callstopk+1);\n\n    //console.log(callstopk+\". RENDER EFFECT SESSION CHANGED: \"+session.publicKey);\n    //console.log(callstopk+\". RENDER EFFECT WALLET PK: \"+publicKey);\n\n    // AT THE MOMENT THE ABOVE IS NOT CHECKED - THIS WILL NEED TO BE MODIFIED TO HANDLE THE SESSION BETTER\n\n    //if (!wallet){\n    //  setSession(null);\n    //}\n  }, [session, publicKey]);\n  \n  return (\n            <>\n              {wallet ? \n                <Grid container spacing={3}>\n                <RenderDashboardComponents\n                  session={session}\n                />\n              </Grid>\n              :\n              <Grid item xs={12}>\n                <Paper class=\"grape-paper-background\">\n                  <Grid \n                    class=\"grape-paper\" \n                    container\n                    spacing={0}\n                    align=\"center\"\n                    justify=\"center\"\n                    direction=\"column\">\n                    <Grid item>\n                      <Typography \n                        align=\"center\"\n                        variant=\"h3\">\n                        {'Not connected'}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Paper>\n              </Grid>}\n            </>\n  );\n}\n","/Users/kirk/Solana/grape-dashboard/src/utils/wallet/NakedWallet.ts",[],"/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/index.ts",[],"/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/useWalletDialog.ts",[],"/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDisconnectButton.tsx",["383","384"],"import { \n    Button, \n    ButtonProps } \nfrom '@mui/material';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useSession } from \"../../contexts/session\";\nimport React, { FC, MouseEventHandler, useCallback, useMemo } from 'react';\nimport { WalletIcon } from './WalletIcon';\n\nexport const WalletDisconnectButton: FC<ButtonProps> = ({\n    color = 'primary',\n    variant = 'outlined',\n    children,\n    disabled,\n    onClick,\n    ...props\n}) => {\n    const { session, setSession } = useSession();\n    const { wallet, disconnect, disconnecting } = useWallet();\n    \n    const handleClick: MouseEventHandler<HTMLButtonElement> = useCallback(\n        (event) => {\n            if (onClick) onClick(event);\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            if (!event.defaultPrevented)\n                disconnect().catch(() => {\n                    // Silently catch because any errors are caught by the context `onError` handler\n                });\n            setSession(null);\n            window.location.href = \"/\"\n        },\n        [onClick, disconnect]\n    );\n\n    const content = useMemo(() => {\n        if (children) return children;\n        if (disconnecting) return 'Disconnecting ...';\n        if (wallet) return 'Disconnect';\n        return 'Disconnect Wallet';\n    }, [children, disconnecting, wallet]);\n\n    return (\n        <Button\n            color={color}\n            variant={variant}\n            onClick={handleClick}\n            disabled={disabled || !wallet}\n            startIcon={<WalletIcon wallet={wallet} />}\n            {...props}\n        >\n            {content}\n        </Button>\n    );\n};","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDialogProvider.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDialogButton.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletIcon.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletDialog.tsx",["385","386","387","388","389","390"],"import {\n    Button,\n    Collapse,\n    Dialog,\n    DialogContent,\n    DialogProps,\n    DialogTitle,\n    IconButton,\n    List,\n    ListItem\n} from '@mui/material';\n\nimport{\n    styled, createTheme\n} from '@mui/material/styles';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletName } from '@solana/wallet-adapter-wallets';\nimport React, { FC, ReactElement, SyntheticEvent, useCallback, useMemo, useState } from 'react';\nimport { useWalletDialog } from './useWalletDialog';\nimport { WalletListItem } from './WalletListItem';\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuiDialog-paper': {\n        width: theme.spacing(40),\n        margin: 0,\n    },\n    '& .MuiDialogTitle-root': {\n        //backgroundColor: theme.palette.primary.main,\n        //backgroundColor: '#000000',  /* fallback for old browsers */\n        //backgroundColor: 'rgb(0 0 0 / 50%)',\n        background: 'linear-gradient(to right, #251a3a, #000000)',\n        '& .MuiTypography-root': {\n            display: 'flex',\n            justifyContent: 'space-between',\n            lineHeight: theme.spacing(5) + 'px',\n        },\n        '& .MuiIconButton-root': {\n            flexShrink: 1,\n            padding: theme.spacing(),\n            marginRight: theme.spacing(-1),\n            color: theme.palette.grey[500],\n        },\n    },\n    '& .MuiDialogContent-root': {\n        padding: 0,\n        '& .MuiCollapse-root': {\n            '& .MuiList-root': {\n                background: 'rgba(0,0,0,0.5)',\n            },\n        },\n        '& .MuiList-root': {\n            background: 'rgba(0,0,0,0.5)',\n            padding: 0,\n        },\n        '& .MuiListItem-root': {\n            boxShadow: 'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)',\n            '&:hover': {\n                boxShadow:\n                    'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)' + ', 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.05)',\n            },\n            padding: 0,\n            '& .MuiButton-endIcon': {\n                margin: 0,\n            },\n            '& .MuiButton-root': {\n                flexGrow: 1,\n                justifyContent: 'space-between',\n                padding: theme.spacing(1, 3),\n                borderRadius: undefined,\n                fontSize: '1rem',\n                fontWeight: 400,\n            },\n            '& .MuiSvgIcon-root': {\n                color: theme.palette.grey[500],\n            },\n        },\n    },\n}));\n\nexport interface DialogTitleProps {\n    id: string;\n    children?: React.ReactNode;\n    onClose: () => void;\n}\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nexport interface WalletDialogProps extends Omit<DialogProps, 'title' | 'open'> {\n    featuredWallets?: number;\n    title?: ReactElement;\n}\n\nexport const WalletDialog: FC<WalletDialogProps> = ({\n    title = 'Select your wallet',\n    featuredWallets = 3,\n    onClose,\n    ...props\n}) => {\n    const { wallets, select } = useWallet();\n    const { open, setOpen } = useWalletDialog();\n    const [expanded, setExpanded] = useState(false);\n\n    const [featured, more] = useMemo(\n        () => [wallets.slice(0, featuredWallets), wallets.slice(featuredWallets)],\n        [wallets, featuredWallets]\n    );\n\n    const handleClose = useCallback(\n        (event: SyntheticEvent, reason?: 'backdropClick' | 'escapeKeyDown') => {\n            if (onClose) onClose(event, reason!);\n            if (!event.defaultPrevented) setOpen(false);\n        },\n        [setOpen, onClose]\n    );\n\n    const handleWalletClick = useCallback(\n        (event: SyntheticEvent, walletName: WalletName) => {\n            select(walletName);\n            handleClose(event);\n        },\n        [select, handleClose]\n    );\n\n    const handleExpandClick = useCallback(() => setExpanded(!expanded), [setExpanded, expanded]);\n    \n    return (\n        <BootstrapDialog\n            open={open} \n            onClose={handleClose} \n            //fullWidth={true}\n            maxWidth={\"xs\"}\n            PaperProps={{ \n            style: {\n                background: 'linear-gradient(to right, #251a3a, #000000)',\n                boxShadow: '3',\n                border: '1px solid rgba(255,255,255,0.15)',\n                borderTop: '1px solid rgba(255,255,255,0.3)',\n                borderRadius: '20px',\n                padding:'4'\n                },\n            }}\n            {...props}>\n            <DialogTitle>\n                {title}\n                <IconButton \n                    sx={{\n                        position: 'absolute',\n                        right: 8,\n                        top: 8,\n                    }} \n                    onClick={handleClose}>\n                    <CloseIcon />\n                </IconButton>\n            </DialogTitle>\n            <DialogContent>\n                <List>\n                    {featured.map((wallet) => (\n                        <WalletListItem\n                            key={wallet.name}\n                            onClick={(event) => handleWalletClick(event, wallet.name)}\n                            wallet={wallet}\n                        />\n                    ))}\n                    {more.length ? (\n                        <>\n                            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                                <List>\n                                    {more.map((wallet) => (\n                                        <WalletListItem\n                                            key={wallet.name}\n                                            onClick={(event) => handleWalletClick(event, wallet.name)}\n                                            wallet={wallet}\n                                        />\n                                    ))}\n                                </List>\n                            </Collapse>\n                            <ListItem>\n                                <Button onClick={handleExpandClick}>\n                                    {expanded ? 'Less' : 'More'} options\n                                    {expanded ? <ExpandLess /> : <ExpandMore />}\n                                </Button>\n                            </ListItem>\n                        </>\n                    ) : null}\n                </List>\n            </DialogContent>\n        </BootstrapDialog>\n    );\n};","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletMultiButton.tsx",["391","392","393","394","395","396","397"],"import {\n    Button,\n    ButtonProps,\n    Collapse,\n    Fade,\n    ListItemIcon,\n    Menu,\n    MenuItem,\n} from '@mui/material';\n\nimport{\n    makeStyles, styled\n} from '@mui/material/styles';\nimport CopyIcon from '@mui/icons-material/FileCopy';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\n\nimport { useSnackbar } from 'notistack';\nimport { useSession } from \"../../contexts/session\";\nimport DisconnectIcon from '@mui/icons-material/LinkOff';\nimport SwitchIcon from '@mui/icons-material/SwapHoriz';\nimport AccountBalanceWalletOutlinedIcon from '@mui/icons-material/AccountBalanceWalletOutlined';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport React, { FC, useMemo, useCallback, useState } from 'react';\nimport { useWalletDialog } from './useWalletDialog';\nimport { WalletConnectButton } from './WalletConnectButton';\nimport { WalletDialogButton } from './WalletDialogButton';\n\nimport { WalletIcon } from './WalletIcon';\n\nconst StyledMenu = styled(Menu)(({ theme }) => ({\n    '& .MuiList-root': {\n        padding: 0,\n    },\n    '& .MuiMenuItem-root': {\n        padding: theme.spacing(1, 2),\n        boxShadow: 'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)',\n        '&:not(.MuiButtonBase-root)': {\n            padding: 0,\n            '& .MuiButton-root': {\n                borderRadius: 0,\n            },\n        },\n        '&:hover': {\n            boxShadow:\n                'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)' + ', 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.05)',\n        },\n    },\n    '& .MuiListItemIcon-root': {\n        marginRight: theme.spacing(),\n        minWidth: 'unset',\n        '& .MuiSvgIcon-root': {\n            width: 20,\n            height: 20,\n        },\n    },\n}));\n\nfunction trimAddress(addr: string) {\n    if (!addr) return null;\n    if (addr.length > 10){\n            let start = addr.substring(0, 4);\n            let end = addr.substring(addr.length - 4);\n            return `${start}...${end}`;\n    }\n    return addr;\n  }\n\n  function showWalletAddress(addr: string){\n    return (\n      <React.Fragment>\n        <AccountBalanceWalletOutlinedIcon fontSize=\"small\" sx={{ mr:1 }}  /> {trimAddress(addr)}\n      </React.Fragment>\n    )\n  }\n\nexport const WalletMultiButton: FC<ButtonProps> = ({\n    color = 'primary',\n    variant = 'outlined',\n    children,\n    ...props\n}) => {\n    const { publicKey, wallet, disconnect } = useWallet();\n    const { session, setSession } = useSession();\n    const { setOpen } = useWalletDialog();\n    const [anchor, setAnchor] = useState<HTMLElement>();\n    //const message  = '$GRAPE';\n\n    let base58 = useMemo(() => publicKey?.toBase58(), [publicKey]) || null;\n    const content = useMemo(() => {\n        if (children) return children;\n        if (!wallet || !base58) return null;\n        return base58.slice(0, 4) + '..' + base58.slice(-4);\n    }, [children, wallet, base58]);\n\n    const { enqueueSnackbar } = useSnackbar();\n    \n    //console.log(JSON.stringify(wallet));\n    //console.log(JSON.stringify(session));\n    \n    async function disconnectSession(redirect:boolean) {\n        setSession(null);\n        if (redirect)\n            window.location.href = \"/\";\n    }\n\n    if (!wallet) {\n        //if ((session.isConnected)&&(!publicKey))\n        //    disconnectSession(false);\n\n        if (session?.publicKey){\n            //disconnectSession(false);\n            //console.log(\"1. DISCONNECT!\")\n        }\n\n        return (\n            <WalletDialogButton color={color} variant={variant} {...props}>\n                {children}\n            </WalletDialogButton>\n        );\n        \n    }\n    if (!base58) {\n        if (session?.publicKey){\n            console.log(\"Session: \"+session.publicKey);\n            if (!publicKey){\n                // check if wallet?\n                console.log(\"No publicKey, checking wallet availability\");\n                if (!wallet){\n                    console.log(\"Clearing Session...\");\n                    disconnectSession(false);\n                    console.log(\"Session cleared.\");\n                }\n            }\n        }\n\n        return (\n            <WalletConnectButton color={color} variant={variant} {...props}>\n                {children}\n            </WalletConnectButton>\n        );\n    }\n    \n    return (\n        <>\n            <Button\n                color={color}\n                variant={variant}\n                startIcon={<WalletIcon wallet={wallet} />}\n                onClick={(event) => setAnchor(event.currentTarget)}\n                aria-controls=\"wallet-menu\"\n                aria-haspopup=\"true\"\n                //className={styles.root}\n                {...props}\n            >\n                {showWalletAddress(session.publicKey)}\n            </Button>\n            <StyledMenu\n                id=\"wallet-menu\"\n                anchorEl={anchor}\n                open={!!anchor}\n                onClose={() => setAnchor(undefined)}\n                marginThreshold={0}\n                TransitionComponent={Fade}\n                transitionDuration={250}\n                keepMounted\n            >\n                <Collapse in={!!anchor}>\n                    <MenuItem\n                        onClick={async () => {\n                            setAnchor(undefined);\n                            await navigator.clipboard.writeText(base58);\n                            enqueueSnackbar(`Copied...`,{ variant: 'success' });\n                        }}\n                    >\n                        <ListItemIcon>\n                            <CopyIcon />\n                        </ListItemIcon>\n                        Copy address\n                    </MenuItem>\n                    <MenuItem\n                        component=\"a\"\n                        href={`https://explorer.solana.com/address/${session.publicKey}`}\n                        target=\"_blank\"\n                    >\n                        <ListItemIcon>\n                            <OpenInNewIcon />\n                        </ListItemIcon>\n                        Explore\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => {\n                            setAnchor(undefined);\n                            disconnect()\n                                .catch(() => {\n                                    // Silently catch because any errors are caught by the context `onError` handler\n                                })\n                                .then(() => {\n                                    disconnectSession(false);\n                                });\n                            setOpen(true);\n                        }}\n                    >\n                        <ListItemIcon>\n                            <SwitchIcon />\n                        </ListItemIcon>\n                        Connect a different wallet\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => {\n                            setAnchor(undefined);\n                            // eslint-disable-next-line @typescript-eslint/no-empty-function\n                            disconnect()\n                                .catch(() => {\n                                    // Silently catch because any errors are caught by the context `onError` handler\n                                })\n                                .then(() => {\n                                    disconnectSession(true);\n                                });\n                            //setOpen(true);\n                        }}\n                    >\n                        <ListItemIcon>\n                            <DisconnectIcon />\n                        </ListItemIcon>\n                        Disconnect\n                    </MenuItem>\n                </Collapse>\n            </StyledMenu>\n        </>\n\n    );\n    \n    /*\n    return (\n        <>\n            <Button\n                color={color}\n                variant={variant}\n                startIcon={<WalletIcon wallet={wallet} />}\n                onClick={(event) => setAnchor(event.currentTarget)}\n                aria-controls=\"wallet-menu\"\n                aria-haspopup=\"true\"\n                className={styles.root}\n                {...props}\n            >\n                {content}\n            </Button>\n            <Menu\n                id=\"wallet-menu\"\n                anchorEl={anchor}\n                open={!!anchor}\n                onClose={() => setAnchor(undefined)}\n                className={styles.menu}\n                marginThreshold={0}\n                TransitionComponent={Fade}\n                transitionDuration={250}\n                keepMounted\n            >\n                <MenuItem onClick={() => setAnchor(undefined)}>\n                    <Button\n                        color={color}\n                        variant={variant}\n                        startIcon={<WalletIcon wallet={wallet} />}\n                        className={styles.root}\n                        onClick={(event) => {\n                            setAnchor(undefined);\n                            enqueueSnackbar({'Success': 'copied'}, { variant: 'success' });\n                            enqueueSnackbar('Copied address', { variant: 'success'} );\n                        }}\n                        fullWidth\n                        {...props}\n                    >\n                        {wallet.name}\n                    </Button>\n                </MenuItem>\n                <Collapse in={!!anchor}>\n                    <MenuItem\n                        onClick={async () => {\n                            setAnchor(undefined);\n                            await navigator.clipboard.writeText(base58);\n\n                        }}\n                    >\n                        <ListItemIcon>\n                            <CopyIcon />\n                        </ListItemIcon>\n                        Copy address\n                    </MenuItem>\n                    <MenuItem\n                        component=\"a\"\n                        href={`https://explorer.solana.com/address/${session.publicKey}`}\n                        target=\"_blank\"\n                    >\n                        <ListItemIcon>\n                            <OpenInNewIcon />\n                        </ListItemIcon>\n                        Explore\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => {\n                            setAnchor(undefined);\n                            setOpen(true);\n                        }}\n                    >\n                        <ListItemIcon>\n                            <SwitchIcon />\n                        </ListItemIcon>\n                        Connect a different wallet\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => {\n                            setAnchor(undefined);\n                            async function disconnect() {\n                                //setSession(null);\n                                //window.location.href = \"/\"\n                            }    \n                            // eslint-disable-next-line @typescript-eslint/no-empty-function\n                            disconnect().catch(() => {\n                                // Silently catch because any errors are caught by the context `onError` handler\n                            });\n                        }}\n                    >\n                        <ListItemIcon>\n                            <DisconnectIcon />\n                        </ListItemIcon>\n                        Disconnect\n                    </MenuItem>\n                </Collapse>\n            </Menu>\n        </>\n    );\n    */\n};","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletConnectButton.tsx",["398"],"import { \n    Button, \n    ButtonProps } \nfrom '@mui/material';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport React, { FC, MouseEventHandler, useCallback, useMemo } from 'react';\nimport { WalletIcon } from './WalletIcon';\nimport { useSession } from \"../../contexts/session\";\n\nexport const WalletConnectButton: FC<ButtonProps> = ({\n    color = 'primary',\n    variant = 'contained',\n    children,\n    disabled,\n    onClick,\n    ...props\n}) => {\n    const { wallet, connect, connecting, connected } = useWallet();\n    \n    const handleClick: MouseEventHandler<HTMLButtonElement> = useCallback(\n        (event) => {\n            if (onClick) onClick(event);\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            if (!event.defaultPrevented)\n                connect().catch(() => {\n                    // Silently catch because any errors are caught by the context `onError` handler\n                });\n        },\n        [onClick, connect]\n    );\n    \n    const content = useMemo(() => {\n        if (children) return children;\n        if (connecting) \n            return 'Connecting ...';\n        if (connected) \n            return 'Connected';\n        if (wallet)\n            return 'Connect';\n        return 'Connect Wallet';\n    }, [children, connecting, connected, wallet]);\n\n    return (\n        <Button\n            color={color}\n            variant={variant}\n            onClick={handleClick}\n            disabled={disabled || !wallet || connecting || connected}\n            startIcon={<WalletIcon wallet={wallet} />}\n            {...props}\n        >\n            {content}\n        </Button>\n    );\n};","/Users/kirk/Solana/grape-dashboard/src/components/WalletAdapterMui/WalletListItem.tsx",["399","400","401","402","403"],"import { \n    Paper,\n    Button, \n    ListItem, \n    ListItemAvatar,\n    ListItemIcon,\n    ListItemText,\n    Avatar,\n    ListItemProps } \nfrom '@mui/material';\nimport { Wallet } from '@solana/wallet-adapter-wallets';\nimport React, { FC, MouseEventHandler } from 'react';\nimport { WalletIcon } from './WalletIcon';\n\ninterface WalletListItemProps extends Omit<ListItemProps, 'onClick' | 'button'> {\n    onClick: MouseEventHandler<HTMLButtonElement>;\n    wallet: Wallet;\n}\n\nexport const WalletListItem: FC<WalletListItemProps> = ({ onClick, wallet, ...props }) => {\n    return (\n        <ListItem {...props}>\n            <Button onClick={onClick} endIcon={<WalletIcon wallet={wallet} />}>\n                {wallet.name}\n            </Button>\n        </ListItem>\n    );\n};","/Users/kirk/Solana/grape-dashboard/src/views/Governance/Governance.tsx",["404","405","406","407","408","409","410","411","412","413","414","415","416","417","418"],"import { getRealms, getVoteRecordsByVoter, getTokenOwnerRecordForRealm, getTokenOwnerRecordsByOwner, getGovernanceAccounts, pubkeyFilter, TokenOwnerRecord } from '@solana/spl-governance';\nimport { PublicKey } from '@solana/web3.js';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport * as React from 'react';\nimport { styled, useTheme } from '@mui/material/styles';\nimport {\n  Typography,\n  Button,\n  Grid,\n  Box,\n  Paper,\n  Avatar,\n  Skeleton,\n  Table,\n  TableContainer,\n  TableCell,\n  TableHead,\n  TableBody,\n  TableRow\n} from '@mui/material/';\n\nimport HowToVoteIcon from '@mui/icons-material/HowToVote';\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nexport function GovernanceView(props: any) {\n    const [loading, setLoading] = React.useState(false);\n    const { connection } = useConnection();\n    const { publicKey } = useWallet();\n    const [realms, setRealms] = React.useState(null);\n    const [realmsArray, setRealmsArray] = React.useState(new Array);\n    const [voteRecords, setVoteRecords] = React.useState(null);\n    const [tokenOwnerRecords, setOwnerRecords] = React.useState(null);\n\n    const getGovernance = async () => {\n        if (!loading){\n            setLoading(true);\n            \n            const programId = new PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw');\n            \n            /*\n            const loadedRealms = await getRealms(rpcEndpoint, programId);\n            setRealms(loadedRealms);\n            let loadedRealmsArray = new Array();\n            Object.keys(loadedRealms).forEach(function(key) {\n                loadedRealmsArray.push(loadedRealms[key]);\n            });\n            setRealmsArray(loadedRealmsArray);\n            \n            console.log(\"Realms: \"+JSON.stringify(loadedRealms));\n            */\n            \n            //const loadedRecords = await getVoteRecordsByVoter(programId, rpcEndpoint, publicKey)\n            //setVoteRecords(loadedRecords);\n\n            // statically referencing this for now\n            // we will dynamically get this using the above call - loadedRealmsArray\n            \n            const realmId = new PublicKey('By2sVGZXwfQq6rAiAM3rNPJ9iQfb5e2QhnF4YjJ4Bip'); // Grape RealmId\n            const governingTokenMint = new PublicKey('8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'); // Grape Mint\n            const governingTokenOwner = publicKey;\n\n            const ownerRecords = await getTokenOwnerRecordForRealm(\n                connection, \n                programId,\n                realmId,\n                governingTokenMint,\n                governingTokenOwner\n            );\n            setOwnerRecords(ownerRecords);\n\n            const ownerRecordsAll = await getGovernanceAccounts(\n                connection, \n                programId, \n                TokenOwnerRecord, [\n                    pubkeyFilter(1 + 32 + 32, governingTokenOwner)!,\n                ]);\n            \n\n            //console.log(\"Realms: \"+JSON.stringify(ownerRecordsAll));\n\n            setLoading(false);\n        } else{\n\n        }\n    }\n    \n    React.useEffect(() => { \n        if (publicKey && !loading)\n            getGovernance();\n    }, [publicKey]);\n    \n    if(loading){\n        return (\n            <React.Fragment>\n                <Grid item xs={12}>\n                    <Paper className=\"grape-paper-background\">\n                        <Paper\n                        className=\"grape-paper\"\n                        sx={{\n                            p: 2,\n                            display: 'flex',\n                            flexDirection: 'column',\n                        }}\n                        >\n                            <Box sx={{ p:1, width: \"100%\" }}>\n                                <Skeleton />\n                            </Box>\n                        </Paper>\n                    </Paper>\n                </Grid>\n            </React.Fragment>\n        )\n    } else{\n        if (tokenOwnerRecords){\n            return (\n                <React.Fragment>\n                    <Grid item xs={12} md={12} lg={12}>\n                        <Paper className=\"grape-paper-background\">\n                            <Box className=\"grape-paper\">\n                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                    <Box className=\"grape-dashboard-component-header\" sx={{ m: 0, position: 'relative' }}>\n                                        <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                                        GOVERNANCE\n                                        </Typography>\n                                    </Box>\n                                </Box>\n                                \n                                <TableContainer>\n                                    <StyledTable sx={{ minWidth: 500 }} size=\"small\" aria-label=\"Portfolio Table\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell><Typography variant=\"caption\">Realm</Typography></TableCell>\n                                                <TableCell align=\"right\"><Typography variant=\"caption\">Votes</Typography></TableCell>\n                                                <TableCell></TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell style={{ verticalAlign: 'middle' }}>\n                                                    <Grid container direction=\"row\" alignItems=\"center\" sx={{ }}>\n                                                        <Grid item>\n                                                            <Avatar \n                                                                component={Paper} \n                                                                elevation={4}\n                                                                alt=\"Token\" \n                                                                src={'https://lh3.googleusercontent.com/y7Wsemw9UVBc9dtjtRfVilnS1cgpDt356PPAjne5NvMXIwWz9_x7WKMPH99teyv8vXDmpZinsJdgiFQ16_OAda1dNcsUxlpw9DyMkUk=s0'}\n                                                                sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                                                            />\n                                                        </Grid>\n                                                        <Grid item sx={{ ml: 1 }}>\n                                                                {'Grape Votes'}\n                                                        </Grid>\n                                                    </Grid>\n                                                </TableCell>\n                                                <TableCell align=\"right\">{(parseInt(tokenOwnerRecords.account.governingTokenDepositAmount, 10))/1000000}</TableCell>\n                                                <TableCell align=\"right\"><Button href='https://realms.today/dao/GRAPE' target='_blank'><HowToVoteIcon /></Button></TableCell>\n                                            </TableRow> \n                                        </TableBody>\n                                    </StyledTable>\n                                </TableContainer>\n                                \n                            </Box>\n                        </Paper>\n                    </Grid>\n                </React.Fragment>\n            );\n        }else{\n            return (<></>);\n        }\n        \n    }\n}","/Users/kirk/Solana/grape-dashboard/src/views/Payments/Payments.tsx",["419","420","421","422","423","424","425","426","427","428","429","430","431","432","433"],"import React, { FC, useCallback } from 'react';\nimport { styled, useTheme } from '@mui/material/styles';\nimport * as XLSX from 'xlsx';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction, Signer } from '@solana/web3.js';\n\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from '../../components/Tools/constants';\nimport { getTokenOwnerRecordForRealm } from '@solana/spl-governance';\nimport { Token, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { ValidateAddress } from '../../components/Tools/WalletAddress';\nimport {\n  Typography,\n  Button,\n  Grid,\n  Box,\n  Paper,\n  Link,\n  Table,\n  TextField,\n} from '@mui/material/';\nimport { useSnackbar } from 'notistack';\nimport MUIDataTable from \"mui-datatables\";\n\nimport CircularProgress from '@mui/material/CircularProgress';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nconst Input = styled('input')({\n    display: 'none',\n  });\n\nexport function PaymentsView(props: any) {\n    const [loading, setLoading] = React.useState(false);\n    const freeconnection = new Connection(FREE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    \n    const [columns, setColumns] = React.useState([]);\n    const [data, setData] = React.useState([]);\n    const [memoText, setMemoText] = React.useState(null);\n    const [transactionSignature, setTransactionSignature] = React.useState(null);\n    const [grapeMemberBalance, setGrapeMemberBalance] = React.useState(0);\n    const [grapeGovernanceBalance, setGrapeGovernanceBalance] = React.useState(0);\n\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    async function executeTransactions(transactions: Transaction, memo: string) {\n        if (memo){\n            transactions.add(\n                new TransactionInstruction({\n                    keys: [{ pubkey: publicKey, isSigner: true, isWritable: true }],\n                    data: Buffer.from(JSON.stringify(memo), 'utf-8'),\n                    programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                })\n            )\n        }        \n\n        try{\n            enqueueSnackbar(`Preparing to batch pay`,{ variant: 'info' });\n            const signature = await sendTransaction(transactions, freeconnection);\n            \n            const snackprogress = (key:any) => (\n                <CircularProgress sx={{padding:'10px'}} />\n            );\n            const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n            await connection.confirmTransaction(signature, 'processed');\n            closeSnackbar(cnfrmkey);\n            \n            await connection.confirmTransaction(signature, 'processed');\n            enqueueSnackbar(`Sent payments - ${signature}`,{ variant: 'success' });\n            \n            setTransactionSignature(signature);\n        }catch(e){\n            closeSnackbar();\n            enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n        } \n\n    }\n    \n    async function transferTokenInstruction(tokenMintAddress: string, to: string, amount: number) {\n        const fromWallet = publicKey;\n        const toWallet = new PublicKey(to);\n        const mintPubkey = new PublicKey(tokenMintAddress);\n        const amountToSend = +amount;\n        const tokenAccount = new PublicKey(mintPubkey);\n        \n        if (tokenMintAddress == \"So11111111111111111111111111111111111111112\"){ // Check if SOL\n            const decimals = 9;\n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const transaction = new Transaction()\n            .add(\n                SystemProgram.transfer({\n                    fromPubkey: fromWallet,\n                    toPubkey: toWallet,\n                    lamports: adjustedAmountToSend,\n                })\n            );\n            \n            return transaction;\n        } else{\n            const accountInfo = await connection.getParsedAccountInfo(tokenAccount);\n            const accountParsed = JSON.parse(JSON.stringify(accountInfo.value.data));\n            const decimals = accountParsed.parsed.info.decimals;\n\n            let fromAta = await Token.getAssociatedTokenAddress( // calculate from ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                fromWallet // from owner\n            );\n            \n            let toAta = await Token.getAssociatedTokenAddress( // calculate to ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                toWallet // to owner\n            );\n            \n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const receiverAccount = await connection.getAccountInfo(toAta);\n            \n            if (receiverAccount === null) { // initialize token\n                const transaction = new Transaction()\n                .add(\n                    Token.createAssociatedTokenAccountInstruction(\n                        ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                        TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                        mintPubkey, // mint\n                        toAta, // ata\n                        toWallet, // owner of token account\n                        fromWallet // fee payer\n                    )\n                )\n                .add(\n                    Token.createTransferInstruction(\n                        TOKEN_PROGRAM_ID,\n                        fromAta,\n                        toAta,\n                        publicKey,\n                        [],\n                        adjustedAmountToSend,\n                    )\n                );\n                \n\n                return transaction;\n            } else{ // token already in wallet\n                const transaction = new Transaction()\n                .add(\n                    Token.createTransferInstruction(\n                    TOKEN_PROGRAM_ID,\n                    fromAta,\n                    toAta,\n                    publicKey,\n                    [],\n                    adjustedAmountToSend,\n                    )\n                );\n                \n                return transaction;\n            }\n        }\n    }\n\n    const options = {\n        responsive:\"scroll\",\n        selectableRows: false,\n        download:true,\n        print:true,\n        viewColumns:false,\n        filter:false,\n        rowsPerPage:20,\n        rowsPerPageOptions:[20, 50, 100],\n      };\n\n    // process CSV data\n  const processData = (dataString:any) => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n \n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n \n    // prepare columns list from headers\n    const columns = headers.map((c:any) => ({\n      name: c,\n      selector: c,\n    }));\n \n    setData(list);\n    setColumns(columns);\n  }\n \n  // handle file upload\n  const handleFileUpload = (e:any) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws);\n      //const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  }\n    \n  async function HandlePayAll(event: any) {\n    event.preventDefault();\n    \n    // loop through all data\n    //console.log('dils: '+JSON.stringify(data));\n    //console.log('cils: '+columns);\n\n    let data_json = JSON.parse(JSON.stringify(data));\n    let sum = 0;\n    if (data.length <= 20){\n        let batchtx = new Transaction();\n\n        let grapecheck = await transferTokenInstruction('8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA', 'GrapevviL94JZRiZwn2LjpWtmDacXU8QhAJvzpUMMFdL', 1);\n\n        for (var value of data){\n            // consider validating address\n            // consider validating token\n            if (value.token && value.address && value.amount && +value.amount > 0){\n                let tokentouse = value.token;\n                if (!ValidateAddress(tokentouse)){\n                    tokentouse = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\n                }\n                if (tokentouse !== '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'){\n                    let r = window.confirm(\"Token in this row (\"+tokentouse+\") is not Grape\\n\\nPress OK to set to Grape or Cancel to use \"+value.token+\"\");\n                    if (r)\n                        tokentouse = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\n                }\n\n                if (ValidateAddress(value.address)){\n                    let singletx = await transferTokenInstruction(tokentouse, value.address, +value.amount);\n                    sum+=+value.amount;\n                    //console.log('Transaction: '+JSON.stringify(singletx));\n                    batchtx.add(singletx);\n                } else{\n                    console.log(\"Skipping \"+value.address);\n                }\n            }\n        }\n        // Grape Check\n        batchtx.add(grapecheck);\n        let r = window.confirm(\"Total amount to send: \"+sum+\"\\n+1 Grape will be sent to Grape Treasury\\n\\nPress OK to Pay All \"+data.length+\" or Cancel.\");\n        if (r)\n            executeTransactions(batchtx, memoText);\n    } else{\n        enqueueSnackbar(`Up to 20 transactions can be completed in batch pay`,{ variant: 'error' });\n    }\n}\n    const fetchBalances = async () => {\n        const body = {\n        method: \"getTokenAccountsByOwner\",\n        jsonrpc: \"2.0\",\n        params: [\n            // Get the public key of the account you want the balance for.\n            publicKey.toString(),\n            { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n            { encoding: \"jsonParsed\", commitment: \"processed\" },\n        ],\n        id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n        };\n\n        const response = await fetch(GRAPE_RPC_ENDPOINT, {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: { \"Content-Type\": \"application/json\" },\n        })\n        const json = await response.json();\n        const resultValues = json.result.value\n        return resultValues;\n\n    };\n\n    const fetchTokenAccountOwnerHoldings = async () => {\n        setLoading(true);\n        if (publicKey){ \n            //const portfolio_rsp = await connection.getTokenAccountsByOwner(publicKey, { programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\") },{ commitment: \"processed\" });\n            let [portfolio_rsp, governance_rsp] = await Promise.all([fetchBalances(), getGovernanceBalance()]);\n            \n            let gov_balance = 0;\n            try{\n                if (governance_rsp?.account?.governingTokenDepositAmount){\n                    gov_balance = +governance_rsp.account.governingTokenDepositAmount/1000000;\n                    setGrapeGovernanceBalance(+governance_rsp.account.governingTokenDepositAmount/1000000 || 0);\n                }\n            }catch(e){\n                console.log(\"ERR: \"+e);\n            }\n\n            try{\n                //if (grapeGovernanceBalance)\n                //setGrapeMemberBalance(grapeGovernanceBalance);\n                portfolio_rsp.map((token:any) => {\n                    let mint = token.account.data.parsed.info.mint;\n                    let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n                    if (mint === '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'){ // check if wallet has sol\n                        setGrapeMemberBalance(gov_balance+balance);\n                    }\n                });\n            } catch(e){console.log(\"ERR: \"+e);}\n            \n        }\n        setLoading(false);\n    }\n    const getGovernanceBalance = async () => {\n        try{\n            const programId = new PublicKey('GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw');\n            const realmId = new PublicKey('By2sVGZXwfQq6rAiAM3rNPJ9iQfb5e2QhnF4YjJ4Bip'); // Grape RealmId\n            const governingTokenMint = new PublicKey('8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA'); // Grape Mint\n            const governingTokenOwner = publicKey;\n\n            const ownerRecords = await getTokenOwnerRecordForRealm(\n                connection, \n                programId,\n                realmId,\n                governingTokenMint,\n                governingTokenOwner\n            );\n            \n            return ownerRecords;\n        } catch(e){console.log(\"ERR: \"+e);}\n    }\n\n    React.useEffect(() => { \n        if (publicKey && !loading)\n            fetchTokenAccountOwnerHoldings();\n    }, [publicKey]);\n\n    if (loading){ \n        return (<>Loading...</>)\n    } else{\n        return (\n                <React.Fragment>\n                    <Grid item xs={12} md={12} lg={12}>\n                        <Paper className=\"grape-paper-background\">\n                            <Box className=\"grape-paper\">\n                                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                    <Box className=\"grape-dashboard-component-header\" sx={{ m: 0, position: 'relative' }}>\n                                        <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                                        DAO PAYMENTS\n                                        </Typography>\n                                    </Box>\n                                </Box>\n                                {grapeMemberBalance && grapeMemberBalance > 1130 ? (\n                                    <Box sx={{ alignItems: 'center' }}>\n                                            \n                                        {transactionSignature ?\n                                            <Grid \n                                                container\n                                                alignItems=\"center\"\n                                                justifyContent=\"center\"\n                                            >\n                                                <Grid xs={12}>\n                                            \n                                                    <Typography variant=\"caption\">\n                                                        Confirmation TX:\n                                                        \n                                                        <Button size=\"small\" variant=\"text\">\n                                                            <CopyToClipboard \n                                                            text={transactionSignature} \n                                                            onCopy={() => enqueueSnackbar(`Copied ${transactionSignature}`,{ variant: 'success' })}\n                                                            >\n                                                                <ContentCopyIcon sx={{ fontSize:'14px', mr:0 }} />\n                                                            </CopyToClipboard>\n                                                        </Button>\n                                                        <Button\n                                                            variant='text'\n                                                            href={`https://explorer.solana.com/tx/${transactionSignature}`} \n                                                            target=\"_blank\"\n                                                        >\n                                                        {transactionSignature}\n                                                        </Button>\n                                                    </Typography>\n                                                </Grid>\n                                            </Grid>\n                                        :\n                                            <Grid \n                                                container\n                                                alignItems=\"center\"\n                                                justifyContent=\"center\"\n\n                                            >\n                                                <Grid item xs={12} sx={{p:1,m:1}}>\n                                                    \n                                                    <Typography variant=\"caption\" component=\"div\" align=\"justify\" >\n                                                    <strong>CSV Format:</strong>\n                                                    <br/><i>currently in use - address, amount, token * do not include parenthesis in the header</i>\n                                                    <ul>\n                                                        <li>seq (type:number)</li>\n                                                        <li>identifier (type:string)</li> \n                                                        <li>address (type:string)</li>\n                                                        <li>amount (type:number)</li>\n                                                        <li>token (type:string)</li>\n                                                        <li>notes (type:string)</li>\n                                                    </ul>\n                                                    </Typography>\n                                                    \n                                                    \n                                                    <Typography variant=\"caption\" component=\"div\" align=\"justify\" >\n                                                    <strong>Instructions:</strong>\n                                                    <ul>\n                                                        <li>Add a CSV in the specified format</li>\n                                                        <li>Verify the information is correct in the loaded table</li> \n                                                        <li>If everything is displaying correctly Press PAY ALL to proceed, otherwise re-upload a correct CSV file</li>\n                                                        <li>A single Grape will be sent to the Grape treasury to run a transaction</li>\n                                                    </ul>\n                                                    </Typography>\n                                                    <Typography variant=\"caption\" component=\"div\" align=\"justify\" >\n                                                    <strong>Notes:</strong>\n                                                    &nbsp;Currently supports up to 20 payments in one go, will initialize tokens if they have not been initialized\n                                                    </Typography>\n\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <label htmlFor=\"contained-button-file\">\n                                                        <Input id=\"contained-button-file\" \n                                                            type=\"file\"\n                                                            accept=\".csv,.xlsx,.xls\"\n                                                            onChange={handleFileUpload} />\n                                                        <Button \n                                                            variant=\"contained\" \n                                                            component=\"span\"\n                                                            sx={{\n                                                                margin:1\n                                                            }}\n                                                        >\n                                                        <UploadFileIcon /> CSV\n                                                        </Button>\n                                                    </label>\n                                                </Grid>\n                                                <Grid item xs={12}>\n                                                    <TextField \n                                                        id=\"send-memo\" \n                                                        fullWidth \n                                                        placeholder=\"Add a memo for this transaction\" \n                                                        label=\"Memo\" \n                                                        variant=\"standard\"\n                                                        autoComplete=\"off\"\n                                                        onChange={(e) => {setMemoText(e.target.value)}}\n                                                        sx={{\n                                                            margin:1\n                                                        }}\n                                                        InputProps={{\n                                                            inputProps: {\n                                                                style: {\n                                                                    textAlign:'left'\n                                                                }\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                                <Grid xs={12}>\n                                                    <Button     \n                                                        onClick={HandlePayAll}\n                                                        variant=\"outlined\" \n                                                        title=\"Pay all\"\n                                                        disabled={(data.length < 1)}\n                                                        sx={{\n                                                            margin:1\n                                                        }}>\n                                                        Pay All {(data.length > 0 && data.length)}\n                                                    </Button>\n                                                </Grid>\n                                            </Grid>\n                                        }\n                                    \n                                        <StyledTable size=\"small\" aria-label=\"Payments Table\">\n                                            <MUIDataTable\n                                                title={\"\"}\n                                                data={data}\n                                                columns={columns}\n                                                options={options}\n                                                />\n                                        </StyledTable>\n                                    </Box>\n                                )\n                                :\n                                (\n                                    <Grid \n                                    container\n                                    alignItems=\"center\"\n                                    justifyContent=\"center\"\n                                    >\n                                        <Grid item xs={12}\n                                        alignItems=\"center\"\n                                        justifyContent=\"center\">\n                                            <Typography variant=\"h5\" component=\"div\" \n                                                align=\"center\" >\n                                                Available only for Grape Members\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>  \n                                )}\n                            </Box>\n                        </Paper>\n                    </Grid>\n                </React.Fragment>\n        )\n    }\n}","/Users/kirk/Solana/grape-dashboard/src/views/Membership/Membership.tsx",["434","435","436","437","438","439"],"import React from 'react';\nimport { \n  Container, \n  Grid, \n  Box, \n  Stack,\n  Paper, \n  Typography,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n  Avatar,\n} from '@mui/material';\n\nimport CardGiftcardIcon from '@mui/icons-material/CardGiftcard';\nimport EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\nimport WorkIcon from '@mui/icons-material/Work';\nimport LoginIcon from '@mui/icons-material/Login';\nimport ParaglidingIcon from '@mui/icons-material/Paragliding';\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport PeopleIcon from '@mui/icons-material/People';\n\nimport { styled } from '@mui/material/styles';\n\nexport const MembershipView = () => {\n  const StyledPaperOuter = styled(Paper)({\n    background: 'rgba(255, 255, 255, 0.25)',\n    padding: '0.5rem 1rem',\n    borderRadius: 0,\n    boxShadow: 'none',\n    flex: 1,\n    height: '100%',\n  });\n\n  const StyledPaperInner = styled(Paper)({\n    backgroundColor: '#12151C',\n    padding: '1rem',\n    color: 'white',\n    marginBottom: '1rem',\n    textAlign: 'center',\n    borderRadius: '1.5rem',\n    boxShadow: 'none',\n    flex: 1,\n    height: '100%',\n    '&:last-child': {\n      marginBottom: 0,\n    },\n  });\n\n  const Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  }));\n\n  const MembershipItem = () => {\n    //const { className, classAlias, minToken, minTokenLP, values } = tableComparisonItemProps;\n    let className = '';\n    let backgroundHeader = 'linear-gradient(90deg, #545769 16.21%, #262834 81.73%)';\n    if (className === 'B') {\n      backgroundHeader = 'linear-gradient(90deg, #D299FF 16.21%, #B4C8FD 81.73%)';\n    } else if (className === 'A') {\n      backgroundHeader = 'linear-gradient(90deg, #EC0FF3 16.21%, #49AEFC 81.04%)';\n    }\n\n    return (\n      <Container maxWidth=\"xl\">\n        <Grid container>\n          <Grid\n            item\n            sx={{\n              paddingTop: '1rem',\n              order: { xs: 'inherit', lg: 1 },\n            }}\n            xs={12}\n            lg={3}\n          >\n            <img\n              alt=\"Grape Logo\"\n              loading=\"lazy\"\n              style={{ width: '100%', maxWidth: '140px' }}\n            />\n          </Grid>\n\n          \n        </Grid>\n      </Container>\n    );\n  }\n\n\n  return (\n\n    <Container maxWidth=\"xl\">\n        <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n            <Grid item xs={2} sm={4} md={3}>\n              <Stack spacing={2}>\n                <Box>\n\n                  <Typography>\n                    Membership\n                  </Typography>\n                </Box>\n                <Box>\n                  \n                  <List dense={true}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <CardGiftcardIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary=\"Monthly Emissions\"\n                        />\n                      </ListItem>\n                  </List>\n                  <List dense={true}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <EmojiEventsIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary=\"Event Prize Pools\"\n                        />\n                      </ListItem>\n                  </List>\n                  <List dense={true}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <WorkIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary=\"Access to Skill Role Allocation Pool\"\n                        />\n                      </ListItem>\n                  </List>\n                  <List dense={true}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <LoginIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary=\"Channel Access Level\"\n                        />\n                      </ListItem>\n                  </List>\n                  <List dense={true}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <ParaglidingIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary=\"Chance to win Airdrops/Giveaways\"\n                        />\n                      </ListItem>\n                  </List>\n                  <List dense={true}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <GroupsIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary=\"Governance: SubDAO Eligibility\"\n                        />\n                      </ListItem>\n                  </List>\n                  <List dense={true}>\n                      <ListItem>\n                        <ListItemAvatar>\n                          <Avatar>\n                            <PeopleIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                          primary=\"Governance: MainDAO Eligibility\"\n                        />\n                      </ListItem>\n                  </List>\n\n                </Box>\n              </Stack>\n            </Grid>\n            <Grid item xs={2} sm={4} md={3}>\n              <div>xs=2</div>\n            </Grid>\n            <Grid item xs={2} sm={4} md={3}>\n              <div>xs=2</div>\n            </Grid>\n            <Grid item xs={2} sm={4} md={3}>\n              <div>xs=2</div>\n            </Grid>\n        </Grid>\n    </Container>\n  )\n};","/Users/kirk/Solana/grape-dashboard/src/views/News/News.tsx",["440"],"import * as React from 'react';\n\nimport {\n    Typography,\n    Grid\n} from '@mui/material';\n\nimport TwitterFeedComponent from '../Feed/TwitterFeed';\n\ninterface NewsViewProps {\n  children?: React.ReactNode;\n}\n\nexport function NewsView(props: NewsViewProps) {\n//export default function UnlistedOffersView(props: any) {\n  \n  \n\n  return (\n    <React.Fragment>\n        <React.Component>\n            <Grid container spacing={3}>\n                <TwitterFeedComponent title={'Grape News'} twitterFeedHandle={'grapeprotocol'} twitterFeedHeight={800} twitterFeedElements={2} componentTwitterFeed={true} componentExpanded={true}/>\n                <TwitterFeedComponent title={'Solana News'} twitterFeedHandle={'solana'} twitterFeedHeight={800} twitterFeedElements={2} componentTwitterFeed={true} componentExpanded={true} />\n                <TwitterFeedComponent title={'Grape Events'} twitterFeedHandle={'eventsgrape'} twitterFeedHeight={800} twitterFeedElements={2} componentTwitterFeed={true} componentExpanded={true} />\n            </Grid>\n        </React.Component>\n    </React.Fragment>\n);\n}","/Users/kirk/Solana/grape-dashboard/src/views/Register/Register.tsx",["441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462"],"import * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { useParams, Link, useLocation } from 'react-router-dom';\nimport { useSession } from \"../../contexts/session\";\n\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\n\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nimport Avatar from '@mui/material/Avatar';\nimport AvatarGroup from '@mui/material/AvatarGroup';\n\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\nimport CheckIcon from '@mui/icons-material/Check';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\nimport ConnectDialog from '../../components/ConnectDialog/ConnectDialog';\n\nfunction DiscordIcon(props: SvgIconProps) {\n    return (\n      <SvgIcon {...props}>\n        <path d=\"M17.2,3.6C14.9,1.8,13,1.5,13,1.5l-0.2,0.3c2.8,0.9,3.7,2.5,3.7,2.5c-1.7-1-3.4-1.4-4.9-1.6\n              c-1.2-0.2-2.3-0.1-3.3,0c-0.1,0-0.2,0-0.3,0C7.4,2.8,6,3,4.3,3.7c-0.6,0.3-1,0.4-1,0.4s1.1-1.6,4.1-2.4L7.1,1.5c0,0-2,0.3-4.3,2.1\n              c0,0-2.3,4.3-2.3,9.5c0,0,1.4,2.3,4.9,2.4c0,0,0.4-0.4,0.9-1c-2.1-0.6-2.7-2.2-2.7-2.2s0.2,0.1,0.4,0.3c0,0,0,0,0.1,0\n              c0.1,0,0.1,0.1,0.2,0.1c0.4,0.3,0.8,0.4,1.2,0.5c0.7,0.3,1.5,0.5,2.4,0.7c1.2,0.3,2.7,0.3,4.3,0c0.8-0.2,1.6-0.3,2.3-0.7\n              c0.6-0.2,1.2-0.5,1.9-1c0,0-0.6,1.6-2.7,2.3c0.5,0.6,0.9,1,0.9,1c3.6-0.1,4.9-2.4,4.9-2.4C19.5,7.8,17.2,3.6,17.2,3.6z M7,11.5\n              c-1,0-1.6-0.8-1.6-1.8S6.1,7.9,7,7.9s1.6,0.8,1.6,1.8S7.9,11.5,7,11.5z M13,11.5c-1,0-1.6-0.8-1.6-1.8s0.7-1.8,1.6-1.8\n              s1.6,0.8,1.6,1.8S13.8,11.5,13,11.5z\" />\n      </SvgIcon>\n    );\n  }\n\nfunction getQueryVariable(variable: string)\n{\n    var query = window.location.search.substring(1);\n    if (!query)\n        query = window.location.hash.substring(1);\n    \n    //console.log(query)//\"app=article&act=news_content&aid=160990\"\n    var vars = query.split(\"&\");\n    //console.log(vars) //[ 'app=article', 'act=news_content', 'aid=160990' ]\n    for (var i=0;i<vars.length;i++) {\n        var pair = vars[i].split(\"=\");\n        //    console.log(pair)//[ 'app', 'article' ][ 'act', 'news_content' ][ 'aid', '160990' ] \n        if (pair[0] == '/register?'+variable){\n            //console.log(\"+found \"+variable+\": \"+pair[1]);\n            return pair[1]\n        }else if(pair[0] == variable){\n            //console.log(\"-found \"+variable+\": \"+pair[1]);\n            return pair[1];\n        }\n    }\n    return(false);\n}\n\nfunction getParam(param: string) {\n    //const location = useLocation();\n    //return new URLSearchParams(location.search).get(param);\n    let parameter = new URLSearchParams(window.location.search).get(param);\n    if (!parameter)\n        parameter = new URLSearchParams(window.location.hash).get(param); // this will not return correctly because we have a ? after the hash\n    //console.log(param + ': ' + parameter);\n    return parameter;\n}\n\nexport function RegisterView(props: any) {\n    const [serverId, setServerId] = React.useState(getParam('server_id'));\n    const [avatar, setAvatar] = React.useState(getParam('avatar'));\n    const [discordId, setDiscordId] = React.useState(getParam('discord_id'));\n    const [userId, setUserId] = React.useState(getParam('user_id'));\n    const [discordUrl, setDiscordUrl] = React.useState(getParam('discord_url'));\n    const [tokenParam, setTokenParam] = React.useState(getParam('token'));\n    const [provider, setProvider] = React.useState(getParam('provider'));\n    const [serverName, setServerName] = React.useState(decodeURIComponent(getParam('serverName')));\n    const [serverLogo, setServerLogo] = React.useState(decodeURIComponent(getParam('serverLogo')));\n    const [isRegistered, setIsRegistered] = React.useState((getParam('is_registered')));\n    \n    const { publicKey, wallet, disconnect} = useWallet();\n\n    const { session, setSession } = useSession();\n    const isConnected = session && session.isConnected;\n    const isAlreadyRegistered = session?.discordId ? true : false;\n    \n    async function disconnectSession(redirect:boolean) {\n        await disconnect().catch(() => { /* catch any errors */ });\n        setSession(null);\n        if (redirect)\n            window.location.href = \"/\";\n    }\n    \n    useEffect(() => {\n        //console.log(\"Server ID: \"+ tokenParam);\n        setSession(null);\n    }, [tokenParam]);\n\n    useEffect(() => {\n        //console.log(\"Session Wallet: \"+session.isWallet);\n        if (!session.isWallet){\n            disconnectSession(false);\n        }\n    }, [session]);\n\n    return (\n        <React.Fragment>\n            <Paper className=\"grape-paper-background\" >\n                <Paper className=\"grape-paper\" sx={{ p: 2, flexDirection: 'column', flexWrap: 'wrap', alignItems: 'center' }}>\n                    <Grid \n                            container \n                            direction=\"column\" \n                            spacing={2} \n                            alignItems=\"center\"\n                            rowSpacing={8}\n                            sx={{ flexGrow: 1 }}\n                        >\n                            <Grid \n                                item xs={12}\n                            >\n                                <Typography variant=\"h5\" gutterBottom align=\"center\">\n                                    Register Wallet with <br /> {serverName}\n                                </Typography>\n                            </Grid>\n                            \n                            <Grid \n                                item xs={12}\n                            >\n                                <Box\n                                height=\"100%\"\n                                display=\"flex\"\n                                justifyContent=\"center\"\n                                flexDirection=\"column\"\n                                >\n                                    <AvatarGroup max={2}>\n                                        <Avatar \n                                            component={Paper} \n                                            elevation={4}\n                                            alt=\"Grape\" \n                                            src={`/server-logos/${serverLogo}`} \n                                            sx={{ width: 160, height: 160, bgcolor: \"#444\" }}\n                                        />\n                                        <Avatar \n                                            component={Paper} \n                                            elevation={4}\n                                            alt=\"Discord\" \n                                            src={`https://cdn.discordapp.com/avatars/${discordId}/${avatar}?size=512`} \n                                            sx={{ width: 160, height: 160, bgcolor: \"#444\" }}\n                                        />\n                                    </AvatarGroup>\n                                </Box>\n                            </Grid>\n                            \n                            {!isAlreadyRegistered ? \n                                <Grid item xs={12}>\n\n                                    <br/>\n                                    \n                                    <ConnectDialog\n                                        session={session}\n                                        isConnected={isConnected}\n                                        userId={userId}\n                                        menuId='primary-wallet-account-menu'\n                                        menuWalletId='primary-fullwallet-account-menu'\n                                        handleProfileMenuOpen={() => {}}\n                                        buttonText=\"Link Wallet\"   \n                                        nakedWallet={false}    \n                                        login={false}  \n                                        token={tokenParam}   \n                                        discordId={discordId} \n                                    /> \n                                    \n                                </Grid> \n                            : \n                                <Grid item xs={12}>\n                                    {(!isConnected && !session.isWallet) ? \n                                    <div><Typography variant=\"h4\" gutterBottom align=\"center\">Your wallet is not connected <LinkOffIcon sx={{ ml:1 }} /></Typography>\n                                        <Box textAlign=\"center\">\n                                            <ConnectDialog\n                                                session={session}\n                                                isConnected={isConnected}\n                                                userId={userId}\n                                                menuId='primary-wallet-account-menu'\n                                                menuWalletId='primary-fullwallet-account-menu'\n                                                handleProfileMenuOpen={() => {}}\n                                                buttonText=\"Connect\"\n                                                nakedWallet={false}\n                                                login={false}    \n                                                token={tokenParam} \n                                                discordId={discordId} \n                                            />\n                                        </Box>\n                                    </div>\n                                    : \n                                        <div>\n                                            <Typography variant=\"h4\" gutterBottom align=\"center\">Your wallet has been linked <CheckIcon /></Typography>\n                                            <Box textAlign=\"center\">\n                                                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                                                    <Button component={Link} to='/' title=\"Home\">Home</Button>\n                                                    <Button target=\"_blank\" href={`${discordUrl}`} title=\"Back to Discord\">Back to <DiscordIcon sx={{ ml:1 }} /></Button>\n                                                </ButtonGroup>\n                                            </Box>\n                                        </div>\n                                    }\n                                </Grid>\n                            }\n                        </Grid>\n                    </Paper>\n                </Paper>\n        </React.Fragment>\n    );\n}\n","/Users/kirk/Solana/grape-dashboard/src/views/Confirmation/Confirmation.tsx",["463","464","465","466"],"import React, { useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport Button from '@mui/material/Button';\n\nimport { useSession } from \"../../contexts/session\";\nimport User from '../../models/User';\n\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\n\nimport Avatar from '@mui/material/Avatar';\nimport AvatarGroup from '@mui/material/AvatarGroup';\nimport CheckIcon from '@mui/icons-material/Check';\n\nfunction getParam(param: string) {\n    return new URLSearchParams(document.location.search).get(param);\n}\n\nfunction stringFirstLetterCapitalize(str: string){\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport const ConfirmationView = () => {\n    const [avatar, setAvatar] = React.useState(getParam('avatar'));\n    const [discordId, setDiscordId] = React.useState(getParam('discord_id'));\n    const [provider, setProvider] = React.useState(getParam('provider'));\n    const { session, setSession } = useSession();\n\n    if (session && discordId && session.discordId !== discordId) {\n        User.updateUser(session, discordId);\n        session.discordId = discordId;\n        setSession(session);\n    }\n    \n    return (\n        <React.Fragment>\n            <Paper className=\"grape-paper-background\" >\n                <Box \n                    className=\"grape-paper\" \n                    justifyContent=\"center\"\n                    sx={{ p: 2, alignItems: 'center' }}>\n                    <Grid \n                        container \n                        rowSpacing={8}\n                        direction=\"column\"\n                        justifyContent=\"center\"\n                        sx={{\n                            alignItems:\"center\" }}\n                        >\n                            <Grid \n                                item xs={12}\n                            >\n                                <Typography variant=\"h5\" gutterBottom align=\"center\">\n                                    {stringFirstLetterCapitalize(provider)} linked <CheckIcon />\n                                </Typography>\n                            </Grid>\n                        \n                        <Grid \n                            item xs={12}\n                        >\n                            <Box\n                                height=\"100%\"\n                                justifyContent=\"center\"\n                            >\n                                <AvatarGroup max={2}>\n                                    <Avatar \n                                        component={Paper} \n                                        elevation={4}\n                                        alt=\"Grape\" \n                                        src=\"/grape_logo_simple.png\"\n                                        sx={{ width: 160, height: 160, bgcolor: \"#444\" }}\n                                    />\n                                    <Avatar \n                                        component={Paper} \n                                        elevation={4}\n                                        alt=\"Avatar\" \n                                        src={`https://cdn.discordapp.com/avatars/${discordId}/${avatar}?size=512`}\n                                        sx={{ width: 160, height: 160, bgcolor: \"#444\" }}\n                                    />\n                                </AvatarGroup>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Button component={Link} to='/' color=\"primary\" size=\"medium\" variant=\"contained\" title=\"Connect\">Home</Button>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Paper>\n        </React.Fragment>\n    );\n}\n","/Users/kirk/Solana/grape-dashboard/src/views/Settings/Settings.tsx",["467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485"],"import React, { useState, useEffect, ReactElement } from 'react';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Button,\n  Tabs,\n  Tab,\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Tooltip,\n  Dialog,\n  DialogProps,\n  IconButton,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from '@mui/material/';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport { makeStyles, styled, alpha } from '@mui/material/styles';\n\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { TwitterSettings } from \"./TwitterSettings\";\nimport { useSession } from \"../../contexts/session\";\nimport User from '../../models/User';\nimport DiscordIcon from '../../components/StaticIcons/DiscordIcon';\nimport AddCircleOutlineOutlinedIcon from '@mui/icons-material/AddCircleOutlineOutlined';\nimport LinkIcon from '@mui/icons-material/Link';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\nimport { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\n\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n  '& .MuiTableCell-root': {\n      borderBottom: '1px solid rgba(255,255,255,0.05)'\n  },\n}));\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n  ) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialog-paper': {\n      width: theme.spacing(60),\n      margin: 0,\n  },\n  '& .MuiDialogTitle-root': {\n      //backgroundColor: theme.palette.primary.main,\n      //backgroundColor: '#000000',  /* fallback for old browsers */\n      backgroundColor: 'rgb(0 0 0 / 50%)',\n      '& .MuiTypography-root': {\n          display: 'flex',\n          justifyContent: 'space-between',\n          lineHeight: theme.spacing(5) + 'px',\n      },\n      '& .MuiIconButton-root': {\n          flexShrink: 1,\n          padding: theme.spacing(),\n          marginRight: theme.spacing(2),\n          color: theme.palette.grey[500],\n      },\n  },\n  '& .MuiDialogContent-root': {\n      padding: 0,\n      '& .MuiCollapse-root': {\n          '& .MuiList-root': {\n              background: theme.palette.grey[900],\n          },\n      },\n      '& .MuiList-root': {\n          background: theme.palette.grey[900],\n          padding: 0,\n      },\n      '& .MuiListItem-root': {\n          boxShadow: 'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)',\n          '&:hover': {\n              boxShadow:\n                  'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)' + ', 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.05)',\n          },\n          padding: 0,\n          '& .MuiButton-endIcon': {\n              margin: 0,\n          },\n          '& .MuiButton-root': {\n              flexGrow: 1,\n              justifyContent: 'space-between',\n              padding: theme.spacing(1, 3),\n              borderRadius: undefined,\n              fontSize: '1rem',\n              fontWeight: 400,\n          },\n          '& .MuiSvgIcon-root': {\n              color: theme.palette.grey[500],\n          },\n      },\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\nconst { children, onClose, ...other } = props;\n\nreturn (\n  <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n    {children}\n    {onClose ? (\n      <IconButton\n        aria-label=\"close\"\n        onClick={onClose}\n        sx={{\n          position: 'absolute',\n          right: 8,\n          top: 8,\n          color: (theme) => theme.palette.grey[500],\n        }}\n      >\n        <CloseIcon />\n      </IconButton>\n    ) : null}\n  </DialogTitle>\n);\n};\n\nexport interface TwitterDialogProps extends Omit<DialogProps, 'title' | 'open'> {\n  title?: ReactElement;\n}\n\nexport const SettingsView = (props:any) => {\n  const [tab, setTab] = useState<number>(0);\n  const { session, setSession } = useSession();\n  const [discord, setDiscord] = useState(null);\n  const [twitter, setTwitter] = useState(null);\n  //const isConnected = session && session.isConnected;\n  const wallets = session && session.userWallets;\n  const userId = session && session.userId;\n  const endpoint = props.endpoint;\n  const { publicKey, wallet, disconnect } = useWallet();\n  \n  React.useEffect(() => {\n    const discordId = session && session.discordId;\n    setDiscord(discordId);\n  }, [session]);\n\n  React.useEffect(() => {\n    if (!discord){\n      //promptConnect();\n    }\n  }, [discord]);\n\n  const handleChange = (_event: any, newValue: number) => {\n    setTab(newValue);\n  };\n\n  const unlinkDiscord = async () => {\n    await User.updateUser(session, null);\n    session.discordId = null;\n    setSession(session);\n    setDiscord(null);\n  };\n\n  const unlinkTwitter = async () => {\n    session.twitterId = null;\n    setSession(session);\n    setTwitter(null);\n  };\n\n  const disconnectWallet = async () => {\n    disconnect();\n  }\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} md={12} lg={12}>\n        <Paper className=\"grape-paper-background\">\n            <Box\n              className=\"grape-paper\"\n            >\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <Box className=\"grape-dashboard-component-header\" sx={{ m: 0, position: 'relative' }}>\n                  <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                    SETTINGS\n                  </Typography>\n                </Box>\n              </Box>\n              <React.Fragment>\n                  <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                    <Tabs value={tab} onChange={handleChange} aria-label=\"Server Tabs\">\n                      <Tab label=\"Accounts\" />\n                      <Tab label=\"Wallets\" />\n                    </Tabs>\n                  </Box>\n\n                  {tab === 0 && \n                    <TableContainer>\n                      <StyledTable aria-label=\"simple table\" size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell align=\"left\"><Typography variant=\"caption\">Provider</Typography></TableCell>\n                            <TableCell align=\"right\"><Typography variant=\"caption\">ID</Typography></TableCell>\n                            <TableCell align=\"right\"><Typography variant=\"caption\">Actions</Typography></TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          <TableRow key={'discord'}>\n                            <TableCell component=\"th\" scope=\"row\">\n                              <Grid container direction=\"row\" alignItems=\"center\">\n                                  <Grid item>\n                                    <DiscordIcon fontSize=\"large\" />\n                                </Grid>\n                                <Grid item style={{ marginLeft: \"20px\" }}>\n                                  Discord\n                                </Grid>\n                              </Grid>\n                            </TableCell>\n                            <TableCell align=\"right\">{discord || <i>Not linked</i>}</TableCell>\n                            <TableCell align=\"right\">\n                              {!discord && \n                                <Tooltip title={`Link Discord`}><Button href={`https://verify.grapes.network/start`} color=\"primary\" size=\"small\" variant=\"contained\" title=\"Link Discord\"><LinkIcon sx={{mr:1}}/> Link Discord</Button></Tooltip>\n                              }{discord && \n                                <Tooltip title={`Unlink Discord`}><Button color=\"primary\" size=\"small\" variant=\"outlined\" onClick={unlinkDiscord} title=\"Unlink Discord\"><LinkOffIcon/></Button></Tooltip>\n                              }\n                            </TableCell>\n                          </TableRow>\n\n                          <TwitterSettings />\n                          \n                        </TableBody>\n                      </StyledTable>\n                    </TableContainer>\n                  }\n                  {tab === 1 && \n                    <TableContainer>\n                      <StyledTable aria-label=\"simple table\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell align=\"left\"><Typography variant=\"caption\">Address</Typography></TableCell>\n                            <TableCell align=\"right\"><Typography variant=\"caption\">Actions</Typography></TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {wallets.map(mapwallet => {\n                            return (\n                              <TableRow>\n                                <TableCell component=\"th\" scope=\"row\">\n                                  <MakeLinkableAddress addr={mapwallet.address} trim={0} hasextlink={true} hascopy={true} fontsize={16} />\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                {publicKey.toString() === mapwallet.address && \n                                  <Button color=\"primary\" size=\"small\" variant=\"contained\" title=\"Connect\" disabled>Current</Button>\n                                }\n                                </TableCell>\n                              </TableRow>\n                          )})}\n                          <TableRow>\n                            <TableCell component=\"th\" scope=\"row\">\n                              \n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <Tooltip title={`Add Wallet`}>\n                                <Button href={`https://verify.grapes.network/start`} color=\"primary\" size=\"small\" variant=\"contained\" title=\"Add Wallet\"\n                                  onClick={disconnectWallet}\n                                >\n                                  <AddCircleOutlineOutlinedIcon sx={{mr:1}}/> Wallet</Button>\n                              </Tooltip>\n                            </TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </StyledTable>\n                    </TableContainer>\n                  }\n                </React.Fragment>\n          </Box>\n        </Paper>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\n","/Users/kirk/Solana/grape-dashboard/src/views/GrapePartners/GrapePartners.jsx",["486","487","488","489","490","491"],"import * as React from 'react';\nimport MUIDataTable from \"mui-datatables\";\n\nimport {\n  Grid,\n  Typography,\n  Table,\n  Tooltip,\n  Paper,\n  Box,\n  Avatar,\n  LinearProgress,\n} from '@mui/material';\n\nimport { LinearProgressProps } from '@mui/material/LinearProgress';\nimport { makeStyles, styled, alpha, useTheme } from '@mui/material/styles';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n  '& .MuiTable-root': {\n    background: 'none',\n    tableLayout: 'fixed',\n    borderCollapse: 'separate',\n    borderSpacing: '0 16px',\n  },\n  '& .MuiPaper-root': {\n    background: 'none',\n    boxShadow: 'none',\n  },\n  '& .MuiToolbar-root': {\n    '@media (min-width: 900px)': {\n      height: '60px',\n      minHeight: '60px !important',\n      boxSizing: 'border-box',\n    },\n  },\n  '& .MuiTableRow-root.MuiTableRow-head': {\n    background: 'none',\n    '& .MuiButton-root': {\n      textTransform: 'uppercase',\n      fontWeight: 'bold',\n      fontSize: '0.75rem',\n      marginLeft: '1px',\n    },\n    '&:hover': {\n      background: 'none',\n    },\n  },\n  '& .MuiTableCell-head:nth-child(1)': {\n    width: '262px',\n  },\n  '& .MuiTableCell-head:nth-child(2)': {\n    width: '211px',\n  },\n  '& .MuiTableCell-head:nth-child(6)': {\n    width: '211px',\n  },\n  '& .MuiTableRow-root': {\n    backgroundColor: 'transparent',\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n  },\n  '& .MuiTableCell-root': {\n    background: 'none',\n    borderBottom: 'none',\n    '@media (min-width: 900px)': {\n      height: '60px',\n      minHeight: '60px !important',\n      boxSizing: 'border-box',\n    },\n  },\n  '& .MuiTableCell-root.MuiTableCell-body': {\n    lineHeight: '1.25em',\n    fontSize: '1rem',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    padding: '1rem',\n    '&:hover': {\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    },\n    '@media (min-width: 900px)': {\n      padding: 0,\n    },\n  },\n  '& .MuiTableCell-root.MuiTableCell-body:first-child': {\n    '@media (min-width: 900px)': {\n      borderTopLeftRadius: '60px',\n      borderBottomLeftRadius: '60px',\n    },\n  },\n  '& .MuiTableCell-root.MuiTableCell-body:last-child': {\n    '@media (min-width: 900px)': {\n      borderTopRightRadius: '60px',\n      borderBottomRightRadius: '60px',\n    },\n  },\n  '& .MuiTableCell-root.MuiTableCell-head': {\n    lineHeight: '1.25em',\n    textTransform: 'uppercase',\n    padding: 0,\n  },\n  '& .MuiAvatar-circular.MuiPaper-root': {\n    background: '#333',\n  },\n}));\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n};\n\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', pr: 2 }}>\n      <Box sx={{ width: '100%', height: '1rem' }}>\n        <LinearProgress\n          sx={{\n            height: '1rem',\n            borderTopLeftRadius: '1rem',\n            borderBottomLeftRadius: '1rem',\n            '& .MuiLinearProgress-bar': {\n              background:\n                'linear-gradient(276deg, #0FE2DF 5.96%, #8870F2 86.08%, #9E5BF6 96.45%)',\n              borderRadius: '1rem',\n            },\n          }}\n          variant=\"determinate\"\n          {...props}\n        />\n      </Box>\n      <Box\n        sx={{\n          minWidth: 50,\n          backgroundColor: 'black',\n          textAlign: 'center',\n          p: 1,\n          borderRadius: 1,\n        }}\n      >\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          {`${Math.round(props.value)}%`}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nexport function GrapePartnersView(props) {\n  //const [partnerData, setPartnerData] = React.useEffect(null);\n  const partnercolumns = [\n    {\n      name:\"name\",\n      label:\"Collection\",\n      options: {\n        filter: true,\n        sort: true,\n        display: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          //console.log(tableMeta.rowData, '......');\n          return (\n            <Grid container direction=\"row\" alignItems=\"center\">\n              <Grid item>\n                <Avatar component={Paper} \n                    elevation={4}\n                    alt={tableMeta.rowData[0]}\n                    src={`${tableMeta.rowData[1]}`}\n                    sx={{\n                      width: 60,\n                      height: 60,\n                    }}\n                />\n              </Grid>\n              <Grid item>\n                <Typography sx={{ marginLeft: 0, whiteSpace: 'pre-wrap', lineHeight: 1.25, p: 1 }}>\n                  {tableMeta.rowData[0].length > 20 ?\n                    tableMeta.rowData[0].substring(0,18) + '...'\n                  :\n                    tableMeta.rowData[0]\n                  }\n                </Typography>\n              </Grid>\n            </Grid>\n          );\n        },\n        setCellHeaderProps: () => ({\n          align: \"center\"\n        })\n      }\n    },\n    {\n      name:\"image\",\n      label:\"Image\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n       }\n    },\n    {\n      name:\"community_strength\",\n      label:\"Community Strength\",\n      options: {\n        filter: false,\n        sort: true,\n        display: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return <LinearProgressWithLabel value={tableMeta.rowData[2]} />;\n        },\n        setCellHeaderProps: () => ({\n          align: \"center\"\n        })\n       }\n    },\n    {\n      name:\"nft_average\",\n      label:\"NFT Average\",\n      options: {\n        filter: false,\n        sort: true,\n        display: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            formatNumber.format(tableMeta.rowData[3])\n          );\n        },\n        setCellProps: () => ({\n          align: \"center\"\n        }),\n        setCellHeaderProps: () => ({\n          align: \"center\"\n        })\n      }\n    },\n    {\n      name:\"unique_holders\", \n      label:\"Unique Holders\",\n      options: {\n        filter: false,\n        sort: true,\n        display: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            formatNumber.format(tableMeta.rowData[4])\n          );\n        },\n        setCellProps: () => ({\n          align: \"center\"\n        }),\n        setCellHeaderProps: () => ({\n          align: \"center\"\n        })\n      }\n    },\n    {\n      name:\"grape_holder_score\",\n      label:\"Grape Holder Score\",\n      options: {\n        filter: false,\n        sort: true,\n        display: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return <LinearProgressWithLabel value={tableMeta.rowData[5]} />;\n        },\n        setCellHeaderProps: () => ({\n          align: \"center\"\n        })\n      }\n    }\n  ];\n\n  const partnerdatastatic = [\n    {\n      \"name\": \"Shadowy Super Coder\",\n      \"image\": \"https://verify.grapes.network/server-logos/genesysgo.png\",\n      \"community_strength\": 47,\n      \"tvl\": 28197,\n      \"nft_average\": 3,\n      \"unique_holders\": 1821,\n      \"grape_holder_score\": 49\n    },\n    {\n      \"name\": \"Turtles\",\n      \"image\": \"https://nznh6xujkvtqqg2yph63lm4d7nh2j62qacaxl5irbzcgf3abbnfa.arweave.net/blp_XolVZwgbWHn9tbOD-0-k-1AAgXX1EQ5EYuwBC0o/?ext=png\",\n      \"community_strength\": 65,\n      \"tvl\": 15096,\n      \"nft_average\": 2,\n      \"unique_holders\": 984,\n      \"grape_holder_score\": 62\n    },\n    {\n      \"name\": \"DEGEN DAOO\",\n      \"image\": \"https://verify.grapes.network/server-logos/degendaoo.png\",\n      \"community_strength\": 32,\n      \"tvl\": 8196,\n      \"nft_average\": 2,\n      \"unique_holders\": 1506,\n      \"grape_holder_score\": 36\n    },\n    {\n      \"name\": \"Boryoku Dragonz\",\n      \"image\": \"https://verify.grapes.network/server-logos/boryoku.png\",\n      \"community_strength\": 66,\n      \"tvl\": 5545,\n      \"nft_average\": 2,\n      \"unique_holders\": 215,\n      \"grape_holder_score\": 69\n    },\n    {\n      \"name\": \"Solarians\",\n      \"image\": \"https://verify.grapes.network/server-logos/solarians.gif\",\n      \"community_strength\": 29,\n      \"tvl\": 6391,\n      \"nft_average\": 3,\n      \"unique_holders\": 811,\n      \"grape_holder_score\": 27\n    },\n    {\n      \"name\": \"MonkeDAO\",\n      \"image\": \"https://verify.grapes.network/server-logos/monkedao.png\",\n      \"community_strength\": 51,\n      \"tvl\": 3954,\n      \"nft_average\": 2,\n      \"unique_holders\": 803,\n      \"grape_holder_score\": 70\n    },\n    {\n      \"name\": \"thugDAO\",\n      \"image\": \"https://verify.grapes.network/server-logos/thugbirdz.png\",\n      \"community_strength\": 62,\n      \"tvl\": 3667,\n      \"nft_average\": 1,\n      \"unique_holders\": 1299,\n      \"grape_holder_score\": 71\n    },\n    {\n      \"name\": \"Lifinity\",\n      \"image\": \"https://verify.grapes.network/server-logos/lifinity.png\",\n      \"community_strength\": 44,\n      \"tvl\": 791,\n      \"nft_average\": 6,\n      \"unique_holders\": 1242,\n      \"grape_holder_score\": 42\n    }\n  ];\n\n  const partneroptions = {\n    selectableRows: false,\n    download:false,\n    print:false,\n    viewColumns:false,\n    filter:false\n  };\n  \n  const getPartnerData=()=>{ // this function will be used later on\n    fetch('dataRaw.json'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        console.log(response)\n        return response.json();\n      })\n      .then(function(myJson) {\n        console.log(myJson);\n      });\n  }\n\n  React.useEffect(()=>{\n    //setPartnerData(getPartnerData()); // we will fetch dynamically later on\n  },[])\n\n\n  return (\n    <>\n      <Box sx={{ p: 2, textAlign: 'center' }}>\n        <Typography \n          variant=\"h5\"\n          sx={{ marginLeft: 0, whiteSpace: 'pre-wrap', lineHeight: 1.25, p: 1 }}>\n          PARTNER REPORT\n        </Typography>\n      </Box>\n      <StyledTable sx={{ minWidth: 500 }} size=\"small\" aria-label=\"Grape Partners Table\">\n        <MUIDataTable\n          title={\"\"}\n          data={partnerdatastatic}\n          columns={partnercolumns}\n          options={partneroptions}\n        />\n      </StyledTable>\n      <Box sx={{ p: 2, textAlign: 'center' }}>\n        <Typography variant=\"caption\">\n          <Grid container align=\"center\" xs={{textAlign: 'center'}}>\n            <Grid item xs={12}>* Percentage of total NFTs held by the community</Grid>\n            <Grid item xs={12}>** The current floor price * number of NFTs held by community</Grid>\n            <Grid item xs={12}>*** Percentage of verified holders against overall holders who are members of the community</Grid>\n          </Grid>\n        </Typography>\n      </Box>\n    </>\n  );\n}\n","/Users/kirk/Solana/grape-dashboard/src/views/Farms/Farms.jsx",["492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583"],"import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\n\nimport{\n  Typography,\n  Paper,\n  Grid,\n  Box,\n  Divider,\n  Chip,\n  Tab,\n  Tabs,\n  Button,\n  Skeleton,\n  Tooltip,\n  Badge,\n} from '@mui/material/'\n\nimport PropTypes from 'prop-types';\n\nimport { useSession } from \"../../contexts/session\";\nimport Summary from '../Summary/Summary';\nimport TwitterFeedComponent from '../Feed/TwitterFeed';\nimport FarmsTable from './FarmsTable';\nimport { nu64, struct, u8, blob } from 'buffer-layout';\nimport { publicKey, u128, u64 } from '@project-serum/borsh'\nimport { TokenAmount, lt } from '../../utils/token/safe-math';\nimport { getFarmByPoolId } from '../../utils/token/farms';\nimport BigNumber from 'bignumber.js'\n\nimport { GRAPE_RPC_ENDPOINT } from '../../components/Tools/constants';\n//import { useTheme } from '@mui/material/styles';\nimport { Connection, Keypair } from \"@solana/web3.js\";\nimport { getOrca, OrcaPoolConfig, OrcaU64 } from \"@orca-so/sdk\";\nimport {PublicKey} from '@solana/web3.js'\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\n\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport ImageIcon from '@mui/icons-material/Image';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport GrapeIcon from '../../components/StaticIcons/GrapeIcon';\nimport SolIcon from '../../components/StaticIcons/SolIcon';\nimport { dark } from \"@mui/material/styles/createPalette\";\nimport { lookupService } from \"dns\";\n\n  const USER_STAKE_INFO_ACCOUNT_LAYOUT = struct([\n    u64('state'),\n    publicKey('poolId'),\n    publicKey('stakerOwner'),\n    u64('depositBalance'),\n    u64('rewardDebt')\n  ])\n\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nexport const FarmsView = (props) => {\n  const [initPortfolio, setInitPortfolio] = useState(props.initPortfolio);\n  const [initCGPriceData, setInitCGPriceData] = useState(props.initCGPriceData);\n  const [initNewPriceData, setInitNewPriceData] = useState(props.initNewPriceData);\n  \n  const [portfolioPositions, setPorfolioBalances] = useState(props.porftolioPositions);\n  const [initTokenMap, setInitTokenMap] = useState(props.tokenMap);\n  const { session, setSession } = useSession();\n  const [loading, setLoading] = React.useState(false);\n  \n  //const connection = new Connection(url, \"singleGossip\");\n  //const orca = getOrca(connection);\n  //const owner: Keypair = getKeyPair();\n\n  //RAYDIUM: /logos/platforms/raydium.png\n  //SOLFARM: /logos/platforms/solfarm.png\n  //ORCA: /logos/platforms/orca.png\n\n  //Get Balances RPC\n  const fetchStakedRaydium = async () => {\n    const body = {\n        method: \"getProgramAccounts\",\n        //method: \"getMultipleAccountsInfo\",\n        jsonrpc: \"2.0\",\n        params: [\n            \"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\",\n            //\"97q89hnoKwqcynvwXcj83YqfqUBuCm4A8f2zHeV6bfZg\", ORCA/GRAPE\n            //session.publicKey\n            //\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\", // raydium stakes\n            {\"commitment\":\"confirmed\",\"filters\":[{\"memcmp\":{\"offset\":40,\"bytes\":session.publicKey}}],\"encoding\":\"base64\"}\n            //{\"connection\":\"Connection\",\"publicKeys\": [session.publicKey]}\n        ],\n        id: \"84203270-a3eb-4812-96d7-0a3c40c87a88\"\n      };\n      \n      //const response = await fetch(\"https://solana-api.projectserum.com/\", {\n      const response = await fetch(GRAPE_RPC_ENDPOINT, {\n          method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      const json = await response.json();\n      let decoded = json.result.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n        publicKey: new PublicKey(pubkey),\n        accountInfo: {\n          data: Buffer.from(data[0], 'base64'),\n          executable,\n          owner: new PublicKey(owner),\n          lamports\n        }}));\n\n        return decoded;\n  }\n\n  const fetchPairsSolFarm = async () => {\n    const response = await fetch(\"https://api.raydium.io/pairs\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchPairsOrca = async () => {\n    // ORCA token:\n    // orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE\n    // ORCA pool:\n    // 97q89hnoKwqcynvwXcj83YqfqUBuCm4A8f2zHeV6bfZg\n\n    /* CONSIDERING THEIR API:\n    const connection = new Connection(url, \"singleGossip\");\n    const orca = getOrca(connection);\n    \n    // Get an instance of the ETH-USDC orca pool\n    let pool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n\n    // Get the number of ETH-USDC LP tokens in your wallet\n    let grapeUsdcLPBalance = await pool.getLPBalance(owner.publicKey);\n    // Get the total supply of ETH-USDC LP tokens\n    let grapeUsdcLPSupply = await pool.getLPSupply();\n    \n    */\n    const response = await fetch(\"https://api.orca.so/allPools\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchPairsRaydium = async () => {\n    const response = await fetch(\"https://api.raydium.io/pairs\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchAdditionalFarmPools = async () => {\n\n    // get Orca (we should function this out though)\n    const response = await fetch(\"https://api.orca.so/allPools\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchBalances = async () => {\n    const body = {\n      method: \"getTokenAccountsByOwner\",\n      jsonrpc: \"2.0\",\n      params: [\n        // Get the public key of the account you want the balance for.\n        session.publicKey,\n        { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n        { encoding: \"jsonParsed\", commitment: \"processed\" },\n      ],\n      id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n    };\n\n    const response = await fetch(GRAPE_RPC_ENDPOINT, {\n    //const response = await fetch(\"https://solana-api.projectserum.com/\", {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    const resultValues = json.result.value\n    return resultValues;\n  };\n\n  const fetchSOLBalance = async () => {\n    const body = {\n      method: \"getBalance\",\n      jsonrpc: \"2.0\",\n      params: [\n        // Get the public key of the account you want the balance for.\n        session.publicKey\n      ],\n      id: \"35f0036a-3801-4485-b573-2bf29a7c77d3\",\n    };\n\n    const response = await fetch(GRAPE_RPC_ENDPOINT, {\n    //const response = await fetch(\"https://solana-api.projectserum.com/\", {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    const resultValues = json.result.value;\n    return resultValues;\n  };\n\n  //Get Prices RPC\n  const fetchNSWPriceList = async () => {\n    const response = await fetch(\"https://api.sonar.watch/latest\", {\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING CG DATA!\");\n      return null;\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  //Get Prices RPC\n  const fetchCoinGeckoPriceList = async () => {\n    const response = await fetch(\"https://api.coingecko.com/api/v3/simple/price?include_24hr_change=true&ids=solana,kitty-solana,astrapad,buff-samo,solana-inu,wipemyass,almond,swole-doge,oogi,solex-finance,bamboo-coin,solum,solberg,sola-token,solana,usd-coin,everid,impossible-finance,investin,bitcoin,ethereum,yearn-finance,chainlink,ripple,tether,sushi,aleph,swipe,hedget,cream-2,upbots,helium,frontier-token,akropolis,hxro,uniswap,serum,ftx-token,megaserum,usd-coin,tomochain,karma-dao,lua-token,math,keep-network,swag-finance,celsius-degree-token,reserve-rights-token,1inch,the-graph,compound-coin,pax-gold,strong,bonfida,kin,maps,oxygen,brz,tether,xmark,raydium,bitsong,3x-short-eos-token,3x-long-eos-token,3x-short-bnb-token,3x-long-bnb-token,3x-long-bitcoin-sv-token,3x-short-bitcoin-sv-token,3x-short-litecoin-token,3x-long-litecoin-token,3x-long-bitcoin-token,3x-short-bitcoin-token,3x-short-bitcoin-cash-token,3x-long-bitcoin-cash-token,3x-long-ethereum-token,3x-short-ethereum-token,3x-long-altcoin-index-token,3x-short-altcoin-index-token,3x-long-shitcoin-index-token,3x-short-shitcoin-index-token,3x-long-midcap-index-token,3x-short-midcap-index-token,3x-short-chainlink-token,3x-long-chainlink-token,3x-long-xrp-token,3x-short-xrp-token,1x-long-btc-implied-volatility-token,1x-short-btc-implied-volatility,aave,serum-ecosystem-token,holy-trinity,bilira,3x-long-dogecoin-token,perpetual-protocol,weth,coin-capsule,ftx-token,true-usd,tokenlon,allianceblock,skale,unlend-finance,orion-protocol,sparkpoint,uma,smartkey,mirror-protocol,growth-defi,xdai-stake,yearn-finance,basic-attention-token,basic-attention-token,decentraland,xio,unilayer,unimex-network,1inch,armor,armor-nxm,defipulse-index,deltahub-community,kira-network,energy-web-token,cryptocurrency-top-10-tokens-index,audius,vesper-finance,keep3rv1,lead-token,uniswap,wrapped-bitcoin,union-protocol-governance-token,unisocks,idextools,hex,cream-2,yfimobi,zeroswap,wrapped-anatha,ramp,parsiq,smooth-love-potion,the-sandbox,concentrated-voting-power,republic-protocol,sora,funfair,pickle-finance,pax-gold,quant-network,oraichain-token,truefi,mcdex,nucypher,razor-network,chainlink,unfederalreserve,nusd,hegic,xfinance,dextf,iexec-rlc,cvault-finance,cyberfi,wise-token11,gnosis,poolz-finance,dai,sushi,fyooz,quiverx,unitrade,bird-money,axion,bridge-mutual,dynamite,bitberry-token,waxe,matic-network,robonomics-network,aave,ethlend,polkastarter,unibright,dia-data,frax,keep-network,reserve-rights-token,88mph,paid-network,swipe,request-network,whale,kleros,krown,apy-finance,ocean-protocol,shopping-io,binance-wrapped-btc,unistake,maker,harvest-finance,usd-coin,aragon,pundi-x,redfox-labs-2,meta,rubic,noia-network,celsius-degree-token,crowns,option-room,yield-optimization-platform,lgcy-network,rio-defi,mahadao,rocket-pool,nexo,saffron-finance,stabilize,balancer,band-protocol,swapfolio,loopring,perpetual-protocol,compound-governance-token,havven,dlp-duck-token,chain-games,the-graph,rootkit,trustswap,terra-virtua-kolect,omisego,wrapped-terra,bondly,dextrust,ampleforth,polkamarkets,curve-dao-token,degenerator,exnetwork-token,tether,yield,kyber-network,coti,injective-protocol,0x,superfarm,ankreth,surf-finance,renbtc,dmm-governance,hermez-network-token,rally-2,yfdai-finance,fractal,axie-infinity,enjincoin,yield-app,duckdaodime,rarible,amp-token,fsw-token,binance-usd,aave-dai-v1,aave-tusd-v1,aave-usdc-v1,aave-usdt-v1,aave-susd-v1,aave-bat-v1,aave-eth-v1,aave-link-v1,aave-knc-v1,aave-mkr-v1,aave-mana-v1,aave-zrx-v1,aave-snx-v1,aave-wbtc-v1,aave-busd-v1,aave-enj-v1,aave-ren-v1,ayfi,aave-usdt,aave-wbtc,aave-zrx,aave-bat,aave-busd,aave-dai,aave-enj,aave-knc,aave-link,aave-mana,aave-mkr,aave-ren,aave-snx,aave-susd,aave-tusd,aave-usdc,stake-dao,cope,cope,mango-market-caps,rope-token,media-network,step-finance,solanium,samoyedcoin,panda-coin,star-atlas,star-atlas-dao,soldoge,synthetify-token,moonlana,solape-token,woof-token,mercurial,lotto,bole-token,apyswap,shibaverse-token,shibaverse-token,solfarm,ardcoin,cheems,cato,ninja-protocol,boring-protocol,dexlab,grape-2,apexit-finance,black-label,orca,renbtc,renbch,rendoge,renzec,sail,aldrin,oxbull-solana,fabric,naxar,space-hamster,gu,liq-protocol,cropperfinance,solrise-finance,jet,cheesesoda-token,only1,terrausd,orbs,solberry,coin98,saber,huobi-btc,husd,hapi,larix,msol,mim,port-finance,jpyc,mango-markets,solanasail-governance-token,parrot-usd,parrot-protocol,sunny-aggregator,cyclos,lido-staked-ether,million,million,shapeshift-fox-token,ashera,balisari,solminter,tether,usd-coin,renfil,bitspawn,socean-staked-sol,agronomist,polyplay,allbridge,binance-usd,weth,tether,usd-coin,multi-collateral-dai,celo-dollar,chihuahuasol,chronologic,ftx-token,matrixetf,solblank,marinade,wrapped-conceal,graviton,dogelana,usd-coin,bitcoin,solana,ftx-token,ethereum,usd-coin,tether,dai,himalayan-cat-coin,frakt-token,tether,usd-coin,multi-collateral-dai,wrapped-bitcoin,avalanche,aurory,matrixetf,lizard-token,cave,ftx-token,terra-usd,weth,serum,terra-luna,husd,binance-usd,frax,huobi-btc,usdk,sushi,uniswap,wbnb,chainlink,pax-gold,hxro,swipe,frax-share,celsius-network-token,cream,usd-coin,wrapped-bitcoin,tether,floof,baby-samo-coin,solend,lunachow,lunachow,biconomy-exchange-token,ariadne,solana,invictus,wrapped-bitcoin,polygon,polygon,binance-usd,the-4th-pillar,genopets,safe-coin-2&vs_currencies=usd\",{\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING CG DATA!\");\n      return null;\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  //Get Prices RPC\n  const fetchLegacyPriceList = async () => {\n    const response = await fetch(\"https://price-api.sonar.watch/prices\", {\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING SW DATA!\");\n      return [];\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  const fetchTokenMap = async () => {\n    let tokens = await new TokenListProvider().resolve();\n    const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n\n    let tokenMap = tokenList.reduce((map, item) => {\n      map.set(item.address, item);\n      return map;\n    }, new Map());\n\n    return tokenMap;\n  }\n\n  //Get Porfolio\n  const getBalances = async () => {\n    if (!loading){\n      \n      setLoading(true);\n      \n      let portfolio = initPortfolio;\n      let cgPriceData = initCGPriceData; \n      let newPriceData = initNewPriceData;\n      let tokenMap = initTokenMap;\n      let [staked, sol, additionalFarmPools, pairsDataRaydium] = await Promise.all([fetchStakedRaydium(), fetchSOLBalance(), fetchAdditionalFarmPools(), fetchPairsRaydium()]);\n      \n      // we need to now first get portfolio \n      // then load a skeleton (without positions)\n      // then load positions from fetched data from cg or other source\n\n      let legacyPriceData = [];\n      //let [newPriceData] = [null];\n      \n      let other_stakes = [];\n      \n      let priceData = [];\n\n      if (!newPriceData){\n        [legacyPriceData] = await Promise.all([fetchLegacyPriceList()]);\n        //[newPriceData] = await Promise.all([fetchCoinGeckoPriceList()]);\n        \n        //const newPriceDataResponse = await newPriceData;\n        //   console.log(\"DATA: \"+JSON.stringify(newPriceData.prices));\n        \n        if (!legacyPriceData)\n          console.log(\"NO DATA\");\n      }\n      // check which data we have loaded so we can parse accordingly\n      // TULIP POOL: \n      // ?? fhA1P91Hk3K689GJcvP9pEAjPC2RmeLdyPZzqSyBwsh balance = 1 ??\n      // ?? EorFh8siFyLF1QTZ7cCXQaPGqyo7eb4SAgKtRH8Jcxjd??\n      // ?? A8ZYmnZ1vwxUa4wpJVUaJgegsuTEz5TKy5CiJXffvmpt ??\n\n      //console.log(\"Portfolio HERE: \"+JSON.stringify(portfolio));\n      \n      portfolio = portfolio.map((token) => {\n        let mint = token.account.data.parsed.info.mint;\n        let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n        let tmapitem = mint && tokenMap.get(mint);\n        let price = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd || 0;\n        let usd_24h_change = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd_24h_change || '';\n\n        // tokenInfo.extensions.coingeckoId\n\n        if (tmapitem){  \n          if (tmapitem.extensions?.coingeckoId){\n\n            //try{\n              //console.log(\"tmapitem: \"+JSON.stringify(tmapitem));\n              //console.log(\"pushing (\"+tmapitem.extensions.coingeckoId+\"): \" + JSON.stringify(cgPriceData[tmapitem.extensions.coingeckoId]?.usd));\n              //console.log(\"FOUND: \"+psymbol);\n              // IMPORTANT ADD CHECK TO GET PRICE FROM CG\n              priceData.push({\n                mint: mint,\n                symbol: tmapitem && tmapitem.symbol || 'Unknown',\n                logoURI: tmapitem && tmapitem.logoURI || '',\n                price: price,\n                usd_24h_change: usd_24h_change,\n                updatedAt: ''\n              }); \n\n            //}catch(e){console.log(\"ERR: \"+e)}\n          }\n          \n        }\n        \n        if ((balance > 0)&&\n            (+token.account.data.parsed.info.tokenAmount.decimals != 0)){\n\n          Object.keys(newPriceData.farms).forEach(function(key) {\n            if (newPriceData.farms[key].additional?.farmTokenMint){ // this is exclusively for Orca:\n              if (newPriceData.farms[key].additional?.farmTokenMint == token.account.data.parsed.info.mint){ \n                const farmPlatform = \"Orca Aquafarm\";//newPriceData.farms[key].platform;\n                const farmPlatformLogo = 'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/97q89hnoKwqcynvwXcj83YqfqUBuCm4A8f2zHeV6bfZg/logo.svg';\n                \n                // get assets\n                let assets = [];\n                \n                newPriceData.farms[key].lp.assets.map((asset) => {\n                  let atmapitem = asset.mint && tokenMap.get(asset.mint);\n                  assets.push({\n                    name: atmapitem && atmapitem.symbol || 'Unknown',//newPriceData.tokens[asset.mint].symbol,\n                    logo: atmapitem && atmapitem.logoURI || '', //newPriceData.tokens[asset.mint].logoURI\n                  })\n                });\n                \n                //console.log(\"Found: \"+JSON.stringify(newPriceData.farms[key]));\n                other_stakes.push({\n                  balance: balance,\n                  pendingReward: 0,\n                  tokenInfo: null,//mint && tokenMap.get(mint),\n                  lpprice: 0,\n                  apr: newPriceData.farms[key]?.apr || '',\n                  value: balance*(+newPriceData.farms[key]?.lp?.price || 0),\n                  farmInfo: assets,\n                  farmName: farmPlatform,\n                  farmPoolId: token.account.data.parsed.info.mint,\n                  stakedInfo: null,\n                  farmLogoURI: farmPlatformLogo,\n                  farmPendingReward: 0\n                });\n                  \n                \n              }\n            } else if (newPriceData.farms[key].lp?.mint){ // this is exclusively for SolFarm:\n              \n              /*\n              if (newPriceData.farms[key].platform == \"solfarm\"){\n                if (newPriceData.farms[key].mint == token.account.data.parsed.info.mint){ \n                  console.log(\"Platform: \"+newPriceData.farms[key]?.platform);\n                  console.log(\"Mint: \"+token.account.data.parsed.info.mint);\n                }\n              }\n              */\n              \n              if (newPriceData.farms[key].lp?.mint == token.account.data.parsed.info.mint){ \n                \n                \n\n                if (newPriceData.farms[key]?.platform == \"raydium\"){\n                } else if (newPriceData.farms[key].platform == \"solfarm\"){\n\n                  console.log(\"Solfarm::: \"+JSON.stringify(newPriceData.farms[key]));\n                  \n                  const farmPlatform = \"Tulip/solFarm\";//newPriceData.farms[key].platform;\n                  const farmPlatformLogo = 'https://tulip.garden/static/media/tulip.be0a265d.svg';\n\n                  // get assets\n                  let assets = [];\n                  newPriceData.farms[key].lp.assets.map((asset) => {\n                    let atmapitem = asset.mint && tokenMap.get(asset.mint);\n                    assets.push({\n                      name: atmapitem && atmapitem.symbol || 'Unknown',//newPriceData.tokens[asset.mint].symbol,\n                      logo: atmapitem && atmapitem.logoURI || '', //newPriceData.tokens[asset.mint].logoURI\n                    })\n                  });\n                \n                  let rassets = '';\n                  let y = 0;\n                  if (newPriceData.farms[key]?.rewardAssets) {\n                    newPriceData.farms[key].rewardAssets.map((rasset) => {\n                      if (y>0)\n                        rassets+= '-';\n                      rassets+= newPriceData.tokens[rasset.mint].symbol;\n                      y++;\n                    });\n                  }\n\n                  if ((y == 0)&&(newPriceData.farms[key].lp.value>0)){ \n                    //lp_balance = newPriceData.farms[key].lp.amount;\n                    /*\n                    other_stakes.push({\n                        balance: balance,\n                        pendingReward: 0,\n                        tokenInfo: null,//mint && tokenMap.get(mint),\n                        lpprice: newPriceData.farms[key].lp.price,\n                        value: price,\n                        farmInfo: assets,\n                        //farmInfo: {name:\"TULIP\"},\n                        farmName: farmPlatform,\n                        farmPoolId: token.account.data.parsed.info.mint,\n                        stakedInfo: null,\n                        farmLogoURI: farmPlatformLogo,\n                        farmPendingReward: 0\n                    });\n                    */\n                    \n                  }\n                }\n              }\n            }\n          });\n        }\n\n        return {\n          mint: mint,\n          symbol: tmapitem && tmapitem.symbol || 'Unknown',\n          coingeckoId: tmapitem && tmapitem?.extensions?.coingeckoId || '',\n          balance: balance,\n          price: price && price,\n          value: price && price * balance,\n          tokenInfo: mint && tokenMap.get(mint),\n          usd_24h_change: usd_24h_change\n        };\n        \n      }).filter((token) => {\n        return (token.balance > 0) && (token.price > 0) && typeof token.balance !== \"undefined\";\n      });\n      \n      portfolio = portfolio.sort(function(a, b) {\n          return b.value - a.value;\n      });\n\n      staked = staked.map((stakeAccountInfo) => {\n          const { data } = stakeAccountInfo.accountInfo\n          const userStakeInfo = USER_STAKE_INFO_ACCOUNT_LAYOUT.decode(data)\n          const poolId = userStakeInfo.poolId.toBase58()\n          const stakerOwner = userStakeInfo.stakerOwner.toBase58()\n          const farm = getFarmByPoolId(poolId);\n\n          //console.log(\"Pool:\" +poolId);\n\n          if(!farm) {\n            return {\n              balance: 0\n            }\n          }\n\n          const farmPlatform = 'Raydium';\n          const farmPlatformLogo = '/logos/platforms/raydium.png';\n\n          const pair = pairsDataRaydium.find(pair => {\n            return pair.name === farm.name\n          });\n          \n          let farmshift = farm.lp.coin.decimals;\n          let shift = -1*farmshift;\n\n          let balance = new BigNumber(+userStakeInfo.depositBalance);\n          balance = balance.shiftedBy(shift);\n          \n          let pendingReward = new BigNumber(+userStakeInfo.rewardDebt);\n          pendingReward = pendingReward.shiftedBy(shift);\n\n          let stupid_balance = new TokenAmount(userStakeInfo.depositBalance.toNumber(), 6);\n          stupid_balance = parseFloat(stupid_balance.format());\n\n          let stupid_pendingReward = new TokenAmount(userStakeInfo.rewardDebt.toNumber(), 6);\n          stupid_pendingReward = parseFloat(stupid_pendingReward.format());\n\n          //farmData = newPriceData.farms.find(pair => {\n          //const found = newPriceData.farms.find(element => element == poolId);\n          //console.log(\"FOUND: \"+JSON.stringify(found));\n\n          let farmValue = pair.price * balance;\n          let farmApr = 0;\n\n          let assets = [];\n\n          Object.keys(newPriceData.farms).forEach(function(key) {\n            if (newPriceData.farms[key]?.address){\n              if (newPriceData.farms[key]?.address == poolId){ \n                \n                newPriceData.farms[key].lp.assets.map((asset) => {\n                  let atmapitem = asset.mint && tokenMap.get(asset.mint);\n                  assets.push({\n                    name: atmapitem && atmapitem.symbol || 'Unknown',//newPriceData.tokens[asset.mint].symbol,\n                    logo: atmapitem && atmapitem.logoURI || '', //newPriceData.tokens[asset.mint].logoURI\n                  })\n                });\n                \n                farmValue = balance*(+newPriceData.farms[key]?.lp?.price || 0);\n                farmApr = newPriceData.farms[key]?.apr || 0;\n                \n              }\n            }\n          });\n\n          return {\n              balance,\n              pendingReward,\n              tokenInfo: null,//mint && tokenMap.get(mint),\n              lpprice : pair.price,\n              value : farmValue,\n              farmInfo: assets,\n              apr: farmApr,\n              farmName: farmPlatform,\n              farmPoolId: poolId,\n              stakedInfo: data,\n              farmLogoURI: farmPlatformLogo,\n              farmPendingReward: 0\n          }\n      }).filter((token) => {\n          return token.balance > 0;\n      });\n      \n      {other_stakes != null && \n        staked.push(...other_stakes);\n      }\n      \n      setPorfolioBalances({\n          staked\n      });\n      \n      //console.log(\"2. PORTFOLIO: \"+JSON.stringify(portfolio));\n      //console.log(\"2. STAKED: \"+JSON.stringify(staked));\n      //console.log(\"2. COLLECTIBLES: \"+JSON.stringify(collectibles));\n\n      setLoading(false);\n      \n    } else{\n      return (\n        <Grid item xs={12} md={8} lg={9}>\n          <Paper class=\"grape-paper-background\">\n            <Paper\n              class=\"grape-paper\"\n              sx={{\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: 240,\n              }}\n            >\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <Skeleton />\n              </Box>\n            </Paper>\n          </Paper>\n        </Grid>\n      );\n    }\n  };\n\n  //Get Balances\n  let total = 0;\n  let portfolioTotal = 0; \n  let portfolioChange = 0; \n  let portfolioPercentageChange = 0; \n  let stakedTotal = 0;\n\n  const handleDeleteChange = () => {\n\n  };\n\n  if(!portfolioPositions){\n    //console.log(\"Getting balances...\");\n    if (session.publicKey)\n      getBalances();\n    return (\n      <React.Fragment>\n        <Grid item xs={12} md={12} lg={12}>\n          <Paper class=\"grape-paper-background\">\n            <Paper\n              class=\"grape-paper\"\n              sx={{\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n              }}\n            >\n              <Box sx={{ width: \"100%\", p:1 }}>\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 0 }} />\n              </Box>\n            </Paper>\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }else{   \n    \n    stakedTotal = portfolioPositions.staked.reduce((acc, token) => {\n        return acc + token.value;\n    }, 0);\n\n    total = portfolioTotal + stakedTotal;\n  }\n  \n  return (\n      <React.Fragment>\n        \n        {(portfolioPositions.staked && portfolioPositions.staked.length) ? \n        <React.Fragment>\n          {/*\n          <Grid item xs={12} md={4} lg={3}>\n            <Paper class=\"grape-paper-background\">\n              <Paper\n                class=\"grape-paper\"\n                sx={{\n                  p: 2,\n                  display: 'flex',\n                  flexDirection: 'column',\n                  minHeight: 240,\n                }}\n              >\n                \n                \n              </Paper>\n            </Paper>\n          </Grid>\n          */}\n          <Grid item xs={12} md={12} lg={12}>\n            <Paper class=\"grape-paper-background\">\n              <Box class=\"grape-paper\">\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  <Box class=\"grape-dashboard-component-header\" sx={{ m: 0, position: 'relative' }}>\n                    <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                      YIELD FARMING\n                    </Typography>\n                  </Box>\n                </Box>\n                <FarmsTable balances={portfolioPositions.staked} isFarm={true}/>\n              </Box>\n            </Paper>\n          </Grid>\n        </React.Fragment> : <div/>}\n        \n      </React.Fragment>\n  );\n};\n","/Users/kirk/Solana/grape-dashboard/src/views/Contribute/Contribute.jsx",["584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640"],"import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\n\nimport{\n  Typography,\n  Paper,\n  Grid,\n  Box,\n  Divider,\n  Chip,\n  Tab,\n  Tabs,\n  Button,\n  Skeleton,\n  Tooltip,\n} from '@mui/material/'\n\nimport PropTypes from 'prop-types';\n\nimport { useSession } from \"../../contexts/session\";\nimport ContributeTable from './ContributeTable';\nimport { struct } from 'buffer-layout';\nimport { publicKey, u128, u64 } from '@project-serum/borsh'\nimport { TokenAmount, lt } from '../../utils/token/safe-math';\n\n//import { useTheme } from '@mui/material/styles';\nimport {PublicKey} from '@solana/web3.js';\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\n\nimport { GRAPE_RPC_ENDPOINT } from '../../components/Tools/constants';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\n\nimport CircularProgress from '@mui/material/CircularProgress';\nimport RefreshIcon from '@mui/icons-material/Refresh';\n\nimport { FarmsView } from \"../\";\n\n  const USER_STAKE_INFO_ACCOUNT_LAYOUT = struct([\n    u64('state'),\n    publicKey('poolId'),\n    publicKey('stakerOwner'),\n    u64('depositBalance'),\n    u64('rewardDebt')\n  ])\n\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nexport const ContributeView = () => {\n  const [initPortfolio, setInitPortfolio] = useState(null);\n  const [initCGPriceData, setInitCGPriceData] = useState(null);\n  const [initNewPriceData, setInitNewPriceData] = useState(null);\n  const [portfolioPositions, setPorfolioBalances] = useState(null);\n  const [tokenMap, setTokenMap] = useState(new Map());\n  const { session, setSession } = useSession();\n  const [grapeTicker, setGrapeTicker] = useState(null);\n  const [solTicker, setSolTicker] = useState(null);\n  const [tstamp, setTickerTimestamp] = useState(null);\n  const [value, setTabValue] = React.useState(0);\n\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [array, setArray] = useState([]);\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  //const connection = new Connection(url, \"singleGossip\");\n  //const orca = getOrca(connection);\n  //const owner: Keypair = getKeyPair();\n\n  //RAYDIUM: /logos/platforms/raydium.png\n  //SOLFARM: /logos/platforms/solfarm.png\n  //ORCA: /logos/platforms/orca.png\n\n  //Get Balances RPC\n  const fetchStakedRaydium = async () => {\n    const body = {\n        method: \"getProgramAccounts\",\n        //method: \"getMultipleAccountsInfo\",\n        jsonrpc: \"2.0\",\n        params: [\n            \"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\",\n            //\"97q89hnoKwqcynvwXcj83YqfqUBuCm4A8f2zHeV6bfZg\", ORCA/GRAPE\n            //session.publicKey\n            //\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\", // raydium stakes\n            {\"commitment\":\"confirmed\",\"filters\":[{\"memcmp\":{\"offset\":40,\"bytes\":session.publicKey}}],\"encoding\":\"base64\"}\n            //{\"connection\":\"Connection\",\"publicKeys\": [session.publicKey]}\n        ],\n        id: \"84203270-a3eb-4812-96d7-0a3c40c87a88\"\n      };\n      \n      \n      const response = await fetch(GRAPE_RPC_ENDPOINT, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      const json = await response.json();\n      let decoded = json.result.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n        publicKey: new PublicKey(pubkey),\n        accountInfo: {\n          data: Buffer.from(data[0], 'base64'),\n          executable,\n          owner: new PublicKey(owner),\n          lamports\n        }}));\n\n        return decoded;\n  }\n\n  const fetchPairsSolFarm = async () => {\n    const response = await fetch(\"https://api.raydium.io/pairs\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchPairsOrca = async () => {\n    // ORCA token:\n    // orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE\n    // ORCA pool:\n    // 97q89hnoKwqcynvwXcj83YqfqUBuCm4A8f2zHeV6bfZg\n\n    /* CONSIDERING THEIR API:\n    const connection = new Connection(url, \"singleGossip\");\n    const orca = getOrca(connection);\n    \n    // Get an instance of the ETH-USDC orca pool\n    let pool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n\n    // Get the number of ETH-USDC LP tokens in your wallet\n    let grapeUsdcLPBalance = await pool.getLPBalance(owner.publicKey);\n    // Get the total supply of ETH-USDC LP tokens\n    let grapeUsdcLPSupply = await pool.getLPSupply();\n    \n    */\n    const response = await fetch(\"https://api.orca.so/allPools\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchPairsRaydium = async () => {\n    const response = await fetch(\"https://api.raydium.io/pairs\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchAdditionalFarmPools = async () => {\n\n    // get Orca (we should function this out though)\n    const response = await fetch(\"https://api.orca.so/allPools\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchBalances = async () => {\n    const body = {\n      method: \"getTokenAccountsByOwner\",\n      jsonrpc: \"2.0\",\n      params: [\n        // Get the public key of the account you want the balance for.\n        session.publicKey,\n        { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n        { encoding: \"jsonParsed\", commitment: \"processed\" },\n      ],\n      id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n    };\n\n    //try{\n      const response = await fetch(GRAPE_RPC_ENDPOINT, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n      const json = await response.json();\n      const resultValues = json.result.value\n      return resultValues;\n    /*\n    } catch(e){\n      //const response = await fetch(\"https://free.rpcpool.com\", {\n      const response = await fetch(\"https://solana-api.projectserum.com/\", {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n      const json = await response.json();\n      const resultValues = json.result.value\n      return resultValues;\n    }*/\n  };\n\n  const fetchSOLBalance = async () => {\n    const body = {\n      method: \"getBalance\",\n      jsonrpc: \"2.0\",\n      params: [\n        // Get the public key of the account you want the balance for.\n        session.publicKey\n      ],\n      id: \"35f0036a-3801-4485-b573-2bf29a7c77d3\",\n    };\n\n    const response = await fetch(GRAPE_RPC_ENDPOINT, {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    const resultValues = json.result.value;\n    return resultValues;\n  };\n\n  //Get Prices RPC\n  const fetchNSWPriceList = async () => {\n    const response = await fetch(\"https://api.sonar.watch/latest\", {\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING CG DATA!\");\n      return null;\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  //Get Prices RPC\n  const fetchCoinGeckoPriceList = async () => {\n    const response = await fetch(\"https://api.coingecko.com/api/v3/simple/price?include_24hr_change=true&ids=solana,kitty-solana,astrapad,buff-samo,solana-inu,wipemyass,almond,swole-doge,oogi,solex-finance,bamboo-coin,solum,solberg,sola-token,solana,usd-coin,everid,impossible-finance,investin,bitcoin,ethereum,yearn-finance,chainlink,ripple,tether,sushi,aleph,swipe,hedget,cream-2,upbots,helium,frontier-token,akropolis,hxro,uniswap,serum,ftx-token,megaserum,usd-coin,tomochain,karma-dao,lua-token,math,keep-network,swag-finance,celsius-degree-token,reserve-rights-token,1inch,the-graph,compound-coin,pax-gold,strong,bonfida,kin,maps,oxygen,brz,tether,xmark,raydium,bitsong,3x-short-eos-token,3x-long-eos-token,3x-short-bnb-token,3x-long-bnb-token,3x-long-bitcoin-sv-token,3x-short-bitcoin-sv-token,3x-short-litecoin-token,3x-long-litecoin-token,3x-long-bitcoin-token,3x-short-bitcoin-token,3x-short-bitcoin-cash-token,3x-long-bitcoin-cash-token,3x-long-ethereum-token,3x-short-ethereum-token,3x-long-altcoin-index-token,3x-short-altcoin-index-token,3x-long-shitcoin-index-token,3x-short-shitcoin-index-token,3x-long-midcap-index-token,3x-short-midcap-index-token,3x-short-chainlink-token,3x-long-chainlink-token,3x-long-xrp-token,3x-short-xrp-token,1x-long-btc-implied-volatility-token,1x-short-btc-implied-volatility,aave,serum-ecosystem-token,holy-trinity,bilira,3x-long-dogecoin-token,perpetual-protocol,weth,coin-capsule,ftx-token,true-usd,tokenlon,allianceblock,skale,unlend-finance,orion-protocol,sparkpoint,uma,smartkey,mirror-protocol,growth-defi,xdai-stake,yearn-finance,basic-attention-token,basic-attention-token,decentraland,xio,unilayer,unimex-network,1inch,armor,armor-nxm,defipulse-index,deltahub-community,kira-network,energy-web-token,cryptocurrency-top-10-tokens-index,audius,vesper-finance,keep3rv1,lead-token,uniswap,wrapped-bitcoin,union-protocol-governance-token,unisocks,idextools,hex,cream-2,yfimobi,zeroswap,wrapped-anatha,ramp,parsiq,smooth-love-potion,the-sandbox,concentrated-voting-power,republic-protocol,sora,funfair,pickle-finance,pax-gold,quant-network,oraichain-token,truefi,mcdex,nucypher,razor-network,chainlink,unfederalreserve,nusd,hegic,xfinance,dextf,iexec-rlc,cvault-finance,cyberfi,wise-token11,gnosis,poolz-finance,dai,sushi,fyooz,quiverx,unitrade,bird-money,axion,bridge-mutual,dynamite,bitberry-token,waxe,matic-network,robonomics-network,aave,ethlend,polkastarter,unibright,dia-data,frax,keep-network,reserve-rights-token,88mph,paid-network,swipe,request-network,whale,kleros,krown,apy-finance,ocean-protocol,shopping-io,binance-wrapped-btc,unistake,maker,harvest-finance,usd-coin,aragon,pundi-x,redfox-labs-2,meta,rubic,noia-network,celsius-degree-token,crowns,option-room,yield-optimization-platform,lgcy-network,rio-defi,mahadao,rocket-pool,nexo,saffron-finance,stabilize,balancer,band-protocol,swapfolio,loopring,perpetual-protocol,compound-governance-token,havven,dlp-duck-token,chain-games,the-graph,rootkit,trustswap,terra-virtua-kolect,omisego,wrapped-terra,bondly,dextrust,ampleforth,polkamarkets,curve-dao-token,degenerator,exnetwork-token,tether,yield,kyber-network,coti,injective-protocol,0x,superfarm,ankreth,surf-finance,renbtc,dmm-governance,hermez-network-token,rally-2,yfdai-finance,fractal,axie-infinity,enjincoin,yield-app,duckdaodime,rarible,amp-token,fsw-token,binance-usd,aave-dai-v1,aave-tusd-v1,aave-usdc-v1,aave-usdt-v1,aave-susd-v1,aave-bat-v1,aave-eth-v1,aave-link-v1,aave-knc-v1,aave-mkr-v1,aave-mana-v1,aave-zrx-v1,aave-snx-v1,aave-wbtc-v1,aave-busd-v1,aave-enj-v1,aave-ren-v1,ayfi,aave-usdt,aave-wbtc,aave-zrx,aave-bat,aave-busd,aave-dai,aave-enj,aave-knc,aave-link,aave-mana,aave-mkr,aave-ren,aave-snx,aave-susd,aave-tusd,aave-usdc,stake-dao,cope,cope,mango-market-caps,rope-token,media-network,step-finance,solanium,samoyedcoin,panda-coin,star-atlas,star-atlas-dao,soldoge,synthetify-token,moonlana,solape-token,woof-token,mercurial,lotto,bole-token,apyswap,shibaverse-token,shibaverse-token,solfarm,ardcoin,cheems,cato,ninja-protocol,boring-protocol,dexlab,grape-2,apexit-finance,black-label,orca,renbtc,renbch,rendoge,renzec,sail,aldrin,oxbull-solana,fabric,naxar,space-hamster,gu,liq-protocol,cropperfinance,solrise-finance,jet,cheesesoda-token,only1,terrausd,orbs,solberry,coin98,saber,huobi-btc,husd,hapi,larix,msol,mim,port-finance,jpyc,mango-markets,solanasail-governance-token,parrot-usd,parrot-protocol,sunny-aggregator,cyclos,lido-staked-ether,million,million,shapeshift-fox-token,ashera,balisari,solminter,tether,usd-coin,renfil,bitspawn,socean-staked-sol,agronomist,polyplay,allbridge,binance-usd,weth,tether,usd-coin,multi-collateral-dai,celo-dollar,chihuahuasol,chronologic,ftx-token,matrixetf,solblank,marinade,wrapped-conceal,graviton,dogelana,usd-coin,bitcoin,solana,ftx-token,ethereum,usd-coin,tether,dai,himalayan-cat-coin,frakt-token,tether,usd-coin,multi-collateral-dai,wrapped-bitcoin,avalanche,aurory,matrixetf,lizard-token,cave,ftx-token,terra-usd,weth,serum,terra-luna,husd,binance-usd,frax,huobi-btc,usdk,sushi,uniswap,wbnb,chainlink,pax-gold,hxro,swipe,frax-share,celsius-network-token,cream,usd-coin,wrapped-bitcoin,tether,floof,baby-samo-coin,solend,lunachow,lunachow,biconomy-exchange-token,ariadne,solana,invictus,wrapped-bitcoin,polygon,polygon,binance-usd,the-4th-pillar,genopets,safe-coin-2&vs_currencies=usd\",{\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING CG DATA!\");\n      return null;\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  //Get Prices RPC\n  const fetchLegacyPriceList = async () => {\n    const response = await fetch(\"https://price-api.sonar.watch/prices\", {\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING SW DATA!\");\n      return [];\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  const fetchTokenMap = async () => {\n    let tokens = await new TokenListProvider().resolve();\n    const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n\n    let tokenMap = tokenList.reduce((map, item) => {\n      map.set(item.address, item);\n      return map;\n    }, new Map());\n\n    return tokenMap;\n  }\n\n  //Get Porfolio\n  const getBalances = async () => {\n    if (!loading){\n      \n      setSuccess(false);\n      setLoading(true);\n      \n      //let [portfolio, staked, sol, priceData, tokenMap, pairsDataRaydium] = await Promise.all([fetchBalances(), fetchStakedRaydium(), fetchSOLBalance(), fetchPriceList(), fetchTokenMap(), fetchPairsRaydium()]);\n      let [portfolio, tokenMap] = await Promise.all([fetchBalances(), fetchTokenMap()]);\n      \n      // first load a skeleton of the portfolio\n      // then fetch cg\n      let [cgPriceData] = await Promise.all([fetchCoinGeckoPriceList()]);\n\n      // finally check farms (this can break so lets split)\n      let [sol, newPriceData] = await Promise.all([fetchSOLBalance(), fetchNSWPriceList()]);\n      \n      setInitNewPriceData(newPriceData);\n      setInitPortfolio(portfolio);\n      setInitCGPriceData(cgPriceData);\n      setTokenMap(tokenMap);\n      \n      // we need to now first get portfolio \n      // then load a skeleton (without positions)\n      // then load positions from fetched data from cg or other source\n      // then loa\n\n      let legacyPriceData = [];\n      //let [newPriceData] = [null];\n      \n      let other_stakes = [];\n      const tmint = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\n      const grapesymbol = 'grape-2';\n      \n      const smint = 'So11111111111111111111111111111111111111112';\n      const solanasymbol = 'solana';\n\n      let grapeTokenReference = null;\n      let solTokenReference = null;\n      \n      let priceData = [];\n\n      if (!newPriceData){\n        [legacyPriceData] = await Promise.all([fetchLegacyPriceList()]);\n        //[newPriceData] = await Promise.all([fetchCoinGeckoPriceList()]);\n        \n        //const newPriceDataResponse = await newPriceData;\n        //   console.log(\"DATA: \"+JSON.stringify(newPriceData.prices));\n        \n        if (!legacyPriceData)\n          console.log(\"NO DATA\");\n      }\n      // check which data we have loaded so we can parse accordingly\n\n      if (!newPriceData){ // reverting to legacy\n        grapeTokenReference = legacyPriceData.find(grapeTokenReference => grapeTokenReference.mint === tmint);\n        grapeTokenReference = grapeTokenReference && grapeTokenReference.price;\n        solTokenReference = legacyPriceData.find(solTokenReference => solTokenReference.mint === smint);\n        solTokenReference = solTokenReference && solTokenReference.price;\n        priceData = legacyPriceData;\n      }else {\n      \n        if (newPriceData.prices.hasOwnProperty(tmint))\n          grapeTokenReference = newPriceData.prices[tmint].value;\n\n        if (newPriceData.prices.hasOwnProperty(smint))\n          solTokenReference = newPriceData.prices[smint].value;\n\n      }\n      \n      setTickerTimestamp((new Date()).toLocaleString());\n\n      let collectibles = [];\n\n      // TULIP POOL: \n      // ?? fhA1P91Hk3K689GJcvP9pEAjPC2RmeLdyPZzqSyBwsh balance = 1 ??\n      // ?? EorFh8siFyLF1QTZ7cCXQaPGqyo7eb4SAgKtRH8Jcxjd??\n      // ?? A8ZYmnZ1vwxUa4wpJVUaJgegsuTEz5TKy5CiJXffvmpt ??\n\n      //console.log(\"Portfolio HERE: \"+JSON.stringify(portfolio));\n      \n      portfolio = portfolio.map((token) => {\n        let mint = token.account.data.parsed.info.mint;\n        let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n        let tmapitem = mint && tokenMap.get(mint);\n        let price = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd || 0;\n        let usd_24h_change = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd_24h_change || '';\n\n        // tokenInfo.extensions.coingeckoId\n\n        if (tmapitem){  \n          if (tmapitem.extensions?.coingeckoId){\n\n            //try{\n              //console.log(\"tmapitem: \"+JSON.stringify(tmapitem));\n              //console.log(\"pushing (\"+tmapitem.extensions.coingeckoId+\"): \" + JSON.stringify(cgPriceData[tmapitem.extensions.coingeckoId]?.usd));\n              //console.log(\"FOUND: \"+psymbol);\n              // IMPORTANT ADD CHECK TO GET PRICE FROM CG\n              priceData.push({\n                mint: mint,\n                symbol: tmapitem && tmapitem.symbol || 'Unknown',\n                logoURI: tmapitem && tmapitem.logoURI || '',\n                price: price,\n                usd_24h_change: usd_24h_change,\n                updatedAt: ''\n              }); \n\n            //}catch(e){console.log(\"ERR: \"+e)}\n          }\n          \n        }\n        //var price = 0;\n        //if (priceData)\n          //price = priceData.find(price => price.mint === token.account.data.parsed.info.mint);\n        \n        // Fetch collectibles\n        try{\n            (+token.account.data.parsed.info.tokenAmount.amount == 1) &&\n              (+token.account.data.parsed.info.tokenAmount.decimals == 0) && \n                  collectibles.push(token);    \n        } catch(e){console.log(e);}\n        \n\n        return {\n          mint: mint,\n          symbol: tmapitem && tmapitem.symbol || 'Unknown',\n          coingeckoId: tmapitem && tmapitem?.extensions?.coingeckoId || '',\n          balance: balance,\n          price: price && price,\n          value: price && price * balance,\n          tokenInfo: mint && tokenMap.get(mint),\n          usd_24h_change: usd_24h_change\n        };\n        \n      }).filter((token) => {\n        return (token.balance > 0) && (token.price > 0) && typeof token.balance !== \"undefined\";\n      });\n      \n      if (sol){ // use sol calc for balance\n          sol = parseFloat(new TokenAmount(sol, 9).format());\n          const mint = 'So11111111111111111111111111111111111111112';\n          \n          //var price = priceData.find(price => price.mint === mint);\n          //price = price && price.price;\n          let tokenInfo = tokenMap.get(mint);\n          tokenInfo.name = \"SOL\";\n\n          let tmapitem = mint && tokenMap.get(mint);\n          let price = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd || 0;\n          let usd_24h_change = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd_24h_change || '';\n\n          portfolio.push({\n              mint: mint,\n              balance: sol,\n              price,\n              value: price * sol,\n              tokenInfo: tokenInfo,\n              usd_24h_change: usd_24h_change\n          });\n      }\n\n      portfolio = portfolio.sort(function(a, b) {\n          return b.value - a.value;\n      });\n\n      \n      setSuccess(true);\n      \n      setGrapeTicker({\n        grapeTokenReference\n      })\n      setSolTicker({\n        solTokenReference\n      })\n      \n      setPorfolioBalances({\n          portfolio,\n          //staked,\n          collectibles\n      });\n      \n      //console.log(\"2. PORTFOLIO: \"+JSON.stringify(portfolio));\n      //console.log(\"2. STAKED: \"+JSON.stringify(staked));\n      //console.log(\"2. COLLECTIBLES: \"+JSON.stringify(collectibles));\n\n      setLoading(false);\n      \n    } else{\n      return (\n        <Grid item xs={12} md={8} lg={9}>\n          <Paper class=\"grape-paper-background\">\n            <Paper\n              class=\"grape-paper\"\n              sx={{\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: 240,\n              }}\n            >\n              <Box sx={{ p:1, display: 'flex', alignItems: 'center' }}>\n                <Skeleton />\n              </Box>\n            </Paper>\n          </Paper>\n        </Grid>\n      );\n    }\n  };\n\n  //Get Balances\n  let total = 0;\n  let portfolioTotal = 0; \n  let portfolioChange = 0; \n  let portfolioPercentageChange = 0; \n  let stakedTotal = 0;\n\n  const handleDeleteChange = () => {\n\n  };\n\n  if(!portfolioPositions){\n    //console.log(\"Getting balances...\");\n    if (session.publicKey)\n      getBalances();\n    return (\n      <React.Fragment>\n        <Grid item xs={12} md={12} lg={12}>\n          <Paper class=\"grape-paper-background\">\n            <Paper\n              class=\"grape-paper\"\n              sx={{\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: 240,\n              }}\n            >\n              <Box sx={{ p:1, width: \"100%\" }}>\n                <Skeleton\n                  animation=\"wave\"\n                  width=\"25%\"\n                />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 1 }} />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 0 }} />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 0 }} />\n              </Box>\n            </Paper>\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }else{   \n    portfolioTotal = portfolioPositions.portfolio.reduce((acc, token) => {\n      return acc + token.value;\n    }, 0);\n\n    portfolioChange = portfolioPositions.portfolio.reduce((acc, token) => {\n      // change for the token value in %\n      // see what the change was\n      //let change = token.usd_24h_change; // \n      let change_amount = token.value * (1*token.usd_24h_change/100);// calculate change\n      \n      return acc + change_amount;\n    }, 0);\n\n    // let percentage_change = change_amount/token.value;\n    portfolioPercentageChange = portfolioChange / portfolioTotal * 100;\n\n    total = portfolioTotal;\n  }\n  \n  return (\n      <React.Fragment>\n        <Grid item xs={12} md={12} lg={12}>\n          <Paper class=\"grape-paper-background\">\n            <Box\n              class=\"grape-paper\"\n              sx={{\n                //minHeight: 240,\n              }}\n            >\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <Box class=\"grape-dashboard-component-header\" sx={{ m: 0, position: 'relative' }}>\n                  <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                    HOLDINGS\n                  </Typography>\n                </Box>\n                <Box sx={{ m: 0, position: 'relative' }}>\n                <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ ml: 1, position: 'relative'}}>\n                  <Button size=\"small\" variant=\"text\" value=\"Refresh\" onClick={getBalances} disabled={loading}>\n                    <RefreshIcon sx={{fontSize:16}} />\n                  </Button>\n                  {loading && (\n                    <CircularProgress \n                      size={18} \n                      color=\"inherit\"\n                      sx={{\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        marginTop: '-8px',\n                        marginLeft: '-9px',\n                      }}/>\n                  )}\n                  </Typography>\n                      \n                </Box>\n              </Box>\n              <ContributeTable balances={portfolioPositions.portfolio}/>\n            </Box>\n          </Paper>\n        </Grid>\n        \n      </React.Fragment>\n  );\n};\n","/Users/kirk/Solana/grape-dashboard/src/views/Portfolio/Portfolio.jsx",["641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677"],"import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\nimport { getProfilePicture } from '@solflare-wallet/pfp';\n\nimport { useConnection } from '@solana/wallet-adapter-react';\n\nimport{\n  Typography,\n  Paper,\n  Grid,\n  Box,\n  Divider,\n  Chip,\n  Tab,\n  Tabs,\n  Button,\n  Skeleton,\n  Tooltip,\n  Avatar,\n} from '@mui/material/'\n\nimport PropTypes from 'prop-types';\n\nimport { useSession } from \"../../contexts/session\";\nimport Summary from '../Summary/Summary';\nimport PortfolioTable from './PortfolioTable';\nimport { struct } from 'buffer-layout';\nimport { publicKey, u128, u64 } from '@project-serum/borsh'\nimport { TokenAmount, lt } from '../../utils/token/safe-math';\n\n//import { useTheme } from '@mui/material/styles';\nimport {PublicKey} from '@solana/web3.js';\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\nimport { GRAPE_RPC_ENDPOINT } from '../../components/Tools/constants';\n\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport ImageIcon from '@mui/icons-material/Image';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport GrapeIcon from '../../components/StaticIcons/GrapeIcon';\nimport SolIcon from '../../components/StaticIcons/SolIcon';\nimport SolCurrencyIcon from '../../components/StaticIcons/SolCurrencyIcon';\n\nimport { FarmsView } from \"../\";\n\n  const USER_STAKE_INFO_ACCOUNT_LAYOUT = struct([\n    u64('state'),\n    publicKey('poolId'),\n    publicKey('stakerOwner'),\n    u64('depositBalance'),\n    u64('rewardDebt')\n  ])\n\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nexport const PortfolioView = () => {\n  const [initPortfolio, setInitPortfolio] = useState(null);\n  const [initCGPriceData, setInitCGPriceData] = useState(null);\n  const [initNewPriceData, setInitNewPriceData] = useState(null);\n  const [portfolioPositions, setPorfolioBalances] = useState(null);\n  const [tokenMap, setTokenMap] = useState(new Map());\n  const { session, setSession } = useSession();\n  const [grapeTicker, setGrapeTicker] = useState(null);\n  const [solTicker, setSolTicker] = useState(null);\n  const [tstamp, setTickerTimestamp] = useState(null);\n  const [value, setTabValue] = React.useState(0);\n  const [profilePictureUrl, setProfilePicutureUrl] = React.useState(null);\n  const [hasProfilePicture, setHasProfilePicture] = React.useState(false);\n  const { connection } = useConnection();\n\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [array, setArray] = useState([]);\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  //const connection = new Connection(url, \"singleGossip\");\n  //const orca = getOrca(connection);\n  //const owner: Keypair = getKeyPair();\n\n  //RAYDIUM: /logos/platforms/raydium.png\n  //SOLFARM: /logos/platforms/solfarm.png\n  //ORCA: /logos/platforms/orca.png\n\n  //Get Balances RPC\n  const fetchStakedRaydium = async () => {\n    const body = {\n        method: \"getProgramAccounts\",\n        //method: \"getMultipleAccountsInfo\",\n        jsonrpc: \"2.0\",\n        params: [\n            \"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\",\n            //\"97q89hnoKwqcynvwXcj83YqfqUBuCm4A8f2zHeV6bfZg\", ORCA/GRAPE\n            //session.publicKey\n            //\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\", // raydium stakes\n            {\"commitment\":\"confirmed\",\"filters\":[{\"memcmp\":{\"offset\":40,\"bytes\":session.publicKey}}],\"encoding\":\"base64\"}\n            //{\"connection\":\"Connection\",\"publicKeys\": [session.publicKey]}\n        ],\n        id: \"84203270-a3eb-4812-96d7-0a3c40c87a88\"\n      };\n      \n      \n      const response = await fetch(GRAPE_RPC_ENDPOINT, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      const json = await response.json();\n      let decoded = json.result.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n        publicKey: new PublicKey(pubkey),\n        accountInfo: {\n          data: Buffer.from(data[0], 'base64'),\n          executable,\n          owner: new PublicKey(owner),\n          lamports\n        }}));\n\n        return decoded;\n  }\n\n  const fetchPairsSolFarm = async () => {\n    const response = await fetch(\"https://api.raydium.io/pairs\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchPairsOrca = async () => {\n    // ORCA token:\n    // orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE\n    // ORCA pool:\n    // 97q89hnoKwqcynvwXcj83YqfqUBuCm4A8f2zHeV6bfZg\n\n    /* CONSIDERING THEIR API:\n    const connection = new Connection(url, \"singleGossip\");\n    const orca = getOrca(connection);\n    \n    // Get an instance of the ETH-USDC orca pool\n    let pool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n\n    // Get the number of ETH-USDC LP tokens in your wallet\n    let grapeUsdcLPBalance = await pool.getLPBalance(owner.publicKey);\n    // Get the total supply of ETH-USDC LP tokens\n    let grapeUsdcLPSupply = await pool.getLPSupply();\n    \n    */\n    const response = await fetch(\"https://api.orca.so/allPools\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchPairsRaydium = async () => {\n    const response = await fetch(\"https://api.raydium.io/pairs\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchAdditionalFarmPools = async () => {\n\n    // get Orca (we should function this out though)\n    const response = await fetch(\"https://api.orca.so/allPools\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    return json;\n  }\n\n  const fetchBalances = async () => {\n    const body = {\n      method: \"getTokenAccountsByOwner\",\n      jsonrpc: \"2.0\",\n      params: [\n        // Get the public key of the account you want the balance for.\n        session.publicKey,\n        { programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" },\n        { encoding: \"jsonParsed\", commitment: \"processed\" },\n      ],\n      id: \"35f0036a-3801-4485-b573-2bf29a7c77d2\",\n    };\n\n    //try{\n      const response = await fetch(GRAPE_RPC_ENDPOINT, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n      const json = await response.json();\n      const resultValues = json.result.value\n      return resultValues;\n  };\n\n  const fetchSOLBalance = async () => {\n    const body = {\n      method: \"getBalance\",\n      jsonrpc: \"2.0\",\n      params: [\n        // Get the public key of the account you want the balance for.\n        session.publicKey\n      ],\n      id: \"35f0036a-3801-4485-b573-2bf29a7c77d3\",\n    };\n\n    const response = await fetch(GRAPE_RPC_ENDPOINT, {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const json = await response.json();\n    const resultValues = json.result.value;\n    return resultValues;\n  };\n\n  //Get Prices RPC\n  const fetchNSWPriceList = async () => {\n    const response = await fetch(\"https://api.sonar.watch/latest\", {\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING CG DATA!\");\n      return null;\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  //Get Prices RPC\n  const fetchCoinGeckoPriceList = async () => {\n    const response = await fetch(\"https://api.coingecko.com/api/v3/simple/price?include_24hr_change=true&ids=solana,kitty-solana,astrapad,buff-samo,solana-inu,wipemyass,almond,swole-doge,oogi,solex-finance,bamboo-coin,solum,solberg,sola-token,solana,usd-coin,everid,impossible-finance,investin,bitcoin,ethereum,yearn-finance,chainlink,ripple,tether,sushi,aleph,swipe,hedget,cream-2,upbots,helium,frontier-token,akropolis,hxro,uniswap,serum,ftx-token,megaserum,usd-coin,tomochain,karma-dao,lua-token,math,keep-network,swag-finance,celsius-degree-token,reserve-rights-token,1inch,the-graph,compound-coin,pax-gold,strong,bonfida,kin,maps,oxygen,brz,tether,xmark,raydium,bitsong,3x-short-eos-token,3x-long-eos-token,3x-short-bnb-token,3x-long-bnb-token,3x-long-bitcoin-sv-token,3x-short-bitcoin-sv-token,3x-short-litecoin-token,3x-long-litecoin-token,3x-long-bitcoin-token,3x-short-bitcoin-token,3x-short-bitcoin-cash-token,3x-long-bitcoin-cash-token,3x-long-ethereum-token,3x-short-ethereum-token,3x-long-altcoin-index-token,3x-short-altcoin-index-token,3x-long-shitcoin-index-token,3x-short-shitcoin-index-token,3x-long-midcap-index-token,3x-short-midcap-index-token,3x-short-chainlink-token,3x-long-chainlink-token,3x-long-xrp-token,3x-short-xrp-token,1x-long-btc-implied-volatility-token,1x-short-btc-implied-volatility,aave,serum-ecosystem-token,holy-trinity,bilira,3x-long-dogecoin-token,perpetual-protocol,weth,coin-capsule,ftx-token,true-usd,tokenlon,allianceblock,skale,unlend-finance,orion-protocol,sparkpoint,uma,smartkey,mirror-protocol,growth-defi,xdai-stake,yearn-finance,basic-attention-token,basic-attention-token,decentraland,xio,unilayer,unimex-network,1inch,armor,armor-nxm,defipulse-index,deltahub-community,kira-network,energy-web-token,cryptocurrency-top-10-tokens-index,audius,vesper-finance,keep3rv1,lead-token,uniswap,wrapped-bitcoin,union-protocol-governance-token,unisocks,idextools,hex,cream-2,yfimobi,zeroswap,wrapped-anatha,ramp,parsiq,smooth-love-potion,the-sandbox,concentrated-voting-power,republic-protocol,sora,funfair,pickle-finance,pax-gold,quant-network,oraichain-token,truefi,mcdex,nucypher,razor-network,chainlink,unfederalreserve,nusd,hegic,xfinance,dextf,iexec-rlc,cvault-finance,cyberfi,wise-token11,gnosis,poolz-finance,dai,sushi,fyooz,quiverx,unitrade,bird-money,axion,bridge-mutual,dynamite,bitberry-token,waxe,matic-network,robonomics-network,aave,ethlend,polkastarter,unibright,dia-data,frax,keep-network,reserve-rights-token,88mph,paid-network,swipe,request-network,whale,kleros,krown,apy-finance,ocean-protocol,shopping-io,binance-wrapped-btc,unistake,maker,harvest-finance,usd-coin,aragon,pundi-x,redfox-labs-2,meta,rubic,noia-network,celsius-degree-token,crowns,option-room,yield-optimization-platform,lgcy-network,rio-defi,mahadao,rocket-pool,nexo,saffron-finance,stabilize,balancer,band-protocol,swapfolio,loopring,perpetual-protocol,compound-governance-token,havven,dlp-duck-token,chain-games,the-graph,rootkit,trustswap,terra-virtua-kolect,omisego,wrapped-terra,bondly,dextrust,ampleforth,polkamarkets,curve-dao-token,degenerator,exnetwork-token,tether,yield,kyber-network,coti,injective-protocol,0x,superfarm,ankreth,surf-finance,renbtc,dmm-governance,hermez-network-token,rally-2,yfdai-finance,fractal,axie-infinity,enjincoin,yield-app,duckdaodime,rarible,amp-token,fsw-token,binance-usd,aave-dai-v1,aave-tusd-v1,aave-usdc-v1,aave-usdt-v1,aave-susd-v1,aave-bat-v1,aave-eth-v1,aave-link-v1,aave-knc-v1,aave-mkr-v1,aave-mana-v1,aave-zrx-v1,aave-snx-v1,aave-wbtc-v1,aave-busd-v1,aave-enj-v1,aave-ren-v1,ayfi,aave-usdt,aave-wbtc,aave-zrx,aave-bat,aave-busd,aave-dai,aave-enj,aave-knc,aave-link,aave-mana,aave-mkr,aave-ren,aave-snx,aave-susd,aave-tusd,aave-usdc,stake-dao,cope,cope,mango-market-caps,rope-token,media-network,step-finance,solanium,samoyedcoin,panda-coin,star-atlas,star-atlas-dao,soldoge,synthetify-token,moonlana,solape-token,woof-token,mercurial,lotto,bole-token,apyswap,shibaverse-token,shibaverse-token,solfarm,ardcoin,cheems,cato,ninja-protocol,boring-protocol,dexlab,grape-2,apexit-finance,black-label,orca,renbtc,renbch,rendoge,renzec,sail,aldrin,oxbull-solana,fabric,naxar,space-hamster,gu,liq-protocol,cropperfinance,solrise-finance,jet,cheesesoda-token,only1,terrausd,orbs,solberry,coin98,saber,huobi-btc,husd,hapi,larix,msol,mim,port-finance,jpyc,mango-markets,solanasail-governance-token,parrot-usd,parrot-protocol,sunny-aggregator,cyclos,lido-staked-ether,million,million,shapeshift-fox-token,ashera,balisari,solminter,tether,usd-coin,renfil,bitspawn,socean-staked-sol,agronomist,polyplay,allbridge,binance-usd,weth,tether,usd-coin,multi-collateral-dai,celo-dollar,chihuahuasol,chronologic,ftx-token,matrixetf,solblank,marinade,wrapped-conceal,graviton,dogelana,usd-coin,bitcoin,solana,ftx-token,ethereum,usd-coin,tether,dai,himalayan-cat-coin,frakt-token,tether,usd-coin,multi-collateral-dai,wrapped-bitcoin,avalanche,aurory,matrixetf,lizard-token,cave,ftx-token,terra-usd,weth,serum,terra-luna,husd,binance-usd,frax,huobi-btc,usdk,sushi,uniswap,wbnb,chainlink,pax-gold,hxro,swipe,frax-share,celsius-network-token,cream,usd-coin,wrapped-bitcoin,tether,floof,baby-samo-coin,solend,lunachow,lunachow,biconomy-exchange-token,ariadne,solana,invictus,wrapped-bitcoin,polygon,polygon,binance-usd,the-4th-pillar,genopets,safe-coin-2&vs_currencies=usd\",{\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING CG DATA!\");\n      return null;\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  //Get Prices RPC\n  const fetchLegacyPriceList = async () => {\n    const response = await fetch(\"https://price-api.sonar.watch/prices\", {\n      method: \"GET\",\n      //body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).catch((error)=>{\n      console.log(\"ERROR GETTING SW DATA!\");\n      return [];\n    });\n    \n    try{\n      const json = await response.json();\n      return json;\n    }catch(e){return null;}\n  }\n\n  const fetchTokenMap = async () => {\n    let tokens = await new TokenListProvider().resolve();\n    const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n\n    let tokenMap = tokenList.reduce((map, item) => {\n      map.set(item.address, item);\n      return map;\n    }, new Map());\n\n    return tokenMap;\n  }\n\n  //Get Porfolio\n  const getBalances = async () => {\n    if (!loading){\n      \n      setSuccess(false);\n      setLoading(true);\n      \n      //let [portfolio, staked, sol, priceData, tokenMap, pairsDataRaydium] = await Promise.all([fetchBalances(), fetchStakedRaydium(), fetchSOLBalance(), fetchPriceList(), fetchTokenMap(), fetchPairsRaydium()]);\n      let [portfolio, tokenMap] = await Promise.all([fetchBalances(), fetchTokenMap()]);\n      \n      // first load a skeleton of the portfolio\n      // then fetch cg\n      let [cgPriceData] = await Promise.all([fetchCoinGeckoPriceList()]);\n\n      // finally check farms (this can break so lets split)\n      let [sol, newPriceData] = await Promise.all([fetchSOLBalance(), fetchNSWPriceList()]);\n      \n      setInitNewPriceData(newPriceData);\n      setInitPortfolio(portfolio);\n      setInitCGPriceData(cgPriceData);\n      setTokenMap(tokenMap);\n      \n      // we need to now first get portfolio \n      // then load a skeleton (without positions)\n      // then load positions from fetched data from cg or other source\n      // then loa\n\n      let legacyPriceData = [];\n      //let [newPriceData] = [null];\n      \n      let other_stakes = [];\n      const tmint = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\n      const grapesymbol = 'grape-2';\n      \n      const smint = 'So11111111111111111111111111111111111111112';\n      const solanasymbol = 'solana';\n\n      let grapeTokenReference = null;\n      let solTokenReference = null;\n      \n      let priceData = [];\n\n      if (!newPriceData){\n        [legacyPriceData] = await Promise.all([fetchLegacyPriceList()]);\n        \n        if (!legacyPriceData)\n          console.log(\"NO DATA\");\n      }\n      // check which data we have loaded so we can parse accordingly\n\n      if (!newPriceData){ // reverting to legacy\n        grapeTokenReference = legacyPriceData.find(grapeTokenReference => grapeTokenReference.mint === tmint);\n        grapeTokenReference = grapeTokenReference && grapeTokenReference.price;\n        solTokenReference = legacyPriceData.find(solTokenReference => solTokenReference.mint === smint);\n        solTokenReference = solTokenReference && solTokenReference.price;\n        priceData = legacyPriceData;\n      }else {\n      \n        if (newPriceData.prices.hasOwnProperty(tmint))\n          grapeTokenReference = newPriceData.prices[tmint].value;\n\n        if (newPriceData.prices.hasOwnProperty(smint))\n          solTokenReference = newPriceData.prices[smint].value;\n\n      }\n      \n      setTickerTimestamp((new Date()).toLocaleString());\n\n      let collectibles = [];\n\n      portfolio = portfolio.map((token) => {\n        let mint = token.account.data.parsed.info.mint;\n        let balance = token.account.data.parsed.info.tokenAmount.uiAmount;\n        let tmapitem = mint && tokenMap.get(mint);\n        let price = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd || 0;\n        let usd_24h_change = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd_24h_change || '';\n\n        // tokenInfo.extensions.coingeckoId\n        if (tmapitem){  \n          if (tmapitem.extensions?.coingeckoId){\n\n            //try{\n              //console.log(\"tmapitem: \"+JSON.stringify(tmapitem));\n              //console.log(\"pushing (\"+tmapitem.extensions.coingeckoId+\"): \" + JSON.stringify(cgPriceData[tmapitem.extensions.coingeckoId]?.usd));\n              //console.log(\"FOUND: \"+psymbol);\n              // IMPORTANT ADD CHECK TO GET PRICE FROM CG\n              priceData.push({\n                address: token.pubkey,\n                decimals: token.decimals,\n                mint: mint,\n                symbol: tmapitem && tmapitem.symbol || 'Unknown',\n                logoURI: tmapitem && tmapitem.logoURI || '',\n                price: price,\n                usd_24h_change: usd_24h_change,\n                updatedAt: ''\n              }); \n\n            //}catch(e){console.log(\"ERR: \"+e)}\n          }\n          \n        }\n        //var price = 0;\n        //if (priceData)\n          //price = priceData.find(price => price.mint === token.account.data.parsed.info.mint);\n        \n        // Fetch collectibles\n        try{\n            (+token.account.data.parsed.info.tokenAmount.amount >= 1) &&\n              (+token.account.data.parsed.info.tokenAmount.decimals === 0) && \n                  collectibles.push(token);    \n        } catch(e){console.log(e);}\n        \n        \n\n        return {\n          address: token.pubkey,\n          decimals: token.decimals,\n          mint: mint,\n          symbol: tmapitem && tmapitem.symbol || 'Unknown',\n          coingeckoId: tmapitem && tmapitem?.extensions?.coingeckoId || '',\n          balance: balance,\n          price: price && price,\n          value: price && price * balance,\n          tokenInfo: mint && tokenMap.get(mint),\n          usd_24h_change: usd_24h_change\n        };\n        \n      }).filter((token) => {\n        return (token.balance > 1) &&  (token.decimals !== 0) && typeof token.balance !== \"undefined\";\n      });\n      \n      if (sol){ // use sol calc for balance\n          sol = parseFloat(new TokenAmount(sol, 9).format());\n          const mint = 'So11111111111111111111111111111111111111112';\n          \n          //var price = priceData.find(price => price.mint === mint);\n          //price = price && price.price;\n          let tokenInfo = tokenMap.get(mint);\n          tokenInfo.name = \"SOL\";\n\n          let tmapitem = mint && tokenMap.get(mint);\n          let price = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd || 0;\n          let usd_24h_change = (tmapitem && tmapitem.extensions?.coingeckoId) && cgPriceData[tmapitem.extensions.coingeckoId]?.usd_24h_change || '';\n\n          portfolio.push({\n              mint: mint,\n              balance: sol,\n              price,\n              value: price * sol,\n              tokenInfo: tokenInfo,\n              usd_24h_change: usd_24h_change\n          });\n      }\n\n      portfolio = portfolio.sort(function(a, b) {\n          return b.value - a.value;\n      });\n      \n      setSuccess(true);\n      \n      setGrapeTicker({\n        grapeTokenReference\n      })\n      setSolTicker({\n        solTokenReference\n      })\n      \n      setPorfolioBalances({\n          portfolio,\n          //staked,\n          collectibles\n      });\n\n      const { isAvailable, url } = await getProfilePicture(connection, new PublicKey(session.publicKey), {resize:'256'});\n      setProfilePicutureUrl(url);\n      setHasProfilePicture(isAvailable);\n\n      //console.log(\"2. PORTFOLIO: \"+JSON.stringify(portfolio));\n      //console.log(\"2. STAKED: \"+JSON.stringify(staked));\n      //console.log(\"2. COLLECTIBLES: \"+JSON.stringify(collectibles));\n\n      setLoading(false);\n      \n    } else{\n      return (\n        <Grid item xs={12} md={8} lg={9}>\n          <Paper class=\"grape-paper-background\">\n            <Paper\n              class=\"grape-paper\"\n              sx={{\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: 240,\n              }}\n            >\n              <Box sx={{ p:1, display: 'flex', alignItems: 'center' }}>\n                <Skeleton />\n              </Box>\n            </Paper>\n          </Paper>\n        </Grid>\n      );\n    }\n  };\n\n  //Get Balances\n  let total = 0;\n  let portfolioTotal = 0; \n  let portfolioChange = 0; \n  let portfolioPercentageChange = 0; \n  let stakedTotal = 0;\n\n  const handleDeleteChange = () => {\n\n  };\n\n  if(!portfolioPositions){\n    //console.log(\"Getting balances...\");\n    if (session.publicKey)\n      getBalances();\n    return (\n      <React.Fragment>\n        <Grid item xs={12} md={8} lg={9}>\n          <Paper class=\"grape-paper-background\">\n            <Paper\n              class=\"grape-paper\"\n              sx={{\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: 240,\n              }}\n            >\n              <Box sx={{ p:1, width: \"100%\" }}>\n                <Skeleton\n                  animation=\"wave\"\n                  width=\"25%\"\n                />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 1 }} />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 0 }} />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 0 }} />\n              </Box>\n            </Paper>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={4} lg={3}>\n          <Paper class=\"grape-paper-background\">\n            <Paper\n              class=\"grape-paper\"\n              sx={{\n                p: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                minHeight: 240,\n              }}\n            >\n              <Box sx={{ p:1, width: \"100%\" }}>\n                <Skeleton \n                  animation=\"wave\" \n                  width=\"20%\" />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 1 }} />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 0 }} />\n                <Skeleton \n                  animation=\"wave\"\n                  width=\"100%\" \n                  sx={{ mt: 0 }} />\n                </Box>\n            </Paper>\n\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }else{   \n    portfolioTotal = portfolioPositions.portfolio.reduce((acc, token) => {\n      return acc + token.value;\n    }, 0);\n\n    portfolioChange = portfolioPositions.portfolio.reduce((acc, token) => {\n      // change for the token value in %\n      // see what the change was\n      //let change = token.usd_24h_change; // \n      let change_amount = token.value * (1*token.usd_24h_change/100);// calculate change\n      \n      return acc + change_amount;\n    }, 0);\n\n    // let percentage_change = change_amount/token.value;\n    portfolioPercentageChange = portfolioChange / portfolioTotal * 100;\n\n    total = portfolioTotal;\n  }\n  \n  return (\n      <React.Fragment>\n        <Grid item xs={12} md={8} lg={9}>\n          <Paper class=\"grape-paper-background\">\n            <Box\n              class=\"grape-paper\"\n              sx={{\n                //minHeight: 240,\n              }}\n            >\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <Box class=\"grape-dashboard-component-header\" sx={{ m: 0, position: 'relative' }}>\n                  <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                    PORTFOLIO\n                  </Typography>\n                </Box>\n                <Box sx={{ m: 0, position: 'relative' }}>\n                <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ ml: 1, position: 'relative'}}>\n                  <Button size=\"small\" variant=\"text\" value=\"Refresh\" onClick={getBalances} disabled={loading}>\n                    <RefreshIcon sx={{fontSize:16}} />\n                  </Button>\n                  {loading && (\n                    <CircularProgress \n                      size={18} \n                      color=\"inherit\"\n                      sx={{\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        marginTop: '-8px',\n                        marginLeft: '-9px',\n                      }}/>\n                  )}\n                  </Typography>\n                      \n                </Box>\n              </Box>\n              <PortfolioTable balances={portfolioPositions.portfolio}/>\n            </Box>\n          </Paper>\n        </Grid>\n        \n        <Grid item xs={12} md={4} lg={3}>\n          <Paper class=\"grape-paper-background\">\n            <Box\n              class=\"grape-paper\"\n            >\n            \n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n              <Tabs value={value} onChange={handleTabChange} aria-label=\"basic tabs example\">\n                <Tab icon={<GrapeIcon />} aria-label=\"Grape\" {...a11yProps(0)} />\n                <Tab icon={<SolIcon />} aria-label=\"Solana\" {...a11yProps(1)} />\n              </Tabs>\n            </Box>\n            <TabPanel value={value} index={0}>\n              <Summary title=\"TICKER\" token={'grape'} subtitle={<GrapeIcon fontSize='12px' />} showtimestamp={true} tstamp={tstamp} calltoaction=\"\" hasrefresh={true} swaptoken={'grape'} portfolioPositions={portfolioPositions} tokenMap={tokenMap}>\n                <Grid container direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n                  <Grid item>\n                    $<PretifyCommaNumber number={parseFloat(grapeTicker.grapeTokenReference).toFixed(3)} />\n                  </Grid>\n                </Grid>\n              </Summary>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n              <Summary title=\"TICKER\" token={'sol'} subtitle={<SolCurrencyIcon fontSize='12px' />} showtimestamp={true} tstamp={tstamp} calltoaction=\"\" hasrefresh={true}>\n                <Grid container direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n                  <Grid item>\n                    $<PretifyCommaNumber number={parseFloat(solTicker.solTokenReference).toFixed(2)} />\n                  </Grid>\n                </Grid>\n              </Summary>\n            </TabPanel>\n        \n              {(+portfolioTotal > 0) && \n                <React.Fragment>\n                  <Divider sx={{mt:2}} />\n                  <Box sx={{mt:2}}>\n                    <Summary title=\"WALLET\" subtitle=\"SUMMARY\" showtimestamp={false} calltoaction=\"\" hasrefresh={false}>\n                      $<PretifyCommaNumber number={portfolioTotal.toFixed(2)} />\n                      {portfolioChange < 0 ?\n                        <>\n                          <Typography variant=\"subtitle2\" sx={{ flex: 1, color:\"#f00\", textAlign:\"center\"}}>\n                              <Tooltip title={`24h change $${portfolioChange.toFixed(2)}`}> \n                                <Chip color=\"error\" deleteIcon={<ArrowDownwardIcon />} onDelete={handleDeleteChange} label={`${portfolioPercentageChange.toFixed(2)}%`} size=\"small\" variant=\"outlined\"/>\n                              </Tooltip>\n                          </Typography>\n                        </>\n                      :\n                        <>\n                          <Typography color=\"text.secondary\" variant=\"subtitle2\" sx={{ flex: 1, textAlign:\"center\" }}>\n                            <Tooltip title={`24h change $${portfolioChange.toFixed(2)}`}>  \n                              <Chip color=\"success\" deleteIcon={<ArrowUpwardIcon />} onDelete={handleDeleteChange} label={`${portfolioPercentageChange.toFixed(2)}%`} size=\"small\" variant=\"outlined\"/>\n                            </Tooltip>\n                          </Typography>\n                        </>\n                      }\n                    </Summary>\n                    \n                  </Box>\n                  <Summary title=\"\" subtitle=\"\" showtimestamp={false} calltoaction=\"\" hasrefresh={false}>\n                      {(portfolioPositions.collectibles && portfolioPositions.collectibles.length > 0) &&\n                          <Grid item sx={{textAlign:\"center\"}}>\n                              <Button\n                                component=\"a\" href={`https://grape.art/profile?pkey=${session?.publicKey}`} target=\"_blank\"\n                                variant=\"outlined\" \n                                title=\"View Collection\"\n                                size=\"small\"\n                                >\n                                \n                                {(hasProfilePicture && profilePictureUrl) ?\n                                  <Avatar sx={{ width: 24, height: 24, mr:1 }} alt=\"Profile\" src={profilePictureUrl} />\n                                :\n                                  <AccountCircleIcon sx={{mr:1}}/>\n                                }\n                                \n                                {portfolioPositions.collectibles.length} {portfolioPositions.collectibles.length > 1 ? 'Collectibles' : 'Collectible'}\n                              </Button>\n                            \n                          </Grid>\n                        }\n                    </Summary>\n                </React.Fragment>\n              }\n                {/* (balances.staked && balances.staked.length) &&*/}\n\n              { /*(stakedTotal > 0) &&\n                <Box sx={{mt:2}}>\n                  <Summary title=\"STAKED\" subtitle=\"SUMMARY\" showtimestamp={false} calltoaction=\"\" hasrefresh={false}>{`$${+stakedTotal.toFixed(2)}`}</Summary>\n                </Box>\n              */  }\n              \n            </Box>\n          </Paper>\n        </Grid>\n        \n        <FarmsView portfolioPositions={portfolioPositions} tokenMap={tokenMap} initPortfolio={initPortfolio} initCGPriceData={initCGPriceData} initNewPriceData={initNewPriceData} />\n\n      </React.Fragment>\n  );\n};\n","/Users/kirk/Solana/grape-dashboard/src/views/Servers/Servers.jsx",["678","679","680","681","682","683","684","685","686","687"],"import * as React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { useSession } from \"../../contexts/session\";\nimport UserServer from '../../models/UserServer';\nimport TwitterFeed from '../Feed/TwitterFeed';\nimport PropTypes from 'prop-types';\nimport { visuallyHidden } from '@mui/utils';\nimport MUIDataTable from \"mui-datatables\";\n\nimport {\n  Grid,\n  Typography,\n  Collapse,\n  Button,\n  Tabs,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableContainer,\n  TableSortLabel,\n  TableRow,\n  TableFooter,\n  TablePagination,\n  Tooltip,\n  Paper,\n  Box,\n  Avatar,\n} from '@mui/material';\n\nimport { makeStyles, styled, alpha, useTheme } from '@mui/material/styles';\n\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';\nimport IconButton from '@mui/material/IconButton';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n  '& .MuiTable-root': {\n    background: 'none', \n  },\n  '& .MuiPaper-root': {\n    background: 'none', \n  },\n  '& .MuiToolbar-root': {\n    height:'44px',\n    minHeight:'44px!important'\n  },\n  '& .MuiTableRow-root': {\n    height: '10px', \n  },\n  '& .MuiAvatar-circular.MuiPaper-root': {\n    background: '#333', \n  },\n  '& .MuiTableCell-root.MuiTableCell-body': {\n    lineHeight:'1.25em',\n    padding:4\n  },\n  '& .MuiTableCell-root.MuiTableCell-head': {\n    lineHeight:'1.25em',\n    padding:4\n  },\n  '& .MuiTableCell-root': {\n    background: 'none', \n    borderBottom: '1px solid rgba(255,255,255,0.05)',\n  },\n}));\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\n// This method is created for cross-browser compatibility, if you don't\n// need to support IE11, you can use Array.prototype.sort() directly\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction TablePaginationActions(props) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n  \n  return (\n      <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n          <IconButton\n              onClick={handleFirstPageButtonClick}\n              disabled={page === 0}\n              aria-label=\"first page\"\n          >\n              {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n          </IconButton>\n          <IconButton\n              onClick={handleBackButtonClick}\n              disabled={page === 0}\n              aria-label=\"previous page\"\n          >\n              {theme.direction === \"rtl\" ? (\n                  <KeyboardArrowRight />\n              ) : (\n                  <KeyboardArrowLeft />\n              )}\n          </IconButton>\n          <IconButton\n              onClick={handleNextButtonClick}\n              disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n              aria-label=\"next page\"\n          >\n              {theme.direction === \"rtl\" ? (\n                  <KeyboardArrowLeft />\n              ) : (\n                  <KeyboardArrowRight />\n              )}\n          </IconButton>\n          <IconButton\n              onClick={handleLastPageButtonClick}\n              disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n              aria-label=\"last page\"\n          >\n              {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n          </IconButton>\n      </Box>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction ServerRow(props) {\n  const { token, index } = props;\n  const [open, setOpen] = React.useState(false);\n  const labelId = props.labelId;\n  const server = props.server;\n  const indexus = props.indexus;\n  const unregister = props.unregister;\n\n  return (\n      <React.Fragment>\n        <TableRow key={server.name} >\n          <TableCell align=\"left\">\n              <Avatar component={Paper} \n                  elevation={4}\n                  alt={server.name} \n                  src={`/server-logos/${server.logo}`}\n                  sx={{ width: 30, height: 30, bgcolor: \"#333\" }}\n              />\n          </TableCell>\n          <TableCell id={labelId}>\n            <Button color=\"secondary\" href={`${server.url}`} target=\"_blank\">{server.name}</Button>\n            {server?.twitter &&\n              <IconButton\n                  aria-label=\"expand row\"\n                  size=\"small\"\n                  onClick={() => setOpen(!open)}\n              >\n                  {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n              </IconButton>\n            }\n          </TableCell>\n          <TableCell align=\"right\">\n            <Tooltip title={`Unregister ${server.name}`}><Button color=\"error\" size=\"small\" variant=\"outlined\" onClick={() => unregister(server.serverId, indexus)}><RemoveCircleOutlineIcon/></Button></Tooltip>\n          </TableCell>\n        </TableRow>\n        {server?.twitter &&\n          <TableRow>\n              <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                  <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                      <Box sx={{ margin: 1 }}>\n                          {/*\n                          <Typography variant=\"h6\" gutterBottom component=\"div\">\n                              Address\n                          </Typography>\n                          */}\n                          <Table size=\"small\" aria-label=\"purchases\">\n                              <TableHead>\n                                  <TableRow>\n                                      <TableCell align=\"center\" sx={{borderBottom:\"none\"}}>\n                                        Fetching {server.twitter}\n                                        <TwitterFeed title={`${server.name} Feed`} twitterhandle={server.twitter} twitterheight={400} twitterelements={2} componentTwitterFeed={false} />\n                                      </TableCell>\n                                  </TableRow>\n                              </TableHead>\n                          </Table>\n                      </Box>\n                  </Collapse>\n              </TableCell>\n          </TableRow>\n          }\n      </React.Fragment>\n  );\n}\n\nexport const ServersView = (props) => {\n  const [orderT1, setOrderT1] = React.useState('asc');\n  const [orderByT1, setOrderByT1] = React.useState('server.name');\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('server.name');\n  const [tab, setTab] = useState(0);\n  const { session, setSession } = useSession();\n  const [searched, setSearched] = useState('');\n  \n  const [servers, setServers] = useState([]);\n  const [userServers, setUserServers] = useState([]);\n\n  const [rowsPerPageT1, setRowsPerPageT1] = React.useState(5);\n  const [rowsPerPageT2, setRowsPerPageT2] = React.useState(10);\n  const [pageT1, setPageT1] = React.useState(0);\n  const [pageT2, setPageT2] = React.useState(0);\n  const emptyRowsT1 = rowsPerPageT1 - Math.min(rowsPerPageT1, userServers.length - pageT1 * rowsPerPageT1);\n  const emptyRowsT2 = rowsPerPageT2 - Math.min(rowsPerPageT2, servers.length - pageT2 * rowsPerPageT2);\n\n  const handleChangePageT1 = (event, newPage) => {\n    setPageT1(newPage);\n  };\n\n  const handleChangeRowsPerPageT1 = (event) => {\n    setRowsPerPageT1(parseInt(event.target.value, 10));\n    setPageT1(0);\n  };\n\n  const handleChangePageT2 = (event, newPage) => {\n    setPageT2(newPage);\n  };\n\n  const handleChangeRowsPerPageT2 = (event) => {\n    setRowsPerPageT2(parseInt(event.target.value, 10));\n    setPageT2(0);\n  };\n\n  const register = async (serverId) => {\n    //console.log(\"SESSION: \"+JSON.stringify(session))\n    //console.log(\"ServerId: \"+JSON.stringify(serverId))\n\n    let userServer = await UserServer.register(session, serverId);\n    session.userServers.push(userServer);\n    setSession(session);\n    setTab(0);\n  };\n\n  const unregister = async (serverId, index) => {\n    let response = await UserServer.unregister(session, serverId);\n    if (response) {\n      let userServers = [...session.userServers];\n      userServers.splice(index, 1);\n      session.userServers = userServers;\n      setSession(session);\n      setUserServers(userServers);\n      setServers(session.servers);\n    }\n  };\n\n  const handleChange = (_event, newValue) => {\n    setTab(newValue);\n  };\n\n  const handleRequestSortT1 = (event, property) => {\n    const isAsc = orderByT1 === property && orderT1 === 'asc';\n    setOrderT1(isAsc ? 'desc' : 'asc');\n    setOrderByT1(property);\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const createSortHandlerT1 = (property) => (event) => {\n    handleRequestSortT1(event, property);\n  };\n  const createSortHandler = (property) => (event) => {\n    handleRequestSort(event, property);\n  };\n\n  useEffect(() => {\n    let servers = session && session.servers;\n    const userServers = session && session.userServers;\n\n    if (servers && userServers) {\n      let userServerIds = new Map();\n\n      userServers.forEach(userServer => {\n        userServerIds.set(userServer.serverId, true);\n      });\n\n      let newServers = servers.map(server => {\n        server.registered = userServerIds.get(server.serverId) || false;\n\n        return server;\n      });\n\n      setServers(newServers);\n      setUserServers(userServers);\n    }\n\n  }, [session]);\n\n\n  const servercolumns = [\n    {\n      name:\"logo\",\n      label:\"Org Logo\",\n      options: {\n        filter: true,\n        sort: true,\n        display: false,\n        //customHeadRender: ()=>null\n       }\n    },\n    {\n      name:\"name\",\n      label:\"Org Name\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n       }\n    },\n    {\n      name:\"url\",\n      label:\"Org Url\",\n      options: {\n        filter: false,\n        sort: false,\n        display: false,\n       }\n    },\n    {\n      name: \"name\",\n      label:\"Name\",\n      options: {\n        filter: false,\n        sort: true,\n        customBodyRender: (value, tableMeta, updateValue) => {\n            //console.log(tableMeta.rowData, '......');\n            return (\n              <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item>\n                  <Avatar component={Paper} \n                      elevation={4}\n                      alt={tableMeta.rowData[1]}\n                      src={`/server-logos/${tableMeta.rowData[0]}`}\n                      sx={{ width: 30, height: 30, bgcolor: \"#333\", mr:1 }}\n                  />\n                </Grid>\n                <Grid item>\n                <Button color=\"secondary\" href={`${tableMeta.rowData[2]}`} target=\"_blank\">{tableMeta.rowData[1]}</Button>\n                </Grid>\n              </Grid>\n            );\n        }\n      }\n    },\n    {\n      name:\"serverId\",\n      label:\"Actions\",\n      options: {\n        filter: false,\n        sort: false,\n        align: \"right\",\n        customBodyRender: (value, tableMeta, updateValue) => {\n          return (\n            <Tooltip title={`Register ${tableMeta.rowData[1]}`}><Button color=\"primary\" size=\"small\" variant=\"contained\" onClick={() => register(value)}><AddCircleOutlineIcon /></Button></Tooltip>\n          )           \n        },\n        setCellProps: () => ({\n          align: \"right\"\n        }),\n        setCellHeaderProps: () => ({\n          align: \"right\"\n        })\n       }\n    }];\n  const serveroptions = {\n    responsive:\"scroll\",\n    selectableRows: false,\n    download:false,\n    print:false,\n    viewColumns:false,\n    filter:false\n  };\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} md={12} lg={12}>\n        <Paper class=\"grape-paper-background\">\n            <Box\n              class=\"grape-paper\"\n            >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Box class=\"grape-dashboard-component-header\" sx={{ m: 0, position: 'relative' }}>\n                <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                  SERVERS\n                </Typography>\n              </Box>\n            </Box>\n            <React.Fragment> \n              <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                <Tabs value={tab} onChange={handleChange} aria-label=\"Server Tabs\">\n                  <Tab label=\"Registered\" />\n                  <Tab label=\"All\" />\n                </Tabs>\n\n                {/*\n                <Search>\n                    <SearchIconWrapper>\n                    <SearchIcon />\n                    </SearchIconWrapper>\n                    <StyledInputBase\n                        placeholder=\"Search by Wallet\"\n                        //autoFocus\n                        autoComplete='off'\n                        margin=\"dense\"\n                        id=\"collection_wallet_id\"\n                        type=\"text\"\n                        value={walletPKId}\n                        onChange={(e) => requestSearch(e.target.value)}\n                        inputProps={{ 'aria-label': 'search' }}\n                        onKeyDown={(e) => {\n                            console.log(`Pressed keyCode ${e.key}`);\n                            if (e.key === 'Enter') {\n                                if (ValidateAddress(walletPKId)){\n                                    HandlePKSubmit(e);\n                                }\n                            }\n                        }}\n                    />\n                </Search>\n                */}\n              </Box>\n\n              {tab === 0 && \n                <React.Fragment>\n                  <TableContainer>\n                    <StyledTable sx={{ minWidth: 500 }} size=\"small\" aria-label=\"Servers Table\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell \n                              align=\"left\" \n                              sx={{ width: '1%' }}\n                              key={'name'}\n                              //align={headCell.numeric ? 'right' : 'left'}\n                              //padding={headCell.disablePadding ? 'none' : 'normal'}\n                              sortDirection={orderByT1 === 'name}' ? orderT1 : false}\n                            >\n                              <TableSortLabel\n                                active={orderByT1 === 'name'}\n                                direction={orderByT1 === 'name' ? orderT1 : 'asc'}\n                                onClick={createSortHandlerT1('name')}\n                              >\n                                <Typography variant=\"caption\">Name</Typography>\n                                {orderByT1 === 'name}' ? (\n                                  <Box component=\"span\" sx={visuallyHidden}>\n                                    {orderT1 === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                  </Box>\n                                ) : null}\n                              </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"left\" sx={{ width: '70%' }}></TableCell>\n                          <TableCell align=\"right\"><Typography variant=\"caption\">Actions</Typography></TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {(rowsPerPageT1 > 0\n                          ? \n                          stableSort(userServers, getComparator(orderT1, orderByT1)).slice(pageT1 * rowsPerPageT1, pageT1 * rowsPerPageT1 + rowsPerPageT1)\n                          //userServers.slice(pageT1 * rowsPerPageT1, pageT1 * rowsPerPageT1 + rowsPerPageT1)\n                          : userServers\n                        ).map((server,indexus) => {\n                          const labelId = `enhanced-table-checkbox-${indexus}`;\n                          return(\n                            <ServerRow server={server} indexus={indexus} labelId={labelId} unregister={unregister} />\n                          )})}\n                      {emptyRowsT1 > 0 && (\n                          <TableRow style={{ height: 53 * emptyRowsT1 }}>\n                              <TableCell colSpan={4} />\n                          </TableRow>\n                      )}  \n                      </TableBody>\n                      <TableFooter>\n                        <TableRow>\n                          <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, 50, 100]}\n                            colSpan={3}\n                            count={userServers.length}\n                            rowsPerPage={rowsPerPageT1}\n                            page={pageT1}\n                            SelectProps={{\n                              inputProps: {\n                                'aria-label': 'rows per page',\n                              },\n                              native: true,\n                            }}\n                            onPageChange={handleChangePageT1}\n                            onRowsPerPageChange={handleChangeRowsPerPageT1}\n                            ActionsComponent={TablePaginationActions}\n                          />\n                        </TableRow>\n                      </TableFooter>\n                    </StyledTable>\n                  </TableContainer>\n                </React.Fragment>\n                }\n                {tab === 1 && \n                  <StyledTable size=\"small\" aria-label=\"All Servers Table\">\n                    <MUIDataTable\n                      title={\"\"}\n                      data={servers}\n                      columns={servercolumns}\n                      options={serveroptions}\n                    />\n                  </StyledTable>\n                }\n              </React.Fragment>\n          </Box>\n        </Paper>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default ServersView;","/Users/kirk/Solana/grape-dashboard/src/views/Feed/TwitterFeed.tsx",["688","689","690","691","692","693"],"import React, { useEffect, useState } from 'react';\n\nimport {\n  Typography,\n  Button,\n  Grid,\n  Paper,\n  Box,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from '@mui/material';\n\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { Timeline } from 'react-twitter-widgets'\n//import { TwitterTimelineEmbed } from 'react-twitter-embed';\n\n//class ShowTwitterFeed extends React.Component {\n\nfunction ShowTwitterFeed(props:any){  \n  /*\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"https://platform.twitter.com/widgets.js\";\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(script);\n  }, []);\n\n  return (\n    \n      <section className=\"twitterContainer\">\n        <div className=\"twitter-embed\">\n          <a\n            className=\"twitter-timeline\"\n            data-theme=\"dark\"\n            data-tweet-limit=\"5\"\n            data-chrome=\"noheader nofooter noborders, transparent\"\n            //height=\"400\" //{props.twitterFeedHeight}\"\"\n            href=\"https://twitter.com/grapeprotocol\"//</div>+{props.twitterFeedHandle}\n          >\n            Tweets by {props.twitterFeedHandle}\n          </a>\n        </div>\n      </section>\n  );\n  */\n  //return <>Nothing to see here anymore!</>;\n  \n  return (\n    <React.StrictMode>\n      <Timeline\n        dataSource={{\n          sourceType: 'profile',\n          screenName: props.twitterFeedHandle\n        }}\n        options={{\n          height: props.twitterFeedHeight,//'400',\n          chrome:'transparent, noheader, nofooter',\n          //dnt: true, \n          theme: 'dark',\n          borderColor: 'transparent'\n        }}\n      />\n    </React.StrictMode>\n  );\n}\n\nexport default function TwitterFeedComponent(props:any) {\n  //const theme = useTheme();\n  const title = props.title;\n  const twitterFeedHandle = props.twitterFeedHandle;\n  const twitterFeedHeight = props.twitterFeedHeight;\n  const componentTwitterFeed = props.componentTwitterFeed;\n  const componentExpanded = props.componetExpanded;\n  // make collapsable component\n  const [expanded, setExpanded] = React.useState(componentExpanded);\n\n    if (componentTwitterFeed){\n      return (\n        <Grid item xs={12} md={6} lg={6}>\n            <Paper elevation={0} className=\"grape-blur-bg\">\n              <Accordion expanded={true} className=\"grape-blur\" TransitionProps={{ unmountOnExit: true }}>\n                {title &&\n                  <Box>\n                      <AccordionSummary\n                        //expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                      >\n                        \n                      <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                            {title}\n                      </Typography>\n                    </AccordionSummary>\n                    \n                  </Box>\n                }\n                <AccordionDetails>\n                  <ShowTwitterFeed twitterFeedHandle={twitterFeedHandle} twitterFeedHeight={twitterFeedHeight} />\n                </AccordionDetails>\n              </Accordion>\n            </Paper>\n          </Grid>\n      );\n    } else {\n      return (\n        <Paper>\n          {title &&\n            <Box>\n                <Typography gutterBottom variant=\"h6\" component=\"div\" sx={{ m: 0, position: 'relative'}}>\n                      {title}\n                </Typography>\n            </Box>\n          }\n            <ShowTwitterFeed twitterFeedHandle={twitterFeedHandle} twitterFeedHeight={twitterFeedHeight} />\n        </Paper>\n      );\n  }\n            \n}","/Users/kirk/Solana/grape-dashboard/src/components/Tools/WalletAddress.tsx",["694","695"],"import React from \"react\"\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport { Button, CardActionArea } from '@mui/material';\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\n\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport InsertLinkIcon from '@mui/icons-material/InsertLink';\n\nimport { PublicKey } from '@solana/web3.js';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n    ) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function trimAddress(addr: any, trim:any) {\n    let start = addr.substring(0, trim);\n    let end = addr.substring(addr.length - trim);\n    return `${start}...${end}`;\n}\n\nexport function ValidateCurve(address:string){\n    return PublicKey.isOnCurve(new PublicKey(address).toBuffer());\n}\n\nexport function ValidateAddress(address:any){\n    try{\n        if (address){\n            //let base58 = useMemo(() => props?.toBase58(), [props]) || null;\n            if ((address.length >= 32) && \n                (address.length <= 45)){    \n                    return ValidateCurve(address);\n            }\n            return false;\n        }\n    } catch(e){console.log(\"ERR: \"+e)};\n}\n\nexport function MakeLinkableAddress(props:any){\n    const addr = props?.addr || \"\";\n    const trim = props?.trim;\n    const hasextlink = props?.hasextlink || false;\n    const hascopy = props?.hascopy || false;\n    const fontsize = props?.fontsize || \"16px\";\n    const permalink = props?.permalink || false;\n    const isDNS = props?.isDNS || null;\n    \n    let stri_addr = addr;\n    const [open_snackbar, setSnackbarState] = React.useState(false);\n    \n    const handleCopyClick = () => {\n        setSnackbarState(true);\n    };\n\n    const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setSnackbarState(false);\n    };\n    \n    if (addr.length > 0){\n        if (trim>0)\n            stri_addr = trimAddress(addr, trim)\n    }\n\n    function ClipboardAction(){\n        if (hascopy){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={addr} \n                    onCopy={handleCopyClick}\n                    >\n                        <ContentCopyIcon sx={{fontSize:fontsize, mr:0 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n\n    function PermalinkAction(){\n        if (permalink){\n            return (\n                <Button size=\"small\" variant=\"text\">\n                    <CopyToClipboard \n                    text={window.location.href} \n                    onCopy={handleCopyClick}\n                    >\n                        <InsertLinkIcon sx={{fontSize:fontsize, ml:1 }} />\n                    </CopyToClipboard>\n                    <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n                        <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n                        Copied!\n                        </Alert>\n                    </Snackbar>\n                </Button>\n            );\n        } else{\n            return <React.Fragment/>\n        }\n    }\n    \n    if (addr.length > 0){\n        if (hasextlink){\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr} <OpenInNewIcon sx={{fontSize:fontsize, ml:1}} /></Button>\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        } else {\n            return ( \n                <React.Fragment>\n                    <ClipboardAction />\n                    {isDNS ?\n                        <>{addr}</>\n                    :\n                    <Button size=\"small\" variant=\"text\" component=\"a\" href={`https://explorer.solana.com/address/${addr}`} target=\"_blank\">{stri_addr}</Button>\n                    }\n                    <PermalinkAction />\n                </React.Fragment>\n            )\n        }\n    } else{\n        return (\n            <React.Fragment>\n            </React.Fragment>\n        )\n    }\n}","/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/SolIcon.tsx",["696","697"],"import React, { useState, useEffect } from \"react\";\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function SolIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n            <path d=\"M3.57430068,13.158837 C3.70705061,13.0260871 3.88958177,12.9486496 4.08317542,12.9486496 L21.6393539,12.9486496 C21.9601663,12.9486496 22.1205724,13.3358369 21.8937913,13.5626181 L18.4256993,17.03071 C18.2929494,17.16346 18.1104182,17.2408974 17.9168246,17.2408974 L0.36064607,17.2408974 C0.0398337337,17.2408974 -0.120572435,16.8537101 0.1062087,16.626929 L3.57430068,13.158837 Z\"></path>\n            <path d=\"M3.57430068,0.210187393 C3.71258186,0.0774374604 3.89511302,0 4.08317542,0 L21.6393539,0 C21.9601663,0 22.1205724,0.387187302 21.8937913,0.613968436 L18.4256993,4.08206041 C18.2929494,4.21481035 18.1104182,4.29224781 17.9168246,4.29224781 L0.36064607,4.29224781 C0.0398337337,4.29224781 -0.120572435,3.9050605 0.1062087,3.67827937 L3.57430068,0.210187393 Z\"></path>\n            <path d=\"M18.4256993,6.64302785 C18.2929494,6.51027792 18.1104182,6.43284046 17.9168246,6.43284046 L0.36064607,6.43284046 C0.0398337337,6.43284046 -0.120572435,6.82002776 0.1062087,7.0468089 L3.57430068,10.5149009 C3.70705061,10.6476508 3.88958177,10.7250883 4.08317542,10.7250883 L21.6393539,10.7250883 C21.9601663,10.7250883 22.1205724,10.337901 21.8937913,10.1111198 L18.4256993,6.64302785 Z\"></path>\n        </SvgIcon>\n    );\n  }","/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/SolCurrencyIcon.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/models/UserServer.ts",["698"],"import Session from './Session';\nimport { GRAPE_APP_API_URL } from '../components/Tools/constants';\n\nclass UserServer {\n    userServerId: string;\n    userId: string;\n    serverId: string;\n    name: string;\n    logo: string;\n    twitter: string;\n\n    constructor(data: any){\n        this.userServerId = data.userServerId;\n        this.userId = data.userId;\n        this.serverId = data.serverId;\n        this.name = data.name;\n        this.logo = data.logo;\n        this.twitter = data.twitter;\n    }\n\n    static async register(session: Session, serverId: string){\n        try {\n            if (!session) throw new Error('Invalid session');\n\n            const token = session.token;\n            const signature = token.signature;\n            const address = token.address;\n            const publicKey = session.publicKey;\n            const userId = session.userId;\n            const fromTransaction = session.fromTransaction;\n            \n            console.log(\"From Dashboard:\");\n            console.log(JSON.stringify({\n                address,\n                publicKey,\n                signature,\n                userId,\n                fromTransaction\n            }));\n\n            const response = await fetch(`${GRAPE_APP_API_URL}/server/${serverId}/register`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    address,\n                    publicKey,\n                    signature,\n                    userId,\n                    fromTransaction\n                })\n            });\n            const userServer = await response.json();\n            return new UserServer(userServer);\n\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    static async unregister(session: Session, serverId: string){\n        try {\n            if (!session) throw new Error('Invalid session');\n\n            const token = session.token;\n            const signature = token.signature;\n            const address = token.address;\n            const publicKey = session.publicKey;\n            const userId = session.userId;\n            const fromTransaction = session.fromTransaction;\n            \n            const response = await fetch(`${GRAPE_APP_API_URL}/server/${serverId}/unregister`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    address,\n                    publicKey,\n                    signature,\n                    userId,\n                    fromTransaction\n                })\n            });\n\n            return true;\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}\n\nexport default UserServer;","/Users/kirk/Solana/grape-dashboard/src/utils/token/safe-math.ts",[],"/Users/kirk/Solana/grape-dashboard/src/utils/token/farms.ts",[],"/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/GrapeIcon.tsx",["699","700"],"import React, { useState, useEffect } from \"react\";\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function GrapeIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon {...props}>       \n           <path d=\"M9.01656587,22 C7.35962231,22 6.01590977,20.6620342 6.01414706,19.0104197 C6.014381,18.6854574 6.0683383,18.3627546 6.17385019,18.0552822 C4.65355783,17.7078956 3.66088018,16.2486823 3.89967765,14.712301 C3.92491623,14.5431035 3.96663621,14.3767602 4.02424609,14.2156295 C3.4237021,14.0728659 2.88175433,13.7494098 2.47193169,13.2891462 C1.72849601,12.4624125 1.51596312,11.2886187 1.92255293,10.2549928 C0.574618257,9.74031484 -0.212717429,8.33995457 0.0504549418,6.92526737 C0.313627312,5.51058017 1.55231363,4.48469804 2.99575795,4.48596237 C3.70977051,4.48440525 4.40081639,4.73735035 4.94413611,5.19913169 C5.03896245,5.11514097 5.13926233,5.03749899 5.24437799,4.96671491 L5.36894643,4.89985528 L5.42643955,4.86801737 C5.5328774,4.80668234 5.64271625,4.75140804 5.755428,4.7024602 L5.89916081,4.65470333 L5.96304206,4.63560058 C6.07846122,4.5978584 6.19572768,4.56597948 6.31438894,4.54008683 L6.45173363,4.54008683 L6.51242082,4.54008683 C6.63409636,4.52251081 6.75680077,4.51293873 6.87973802,4.51143271 C6.93403708,4.51143271 6.97555989,4.51143271 7.02027677,4.51143271 L7.08096396,4.51143271 C7.2084816,4.51824383 7.33543563,4.53313157 7.4610574,4.55600579 C7.50980885,4.56536124 7.55783865,4.578128 7.60479022,4.59421129 L7.67186553,4.61331404 C7.78701504,4.64184071 7.90012381,4.67800422 8.01043616,4.72156295 C8.08070554,4.75021708 8.14458679,4.78523878 8.2116621,4.82026049 L8.27554336,4.8552822 L8.34900679,4.8934877 C8.40018906,4.9144998 8.44936418,4.94007388 8.49593367,4.9698987 C8.57259117,5.02402315 8.62369617,5.06541245 8.67160711,5.10361795 C8.35220086,3.6040521 7.7517171,1.62054993 6.04928175,1.07930535 C5.69874518,0.95068507 5.33014791,0.877632393 4.95691236,0.862807525 C4.0913214,0.862807525 3.21614826,1.35629522 1.73090917,2.67756874 C1.60080541,2.7887062 1.4167449,2.81179054 1.26307634,2.73624297 C1.10940777,2.66069541 1.01574927,2.501077 1.02502135,2.33053546 C1.0291406,2.21770958 1.08003178,2.11164293 1.1655601,2.03762663 C2.81050232,0.569898698 3.87412515,0 4.95371829,0 C5.42529916,0.0101105104 5.89178986,0.0994489882 6.33355332,0.264254703 C7.32371271,0.601736614 7.97849554,1.12387844 8.65244274,2.34327062 C9.08779739,2.41141279 9.52771094,2.44653527 9.96839651,2.44833575 C13.057055,2.44833575 13.9513925,0.538060781 13.9865272,0.461649783 C14.0566749,0.308273678 14.2102907,0.209927141 14.3793969,0.210130246 C14.439031,0.209865925 14.4979671,0.222920722 14.5518763,0.248335745 C14.6560393,0.293055164 14.7379381,0.377435376 14.7793339,0.48268504 C14.8207296,0.587934704 14.818185,0.705314118 14.7722666,0.808683068 C14.7275497,0.910564399 13.6287922,3.30795948 9.98117276,3.30795948 C9.66619319,3.30562385 9.35160204,3.2854272 9.03892431,3.24746744 C9.21808608,3.74708278 9.36530791,4.25751208 9.47970494,4.77568741 C9.88059439,4.59234413 10.3162601,4.49680589 10.75733,4.49551375 C11.3243112,4.49761987 11.8787106,4.6622996 12.3543612,4.9698987 C12.4592934,5.03719347 12.5586292,5.11278662 12.6514091,5.1959479 C13.7179784,4.28262725 15.2782426,4.23152348 16.4026614,5.0730821 C17.5270802,5.91464071 17.9130852,7.42240785 17.3307107,8.69811867 C17.1172335,9.18183803 16.7775078,9.59963239 16.3469394,9.90795948 C16.6475777,10.4422013 16.7747835,11.0561645 16.7110626,11.6654124 C16.5482745,13.0729395 15.4233048,14.1770605 14.0088856,14.3175109 C14.0783161,14.5238349 14.1233379,14.7375349 14.1430363,14.9542692 C14.1983201,15.7406538 13.9387581,16.5168358 13.4211781,17.1128799 C13.011662,17.5917696 12.4584577,17.9266434 11.8433112,18.0680174 C11.9511271,18.3749955 12.0061994,18.6979085 12.0062084,19.0231548 C11.9957344,20.6641175 10.6628326,21.9913138 9.01656587,22 Z M9.01656587,16.8740955 C8.23171201,16.8438771 7.49314811,17.2440165 7.09170769,17.9169457 C6.69026727,18.589875 6.69026727,19.4277805 7.09170769,20.1007098 C7.49314811,20.7736391 8.23171201,21.1737785 9.01656587,21.1435601 L9.10599962,21.1435601 C10.2609266,21.0820791 11.1585961,20.1182818 11.1344522,18.9656793 C11.1103083,17.8130768 10.1730609,16.8874693 9.01656587,16.8740955 L9.01656587,16.8740955 Z M6.85737958,13.0280753 C6.05016188,13.0307334 5.31291109,13.4852636 4.95002299,14.2039995 C4.58713489,14.9227355 4.66017012,15.7837503 5.13897392,16.4315485 C5.48253616,16.8938982 5.99820802,17.1990938 6.56991395,17.278437 C6.99079272,16.6921752 7.60828846,16.2754353 8.31067804,16.1036179 C8.22868139,15.8733861 8.17609802,15.633778 8.15416898,15.3904486 C8.10820215,14.8342868 8.21881781,14.2763714 8.47357523,13.7794501 C8.07018694,13.3065158 7.48012934,13.032196 6.85737958,13.0280753 Z M9.19543337,16.0303907 C10.0990762,16.0839079 10.9301277,16.5413885 11.4568297,17.2752533 C12.5753211,17.1251594 13.3846319,16.1350614 13.3061432,15.0128326 C13.2276545,13.8906038 12.2883473,13.022019 11.1597818,13.0280438 L10.9936906,13.0280438 C10.2984222,13.0788458 9.67153958,13.4640023 9.31361654,14.0603123 C8.9556935,14.6566223 8.91159606,15.3893377 9.19543337,16.0240232 L9.19543337,16.0303907 Z M13.7405844,13.4547033 C14.8780822,13.4527628 15.8159137,12.565379 15.877036,11.4331754 C15.9381583,10.3009717 15.1012771,9.3183948 13.9705569,9.19479016 C13.8918421,9.19003787 13.812911,9.19003787 13.7341963,9.19479016 C12.9945106,9.1954234 12.3075972,9.57676471 11.9176114,10.2032707 C11.5276256,10.8297767 11.4898678,11.6126082 11.8177587,12.2735166 C12.5405612,12.4358198 13.1776329,12.8587906 13.6064338,13.4610709 L13.7405844,13.4547033 Z M4.72374579,9.17884454 C4.20148452,9.17924802 3.69727793,9.3694154 3.30558201,9.71374819 C2.87716278,10.0884383 2.61611408,10.6177935 2.58015112,11.1847786 C2.54418815,11.7517638 2.73627321,12.309676 3.11393826,12.7351664 C3.43971725,13.1036746 3.88309651,13.3488295 4.36920485,13.429233 L4.4330861,13.429233 C4.60949986,13.1734096 4.82505364,12.9467316 5.07189861,12.757453 C5.37302433,12.5381021 5.7134479,12.3781636 6.07483425,12.2862518 C6.02685202,12.155471 5.988423,12.0214019 5.959848,11.8850941 C5.81421654,11.184587 5.92766234,10.4552146 6.27925426,9.83154848 C5.87169659,9.41171294 5.30983083,9.17595915 4.72374579,9.17884454 L4.72374579,9.17884454 Z M6.95958958,12.1875543 C7.72850039,12.2144165 8.4573458,12.536039 8.99420743,13.0853835 C9.49089257,12.5739091 10.154849,12.2565511 10.8659281,12.1907381 C10.6934499,11.6251251 10.6934499,11.0211846 10.8659281,10.4555716 C10.7054989,10.0520038 10.4230819,9.70818462 10.0578303,9.47178003 C9.06331223,8.83528333 7.73970584,9.11993277 7.09693427,10.1085384 C6.6832694,10.7311114 6.63573858,11.5268185 6.97236583,12.1939219 L6.95958958,12.1875543 Z M8.9111618,8.27785818 C9.47758191,8.27752686 10.0320808,8.4400253 10.5081931,8.74587554 C10.832384,8.95675707 11.1105046,9.23073462 11.3258731,9.55137482 C11.5046094,9.30756863 11.7200929,9.09277807 11.9646856,8.9146165 C11.8986018,8.80055244 11.8419848,8.6812936 11.7954003,8.55803184 C11.4402148,7.65636899 11.5499602,6.63854258 12.0892541,5.83270622 C12.0284575,5.77863236 11.9632907,5.72964822 11.8944162,5.68625181 C11.5499331,5.46119295 11.1468536,5.3416541 10.7349715,5.34237857 C10.0888731,5.3393669 9.47598473,5.62745989 9.0673192,6.12629538 C8.65865367,6.62513086 8.49796299,7.28130319 8.6300843,7.91172214 C8.66091664,8.03795321 8.70480374,8.16065534 8.76104086,8.27785818 L8.9111618,8.27785818 Z M2.99895201,5.33921852 C2.13350184,5.33989161 1.35365398,5.86009369 1.02297389,6.65730629 C0.69229379,7.4545189 0.875886268,8.37178556 1.48816042,8.98147612 C1.72949325,9.21958505 2.02391031,9.39741279 2.34736325,9.50043415 C2.46335995,9.34425557 2.59499407,9.20024368 2.74023294,9.07062229 C3.10844546,8.75890306 3.54675058,8.54045521 4.01785796,8.43386397 C3.9832349,8.33588154 3.95443836,8.2359493 3.93161827,8.13458755 L3.93161827,8.07727931 C3.89459608,7.90128014 3.87427739,7.72219782 3.87093109,7.54240232 C3.86246147,7.16185724 3.92864665,6.78332735 4.0657689,6.42807525 C4.0657689,6.39942113 4.08812734,6.370767 4.10090359,6.34211288 C4.16114472,6.20556893 4.22940295,6.07268078 4.30532359,5.94413893 C4.31851769,5.9156609 4.33345134,5.88801616 4.35004047,5.86136035 L4.35004047,5.8422576 C3.97109966,5.52471787 3.49394423,5.34706272 2.99895201,5.33921852 L2.99895201,5.33921852 Z M13.7405844,8.32879884 C13.8473438,8.3286875 13.9540106,8.33506693 14.0599907,8.34790159 C14.7362371,8.42120368 15.3671869,8.72218725 15.8486657,9.20115774 C16.6445011,8.63099229 16.9509333,7.59535695 16.5928823,6.68596237 C16.2784485,5.87998024 15.5081686,5.34193 14.6408215,5.32242346 C13.7734745,5.30291691 12.979633,5.80579021 12.6290506,6.59681621 C12.3989609,7.11471517 12.3863092,7.70284721 12.5939159,8.2301013 C12.628905,8.32212907 12.6705367,8.41150919 12.7184844,8.4975398 C13.0466542,8.38211147 13.3926035,8.32499787 13.7405844,8.32879884 L13.7405844,8.32879884 Z M4.90900142,8.32879884 C5.60879418,8.37101575 6.2713813,8.6572887 6.78072208,9.13748191 C7.09942652,8.82539619 7.48333645,8.5873112 7.9050321,8.44023155 C7.86365578,8.32221389 7.82847344,8.20212845 7.79962803,8.0804631 C7.63211174,7.30599095 7.7815741,6.49690552 8.21485617,5.83270622 L8.21485617,5.81678726 C7.82963121,5.50130197 7.34636748,5.32910199 6.84779739,5.3296599 C6.29830626,5.32822893 5.76996856,5.54071225 5.37533455,5.92185239 C4.72015515,6.54785756 4.53316477,7.51810213 4.90900142,8.34153401 L4.90900142,8.32879884 Z\" id=\"Shape\"></path>\n        </SvgIcon>\n    );\n  }","/Users/kirk/Solana/grape-dashboard/src/components/Tools/PretifyCommaNumber.tsx",["701","702"],"import React from \"react\"\n\n// Convert a number to a string with commas taking into account decimal point\nexport function PretifyCommaNumber(props:any) { // alternatively use \"toLocalString() not browser agnostic\"\n  \n  function autoPrecision(props:any){ // TODO: PortfolioTable replace precision function with this\n    const { tokenFormatValue, defaultFixed } = props;\n    try{\n        switch (true){\n            case (+tokenFormatValue < 0.001):{\n                return tokenFormatValue.toFixed(6)\n            }case (+tokenFormatValue < 0.1):{\n                return tokenFormatValue.toFixed(4)\n            }default:{\n                return tokenFormatValue.toFixed(defaultFixed)\n            }\n        }\n    } catch(e) {\n        return tokenFormatValue;\n    }\n  }\n  \n  var countDecimals = function(value:any) {\n    if (Math.floor(value) !== value)\n        return value.toString().split(\".\")[1].length || 0;\n    return 0;\n}\n\n  function numberWithCommasDecimal(number:any){\n    try{\n        //return x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n        //return x.toString().toLocaleString();\n        if (number >= 1){\n          //parseFloat(number).toString().toLocaleString();\n          if (countDecimals(number) < 4)\n            return number.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n          else \n            return number;\n        }else{  \n          return number;\n        }\n      }catch(e){ return number; }\n  }\n  \n  return numberWithCommasDecimal(props.number);\n\n}","/Users/kirk/Solana/grape-dashboard/src/views/Summary/Summary.tsx",["703","704","705"],"/Users/kirk/Solana/grape-dashboard/src/views/TransactionHistory/TransactionHistory.tsx",["706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726"],"import React, { FC, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\n\nimport {\n  Dialog,\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Skeleton,\n  DialogTitle,\n  DialogContent,\n} from '@mui/material';\n\nimport { useSession } from \"../../contexts/session\";\nimport { TokenAmount } from '../../utils/token/safe-math';\nimport { PublicKey } from '@solana/web3.js'\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\nimport { MakeLinkableAddress, ValidateAddress, trimAddress } from '../../components/Tools/WalletAddress';\n\nimport ReceiptIcon from '@mui/icons-material/Receipt';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { web3 } from '@project-serum/anchor';\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\n\nfunction formatBlockTime(date: string, epoch: boolean, time: boolean){\n  // TODO: make a clickable date to change from epoch, to time from, to UTC, to local date\n\n  let date_str = new Date(date).toLocaleDateString(); //.toUTCString();\n  if (time)\n      date_str = new Date(date).toLocaleString();\n  if (epoch){\n      date_str = new Date(+date * 1000).toLocaleDateString(); //.toUTCString();\n      if (time)\n          date_str = new Date(+date * 1000).toLocaleString(); //.toUTCString();\n  }\n  return (\n      <>{date_str}</>\n  );\n}\n\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nexport default function TransactionHistory(props: any) {\n    const [mint, setMint] = React.useState(props.mint);\n    const [mintdecimals, setMintDecimals] = React.useState(props.decimals);\n    const [open, setOpen] = React.useState(false);\n    const [publicKey, setPublicKey] = React.useState(props.publicKey);\n    const [address, setAddress] = React.useState(props.address);\n    const [transactionHistory, setTransactionHistory] = React.useState(null);\n    const [transactionArray, setTransactionArray] = React.useState(null);\n    const [transactionHistoryDetails, setTransactionHistoryDetails] = React.useState(null);\n    const [transactionRecentHistory, setTransactionRecentHistory] = React.useState(null);\n    const { session, setSession } = useSession();\n\n    const { connection } = useConnection();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n        fetchTransactionHistoryData();\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const fetchTransactionHistoryData = async () => {\n      //console.log(\"ADDRESS: \"+address);\n      const transaction = await connection.getSignaturesForAddress(new PublicKey(address));\n      //console.log(\"RESPONSE: \"+JSON.stringify(transaction));\n\n      let tarray: any[] = [];\n      let tmemo: any[] = [];\n      let ttime: any[] = [];\n      let x = 0;\n      for (var value of transaction){\n        if (x<100){\n          tarray.push(transaction[x].signature);\n          tmemo.push(transaction[x].memo);\n          ttime.push(transaction[x].blockTime);\n        }\n        x++;\n      }\n\n      setTransactionHistory(transaction);\n\n      const transactionDetails = await connection.getParsedTransactions(tarray);\n      //setTransactionHistoryDetails(transactionDetails);\n\n      let txObject = {\n        transaction:transaction,\n        details: transactionDetails\n      }\n\n      setTransactionRecentHistory(txObject);\n\n      let arrtransactional: any[] = [];\n\n      let pos = 0;\n      for (var tvalue of transactionDetails){\n        //console.log(\"value: \"+JSON.stringify(tvalue));\n        // loop instructions\n        \n        let ipos = 0;\n\n        for (var ivalue of tvalue.transaction.message.instructions){\n          console.log(\"inner value: \"+JSON.stringify(ivalue));\n          let ival_str = JSON.stringify(ivalue);\n          let ival_json = JSON.parse(ival_str);\n          if (ipos === 0){\n          //for (var xvalue of ivalue){\n            if (ival_json?.parsed?.info?.amount){\n              if (ival_json.parsed.info.authority === session.publicKey){\n                console.log(\"amount: \" + ival_json.parsed.info.amount);\n                console.log(\"sender: \" + ival_json.parsed.info.authority);\n                console.log(\"destination: \" + ival_json.parsed.info.destination);\n                console.log(\"type: \" + ival_json.parsed.type);\n\n                arrtransactional.push({\n                  signature:tarray[ipos],\n                  transaction:ival_json?.parsed?.info,\n                  memo:tmemo[ipos],\n                  time:ttime[ipos],\n                });\n              }\n\n            }\n          }\n          ipos++;\n        }\n      }\n\n      setTransactionArray(arrtransactional);\n      \n    }\n    /*\n    React.useEffect(() => { \n      if (!transactionHistory){\n        fetchTransactionHistoryData();\n      }\n    }, [address]);\n    */\n    return (\n      <React.Fragment>\n            <Button\n                variant=\"outlined\" \n                //aria-controls={menuId}\n                title={`Transaction History`}\n                onClick={handleClickOpen}\n                size=\"small\"\n                sx={{ml:1}}\n                >\n                <ReceiptIcon />\n            </Button>\n            <BootstrapDialog\n                onClose={handleClose}\n                aria-labelledby=\"customized-dialog-title\"\n                open={open}\n                PaperProps={{ \n                    style: {\n                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                        boxShadow: '3',\n                        border: '1px solid rgba(255,255,255,0.15)',\n                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                        borderRadius: '20px',\n                        padding:'4'\n                        },\n                    }}\n            >\n              <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                Transaction History\n              </BootstrapDialogTitle>\n              <DialogContent dividers>\n                <TableContainer component={Paper} \n                  sx={{\n                      background: 'rgba(255,255,255,0.015)',\n                      boxShadow: 3,\n                      borderRadius: '20px'\n                  }}\n                  >\n                  <Table sx={{ minWidth: 400 }} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Signature</TableCell>\n                        <TableCell align=\"right\">Amount</TableCell>\n                        <TableCell align=\"right\">Destination</TableCell>\n                        <TableCell align=\"right\"></TableCell>\n                        <TableCell align=\"right\">Memo</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {/*\n                      {transactionArray ? transactionArray.map((item: any) => (\n                        <TableRow\n                          key={1}\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                          <TableCell component=\"th\" scope=\"row\">  \n                            <MakeLinkableAddress addr={item.signature} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            {item.transaction.amount && item.transaction.amount > 0 &&\n                            <>\n                              {parseFloat(new TokenAmount(item.transaction.amount, mintdecimals).format())}\n                            </>\n                            }\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <MakeLinkableAddress addr={item.transaction.destination} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <small>{formatBlockTime(item.time, true, true)}</small>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            {item.memo}\n                          </TableCell>\n                        </TableRow>\n                        ))\n                        */}\n\n                      {transactionHistory ? transactionHistory.map((item: any) => (\n                        <TableRow\n                        key={1}\n                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                      >\n                        <TableCell component=\"th\" scope=\"row\">  \n                          <MakeLinkableAddress addr={item.signature} trim={5} hasextlink={true} hascopy={false} fontsize={14} />\n                        </TableCell>\n                        <TableCell align=\"center\" colSpan={2}>\n                          (coming soon)\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <small>{formatBlockTime(item.blockTime, true, true)}</small>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {item.memo}\n                        </TableCell>\n                      </TableRow>\n                      ))\n                      \n                      \n                        :\n                        <React.Fragment>\n                            <TableRow>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                            </TableRow>\n                        </React.Fragment>\n                      }\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </DialogContent>\n            </BootstrapDialog>\n      </React.Fragment>\n    );\n}","/Users/kirk/Solana/grape-dashboard/src/models/User.ts",[],"/Users/kirk/Solana/grape-dashboard/src/components/StaticIcons/DiscordIcon.tsx",["727","728"],"import React, { useState, useEffect } from \"react\";\nimport SvgIcon, { SvgIconProps } from '@mui/material/SvgIcon';\n\nexport default function DiscordIcon(props: SvgIconProps) {\n    return (\n      <SvgIcon {...props}>\n        <path d=\"M17.2,3.6C14.9,1.8,13,1.5,13,1.5l-0.2,0.3c2.8,0.9,3.7,2.5,3.7,2.5c-1.7-1-3.4-1.4-4.9-1.6\n              c-1.2-0.2-2.3-0.1-3.3,0c-0.1,0-0.2,0-0.3,0C7.4,2.8,6,3,4.3,3.7c-0.6,0.3-1,0.4-1,0.4s1.1-1.6,4.1-2.4L7.1,1.5c0,0-2,0.3-4.3,2.1\n              c0,0-2.3,4.3-2.3,9.5c0,0,1.4,2.3,4.9,2.4c0,0,0.4-0.4,0.9-1c-2.1-0.6-2.7-2.2-2.7-2.2s0.2,0.1,0.4,0.3c0,0,0,0,0.1,0\n              c0.1,0,0.1,0.1,0.2,0.1c0.4,0.3,0.8,0.4,1.2,0.5c0.7,0.3,1.5,0.5,2.4,0.7c1.2,0.3,2.7,0.3,4.3,0c0.8-0.2,1.6-0.3,2.3-0.7\n              c0.6-0.2,1.2-0.5,1.9-1c0,0-0.6,1.6-2.7,2.3c0.5,0.6,0.9,1,0.9,1c3.6-0.1,4.9-2.4,4.9-2.4C19.5,7.8,17.2,3.6,17.2,3.6z M7,11.5\n              c-1,0-1.6-0.8-1.6-1.8S6.1,7.9,7,7.9s1.6,0.8,1.6,1.8S7.9,11.5,7,11.5z M13,11.5c-1,0-1.6-0.8-1.6-1.8s0.7-1.8,1.6-1.8\n              s1.6,0.8,1.6,1.8S13.8,11.5,13,11.5z\" />\n      </SvgIcon>\n    );\n  }","/Users/kirk/Solana/grape-dashboard/src/views/Settings/TwitterSettings.tsx",["729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776"],"import React, { FC, useCallback, useMemo, ReactElement } from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nimport {\n  Box,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Grid,\n  Button,\n  Paper,\n  TableRow,\n  TableCell,\n  Typography,\n  TextField,\n  Tooltip,\n  Dialog,\n  DialogProps,\n  IconButton,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from '@mui/material';\nimport{\n  styled, createTheme\n} from '@mui/material/styles';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\nimport { sign } from 'tweetnacl';\n\nimport CircularProgress from '@mui/material/CircularProgress';\nimport CloseIcon from '@mui/icons-material/Close';\nimport TwitterIcon from '@mui/icons-material/Twitter';\nimport LinkIcon from '@mui/icons-material/Link';\nimport LinkOffIcon from '@mui/icons-material/LinkOff';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\n\nimport { useSnackbar } from 'notistack';\nimport { useConnection, ConnectionProvider, WalletProvider, useWallet } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork, WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\nimport { Connection, PublicKey, Keypair, SystemProgram, Transaction, clusterApiUrl } from '@solana/web3.js';\n\nimport { BONFIDA_TWITTER_REGISTRAR_URL } from '../../components/Tools/constants';\n\nimport { useSession } from \"../../contexts/session\";\nimport { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\nimport { deleteTwitterRegistry, createVerifiedTwitterRegistry, getHandleAndRegistryKey, getTwitterRegistry, getTwitterHandleandRegistryKeyViaFilters } from '@solana/spl-name-service';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n  ) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialog-paper': {\n      width: theme.spacing(60),\n      margin: 0,\n  },\n  '& .MuiDialogTitle-root': {\n      //backgroundColor: theme.palette.primary.main,\n      //backgroundColor: '#000000',  /* fallback for old browsers */\n      backgroundColor: 'rgb(0 0 0 / 50%)',\n      '& .MuiTypography-root': {\n          display: 'flex',\n          justifyContent: 'space-between',\n          lineHeight: theme.spacing(5) + 'px',\n      },\n      '& .MuiIconButton-root': {\n          flexShrink: 1,\n          padding: theme.spacing(),\n          marginRight: theme.spacing(2),\n          color: theme.palette.grey[500],\n      },\n  },\n  '& .MuiDialogContent-root': {\n      padding: 0,\n      '& .MuiCollapse-root': {\n          '& .MuiList-root': {\n              background: theme.palette.grey[900],\n          },\n      },\n      '& .MuiList-root': {\n          background: theme.palette.grey[900],\n          padding: 0,\n      },\n      '& .MuiListItem-root': {\n          boxShadow: 'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)',\n          '&:hover': {\n              boxShadow:\n                  'inset 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.1)' + ', 0 1px 0 0 ' + 'rgba(255, 255, 255, 0.05)',\n          },\n          padding: 0,\n          '& .MuiButton-endIcon': {\n              margin: 0,\n          },\n          '& .MuiButton-root': {\n              flexGrow: 1,\n              justifyContent: 'space-between',\n              padding: theme.spacing(1, 3),\n              borderRadius: undefined,\n              fontSize: '1rem',\n              fontWeight: 400,\n          },\n          '& .MuiSvgIcon-root': {\n              color: theme.palette.grey[500],\n          },\n      },\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\nconst { children, onClose, ...other } = props;\n\nreturn (\n  <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n    {children}\n    {onClose ? (\n      <IconButton\n        aria-label=\"close\"\n        onClick={onClose}\n        sx={{\n          position: 'absolute',\n          right: 8,\n          top: 8,\n          color: (theme) => theme.palette.grey[500],\n        }}\n      >\n        <CloseIcon />\n      </IconButton>\n    ) : null}\n  </DialogTitle>\n);\n};\n\nexport interface TwitterDialogProps extends Omit<DialogProps, 'title' | 'open'> {\n  title?: ReactElement;\n}\n\nexport function TwitterBoardingDialog(props:any){\n\n  const [open_dialog, setOpenPKDialog] = React.useState(false);\n  const [walletPKId, setInputPKValue] = React.useState('');\n  const [open_snackbar, setSnackbarState] = React.useState(false);\n  const [twitter_url, setTwitterURL] = React.useState(null);\n  const [twitter_handle, setTwitterHandle] = React.useState(null);\n  const { session, setSession } = useSession();\n  const { publicKey, wallet, connected, disconnect, autoConnect, sendTransaction, signTransaction, signMessage } = useWallet();\n  const { connection } = useConnection();\n  const [loading_registration, setLoadingRegistration] = React.useState(false);\n  const [new_twitter_registration, setTwitterRegistration] = React.useState(null);\n  const { enqueueSnackbar } = useSnackbar();\n  const onError = useCallback(\n    (error: WalletError) => {\n        enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n        console.error(error);\n    },\n    [enqueueSnackbar]\n  );\n\n  const handleCopyClick = () => {\n    setSnackbarState(true);\n  };\n\n  const postTwitterRegistrarRequest = async (\n    transaction: Transaction,\n    userPubkey: PublicKey,\n    twitterLink: string,\n    twitterHandle: string\n  ) => {\n    const transactionBuffer = transaction.serialize({\n      requireAllSignatures: false,\n      verifySignatures: false,\n    });\n\n    const payload = {\n      transaction: JSON.stringify(transactionBuffer),\n      pubkey: userPubkey.toBase58(),\n      twitterLink: twitterLink,\n      twitterHandle: twitterHandle,\n    };\n\n    if (BONFIDA_TWITTER_REGISTRAR_URL){\n      const result = await fetch(BONFIDA_TWITTER_REGISTRAR_URL, {\n        method: \"POST\",\n        headers: new Headers({\n            \"Content-Type\": \"application/json\",\n        }),\n        body: JSON.stringify(payload)\n        //body: payload\n      }).catch((error)=>{\n        console.log(\"ERROR REGISTERING TWITTER HANDLE!\")\n      });\n      return result;\n    } else{\n      return null;\n    }\n  };\n\n  async function registerWithConnectedWallet(twitterHandle:string, twitterUrl:string){\n    \n    const space = 1_000; // The space that the user will have to write data into the verified registry\n    \n    if (wallet){\n      setLoadingRegistration(true);\n      enqueueSnackbar(`Creating verified twitter registry...`,{ variant: 'success' });\n      const instruction = await createVerifiedTwitterRegistry(\n        connection,\n        twitterHandle,\n        publicKey,\n        space,\n        publicKey,\n      );\n      \n      console.log(\"Preparing Transaction\");\n      enqueueSnackbar(`Preparing Transaction...`,{ variant: 'success' });\n      const transaction = new Transaction().add(...instruction);\n      if (transaction){\n        transaction.recentBlockhash = (\n          await connection.getRecentBlockhash(\"finalized\")\n        ).blockhash;\n        \n        transaction.feePayer = publicKey;//wallet.publicKey;\n        try{\n          //console.log(\"Transaction ready: \"+JSON.stringify(transaction));\n          console.log(\"Signing Transaction...\");\n          enqueueSnackbar(`Signing Transaction`,{ variant: 'success' });\n          \n          console.log(wallet?.adapter.name+\": \"+connected);\n          //const smessage = new TextEncoder().encode('$GRAPE');\n          //const sm_signature = await signMessage(smessage);\n\n          const signature = await signTransaction(transaction)\n          //const signature = await sendTransaction(transaction, connection)\n          .catch((error: any)=>{\n            setLoadingRegistration(false);\n            throw new Error('Request was not completed: '+error);\n          });\n          \n          //console.log(\"Signed: \"+JSON.stringify(signature));\n          enqueueSnackbar(`Signed Transaction`,{ variant: 'success' });\n          \n          if (!signature){\n            setLoadingRegistration(false);\n            throw new Error('Invalid signature!');\n          }else{\n          // await connection.confirmTransaction(signature, 'processed');\n          }\n\n          enqueueSnackbar(`Creating Twitter Registration: ${publicKey} + @${twitterHandle}`,{ variant: 'success' });\n          const result = await postTwitterRegistrarRequest(\n            transaction,\n            publicKey,\n            twitterUrl,\n            twitterHandle\n          )\n          .then(function(result_response) {\n            if (result_response){\n              \n              enqueueSnackbar(`Twitter Registration Complete`,{ variant: 'success' });\n              console.log(\"Result Response: \"+JSON.stringify(result_response));\n              const timeout = setTimeout(() => {\n                props.setNewTwitterRegistration(twitterHandle);\n              }, 10000); // added a small delay\n              \n            } else{\n              const action = (key:any) => (\n                  <Button href={`https://naming.bonfida.org/#/twitter-registration`} target='_blank' sx={{color:'white'}} >\n                    Try Again\n                  </Button>\n              );\n              enqueueSnackbar(`Something went wrong! Toggle the wallet tab to refresh and see if your handle was registered`,{ variant: 'error', action });\n              setLoadingRegistration(false);\n            }\n          })\n          .catch((error)=>{\n            setLoadingRegistration(false);\n            throw new Error('Request was not completed: '+error);\n          });    \n        } catch(e){\n          setLoadingRegistration(false);\n          console.log(\"ERR: \"+e);\n          throw new Error('Error: '+e);\n        }\n      } else{\n        setLoadingRegistration(false);\n        console.log(\"Invalid transaction!\");\n        throw new Error('Invalid transaction!');\n      }\n    } else{\n      setLoadingRegistration(false);\n      console.log(\"Wallet not connected!\");\n      throw new Error('Wallet not connected!');\n    }\n  }\n\n  const handleCloseSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\n      if (reason === 'clickaway') {\n          return;\n      }\n      setSnackbarState(false);\n  };\n  \n  const steps = [\n    {\n      label: 'Copy your wallet address',\n      description: `Your wallet address will be linked with your twitter handle, is this your wallet address that you would like to link ${publicKey}`,\n    },\n    {\n      label: 'Tweet your wallet address',\n      description:\n        'Login to your twitter account and tweet only your wallet address. Once completed copy the tweet url and return here.',\n    },\n    {\n      label: 'Enter your twitter information',\n      description: `Fill out the input fields by entering your twitter handle along with the tweet url of your wallet address you published on the previous step`,\n    },\n  ];\n  \n  //const handleClickOpenDialog = () => {\n  const handleClickOpenDialog = useCallback(async () => {  \n    if (!publicKey) throw new WalletNotConnectedError();\n    handleReset();\n    setOpenPKDialog(true);\n  }, [publicKey, sendTransaction, connection]);\n  \n  const handleCloseDialog = () => {\n      setOpenPKDialog(false);\n  };\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  \n  const VerifyLastStepWallet = useCallback(async (twitter_handle:string, twitter_url:string) => {\n    registerWithConnectedWallet(twitter_handle, twitter_url)\n    .catch(function (error){\n      console.log(\"ERROR COMPLETING REGISTRATION (\"+publicKey+\"): \"+error)}\n    ); //getHandleAndRegistryKey(connection, publicKey);;\n  }, [publicKey, sendTransaction, connection]);\n\n  const handleNext = () => {\n    if (activeStep === 2){\n      // we need to validate the data\n      if ((twitter_url) && \n          (twitter_handle)){\n        if ((twitter_url.length > 10)&&\n            (twitter_handle.length > 2)){\n              VerifyLastStepWallet(twitter_handle, twitter_url);\n              setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        } else{\n          alert(\"Invalid Entry\");\n        }\n\n      } else{\n        alert(\"Invalid Entry\");\n      }\n    } else{\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    }\n  };\n\n  const handleCopyNext = () => {\n    setSnackbarState(true);\n    navigator.clipboard.writeText(publicKey.toString());\n    handleNext();\n  }\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  function setTwitterHandleRegEx(props:string){\n    setTwitterHandle(props.replace(/[@]/g, ''));\n  }\n  \n  const TwitterRegistrationLastStep = () =>{\n\n    if (new_twitter_registration){\n      enqueueSnackbar(`Twitter Registration Succeeded for ${twitter_handle}`,{ variant: 'success' });\n    }else if (!loading_registration && !new_twitter_registration){\n      enqueueSnackbar(`Twitter Registration Failed...`,{ variant: 'error' });\n      handleCloseDialog();\n    }\n    return (\n      <Grid \n        container \n        direction=\"column\" \n        alignItems=\"center\" \n        justifyContent=\"center\" \n        sx={{ p: 2 }}>\n          <Grid item xs={3}>\n          {loading_registration ? \n              <Typography align=\"center\">Processing Twitter Handle NS Registration...\n                <CircularProgress color=\"inherit\" />\n              </Typography>\n        : \n          <div>\n            {new_twitter_registration ?\n              <Typography align=\"center\">Registration complete {new_twitter_registration}!</Typography>\n            :\n              <Typography align=\"center\">Registration failed!</Typography>\n            }\n          </div>\n        } \n        </Grid>\n      </Grid>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      \n      <Tooltip title={`Link Twitter`}><Button \n        //disabled={!publicKey && !wallet}\n        disabled={!publicKey}\n        //disabled={!session.publicKey}\n        color=\"primary\" size=\"small\" variant=\"contained\" onClick={handleClickOpenDialog} title=\"Link Twitter\"><LinkIcon sx={{mr:1}}/> Link Twitter</Button>\n      </Tooltip>\n        <BootstrapDialog\n          open={open_dialog} \n          onClose={handleCloseDialog} \n          //fullWidth={true}\n          maxWidth={\"lg\"}\n          PaperProps={{ \n            style: {\n                background: 'linear-gradient(to right, #251a3a, #000000)',\n                boxShadow: '3',\n                border: '1px solid rgba(255,255,255,0.15)',\n                borderTop: '1px solid rgba(255,255,255,0.3)',\n                borderRadius: '20px',\n                padding:'4'\n                },\n            }}\n          >\n      \n          <DialogTitle>\n          <Typography variant=\"h6\">\n              <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item>\n                  <TwitterIcon  sx={{mr:1}} />\n                </Grid>\n                <Grid item>Register Wallet with your Twitter Account\n                </Grid>\n              </Grid>\n            </Typography>\n          </DialogTitle>\n          <DialogContent>\n              <Box sx={{ maxWidth: 400, p: 1 }}>\n                <Stepper activeStep={activeStep} orientation=\"vertical\">\n                  {steps.map((step, index) => (\n                    <Step key={step.label}>\n                      <StepLabel\n                        optional={\n                          index === 2 ? (\n                            <Typography variant=\"caption\">Last step</Typography>\n                          ) : null\n                        }\n                      >\n                        {step.label}\n                      </StepLabel>\n                      <StepContent>\n                        <Typography>{step.description}</Typography>\n                        <Box sx={{ mb: 2 }}>\n                          <div>\n                            {index === 1 ?\n                              // add one more button to tweet quickly\n                              <Button\n                                  variant=\"outlined\"\n                                  //onClick={handleCopyNext}\n                                  href={`https://twitter.com//intent/tweet?text=${publicKey}`} \n                                  target=\"_blank\"\n                                  sx={{ mt: 1, mr: 1 }}\n                                >\n                                  <TwitterIcon sx={{mr:1}} /> Tweet\n                                </Button>\n                            : null}\n\n\n                            {index === steps.length - 1 ? \n                              <React.Fragment>\n                                  <TextField \n                                    fullWidth \n                                    id=\"grape-twitter-handle\" \n                                    label=\"Twitter Handle\" \n                                    variant=\"standard\" \n                                    margin=\"normal\"\n                                    onChange={(e) => setTwitterHandleRegEx(e.target.value)} \n                                  />\n                                \n                                  <TextField \n                                    fullWidth \n                                    id=\"grape-twitter-url\" \n                                    label=\"Tweet URL\" \n                                    variant=\"standard\" \n                                    margin=\"normal\"\n                                    onChange={(e) => setTwitterURL(e.target.value)} \n                                  />\n                              </React.Fragment>  \n                            : \n                            null}\n\n                            {index === 0 ?\n                                <Button\n                                  variant=\"contained\"\n                                  onClick={handleCopyNext}\n                                  sx={{ mt: 1, mr: 1 }}\n                                >\n                                  <ContentCopyIcon sx={{mr:1}} /> Copy &amp; Continue\n                                </Button>\n                              :\n                                <Button\n                                  variant=\"contained\"\n                                  onClick={handleNext}\n                                  sx={{ mt: 1, mr: 1 }}\n                                >\n                                  {index === steps.length - 1 ? 'Finish' : 'Continue'}\n                                </Button>\n                            }\n                            \n                            {index !== 0 &&\n                            <Button\n                              disabled={index === 0}\n                              onClick={handleBack}\n                              sx={{ mt: 1, mr: 1 }}\n                            >\n                              Back\n                            </Button>\n                            }\n                          </div>\n                        </Box>\n                      </StepContent>\n                    </Step>\n                  ))}\n                </Stepper>\n                {activeStep === steps.length && \n                    <TwitterRegistrationLastStep />\n                }\n              </Box>\n          </DialogContent>\n      </BootstrapDialog>   \n      <Snackbar open={open_snackbar} autoHideDuration={2000} message=\"Copied\">\n          <Alert onClose={handleCloseSnackbar} severity=\"success\" sx={{ width: '100%' }}>\n          Copied!\n          </Alert>\n      </Snackbar>\n    </React.Fragment>\n  );\n}\n\nexport const TwitterSettings: FC = (props: any) => {\n  const { session, setSession } = useSession();\n  const { publicKey, wallet, disconnect, sendTransaction, signTransaction, signMessage } = useWallet();\n  const { connection } = useConnection();\n  const [newTwitterRegistration, setNewTwitterRegistration] = React.useState(null);\n  const [twitterRegistration, setTwitterRegistry] = React.useState(null);\n  const [twitterRegistryKey, setTwitterRegistryKey] = React.useState(null);\n  const [loadingTwitter, setLoadingRPC] = React.useState(false);\n  const [twitterOnChainRegistration, setTwitterOnChainRegistry] = React.useState(null);\n  //const wallet = props.wallet;\n  const endpoint = props.endpoint;\n  const { enqueueSnackbar } = useSnackbar();\n\n  async function deregisterTwitterWithConnectedWallet(){\n    \n    if ((wallet)&&(twitterRegistryKey)){\n      setLoadingRPC(true);\n      //console.log(twitterRegistration + \", \"+ publicKey.toString());\n\n      //if (typeof twitterRegistration === 'string')\n      //  console.log(\"Is string type\");\n      //var twtrstr: string = String(twitterRegistration);\n      const instruction = await deleteTwitterRegistry(twitterRegistration, publicKey);\n      //const instruction = await deleteTwitterRegistry(twitterRegistration, twitterRegistryKey);\n      \n      enqueueSnackbar(`Attempting Transaction...`,{ variant: 'success' });\n      const transaction = new Transaction().add(...instruction);\n      transaction.recentBlockhash = (\n          await connection.getRecentBlockhash(\"finalized\")\n      ).blockhash;\n      //console.log(\"Transaction: \"+JSON.stringify(transaction));\n      transaction.feePayer = publicKey;\n      try{\n        enqueueSnackbar(`Signing Transaction...`,{ variant: 'success' });\n        \n        const signature = await sendTransaction(transaction, connection)\n        //const signature = await signTransaction(transaction)\n        .catch((error: any)=>{\n          setLoadingRPC(false);\n          throw new Error('Request was not completed! '+error);\n        });\n        if (!signature){\n          setLoadingRPC(false);\n          throw new Error('Invalid signature!');\n        }else{\n          await connection.confirmTransaction(signature, 'processed');\n          setTwitterOnChainRegistry(null);\n          // check if actually removed...\n          const timeout = setTimeout(() => {\n            enqueueSnackbar(`Registry deleted...`,{ variant: 'success' });\n            checkTwitterRegistration();\n            setLoadingRPC(false);\n          }, 4000); // added a small delay\n          return true;\n        }\n        return false;\n      } catch(e){\n        console.log(\"ERR: \"+e);\n        setLoadingRPC(false);\n        checkTwitterRegistration();\n        return false;\n      }\n    }\n\n  }\n\n  const unlinkTwitter = async () => {\n    //await User.updateUser(session, null);\n    if (twitterRegistration){\n      setLoadingRPC(true);\n      console.log(\"Deleting registry: \"+twitterRegistration+\" / \"+publicKey);\n      deregisterTwitterWithConnectedWallet();\n    }\n  };\n\n  async function checkTwitterRegistration(){\n    setLoadingRPC(true);\n    getTwitterHandleandRegistryKeyViaFilters(connection, publicKey)\n    .then(function(response) {\n      if (response){   \n        setTwitterRegistry(response[0]);\n        setTwitterRegistryKey(response[1]);\n        console.log(\"Found: \"+response[0]+\" with \"+response[1]);\n      }\n      setLoadingRPC(false);\n    })\n    .catch(function (error){\n      if (\"Error: Registry not found.\"){\n        setTwitterRegistry(null);\n        setLoadingRPC(false);\n      }\n      console.log(\"PROMISE ERR DNS (\"+publicKey+\"): \"+error)\n    });\n  }\n\n  React.useEffect(() => { \n    if (publicKey && connection){ // use rpc node filtering...\n      if (publicKey.toString() == session.publicKey){\n        checkTwitterRegistration();\n      }\n    }\n  }, [publicKey]);\n\n  React.useEffect(() => { \n    if (newTwitterRegistration){\n      checkTwitterRegistration();\n    }\n  }, [newTwitterRegistration]);\n  \n  return (\n        <TableRow key={'twitter'}>\n          <TableCell component=\"th\" scope=\"row\">\n            <Grid container direction=\"row\" alignItems=\"center\">\n              <Grid item>\n                <TwitterIcon fontSize=\"large\" />\n              </Grid>\n              <Grid item sx={{ ml: \"20px\" }}>\n                Twitter\n              </Grid>\n            </Grid>\n          </TableCell>\n          <TableCell align=\"right\">\n          {loadingTwitter ? \n              <>loading registration information...</>\n            :\n            <>\n              {!twitterRegistration && \n                <i>Not registered</i>\n              }{twitterRegistration && \n                <>\n                  <MakeLinkableAddress addr={`@${twitterRegistration}`} trim={0} hasextlink={false} hascopy={true} isDNS={true} fontsize={12} />\n                </>\n              }\n            </>\n          }\n          \n          </TableCell>\n          <TableCell align=\"right\">\n          {loadingTwitter ? \n              <Button color=\"primary\" size=\"small\" variant=\"outlined\" disabled={true}><CircularProgress size={24} /></Button>\n            :\n            <>\n              {!twitterRegistration && \n                <>\n                <TwitterBoardingDialog setNewTwitterRegistration={setNewTwitterRegistration} /> \n                </>\n              }{twitterRegistration && \n                <Tooltip title={`Remove Twitter Registration`}><Button color=\"primary\" size=\"small\" variant=\"outlined\" onClick={unlinkTwitter} title=\"Remove Twitter Registration\"><LinkOffIcon/></Button></Tooltip>\n              }\n            </>\n          }\n          </TableCell>\n        </TableRow>\n\n  )\n}","/Users/kirk/Solana/grape-dashboard/src/views/Portfolio/PortfolioTable.jsx",["777","778","779","780","781","782","783","784","785","786"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, styled, alpha, useTheme } from '@mui/material/styles';\n\nimport {\n    Grid,\n    Typography,\n    Collapse,\n    Button,\n    Divider,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableContainer,\n    TableRow,\n    TableFooter,\n    TablePagination,\n    Paper,\n    Box,\n    Avatar,\n    AvatarGroup,\n} from '@mui/material';\n\nimport IconButton from '@mui/material/IconButton';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport HelpIcon from '@mui/icons-material/Help';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\n\nimport SendToken from '../SendToken/SendToken';\nimport TopHolders from '../TopHolders/TopHolders';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\nimport { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\nimport { ConstructionOutlined } from '@mui/icons-material';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nfunction TablePaginationActions(props) {\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n  \n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n  \n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n  \n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n    \n    return (\n        <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton\n                onClick={handleBackButtonClick}\n                disabled={page === 0}\n                aria-label=\"previous page\"\n            >\n                {theme.direction === \"rtl\" ? (\n                    <KeyboardArrowRight />\n                ) : (\n                    <KeyboardArrowLeft />\n                )}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === \"rtl\" ? (\n                    <KeyboardArrowLeft />\n                ) : (\n                    <KeyboardArrowRight />\n                )}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </Box>\n    );\n  }\n  \n  TablePaginationActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n  };\n\nfunction trimAddress(addr) {\n    if (!addr) return addr;\n    let start = addr.substring(0, 8);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n}\n\nconst TokenIcon = (props) => {\n    const {tokenInfo, mint} = props;\n    const tokenLogo = tokenInfo && tokenInfo.logoURI;\n    const tokenName = tokenInfo && tokenInfo?.name;\n\n    return (\n        <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n            <Grid item>\n                {tokenLogo ? \n                    <Avatar component={Paper} \n                        elevation={4}\n                        alt=\"Token\" \n                        src={tokenLogo}\n                        sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                    /> : <HelpIcon />}\n            </Grid>\n            <Grid item sx={{ ml: 1 }}>\n                {tokenName || (mint && trimAddress(mint)) || ''}\n            </Grid>\n        </Grid>\n    );\n};\n\nconst TokenFixPrice = (props) => {\n    const { tokenFormatValue, defaultFixed } = props;\n    try{\n        switch (true){\n            case (+tokenFormatValue < 0.001):{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(6)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(6))\n            }case (+tokenFormatValue < 0.1):{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(4)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(4))\n            }default:{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(defaultFixed)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(defaultFixed))\n            }\n        }\n    } catch(e) {\n        return tokenFormatValue;\n    }\n}\n\nfunction PortfolioRow(props) {\n    const { token, index } = props;\n    const [open, setOpen] = React.useState(false);\n    \n    return (\n        <React.Fragment>\n            <React.Fragment>\n                <TableRow key={index}>\n                    <TableCell align=\"middle\" sx={{borderBottom:\"none\"}}>\n                        <IconButton\n                            aria-label=\"expand row\"\n                            size=\"small\"\n                            onClick={() => setOpen(!open)}\n                        >\n                            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                        </IconButton>\n                    </TableCell>\n                    <TableCell align=\"left\" sx={{borderBottom:\"none\"}}>\n                        <TokenIcon tokenInfo={token.tokenInfo} mint={token.mint} />\n                    </TableCell>\n                    <TableCell align=\"right\" sx={{borderBottom:\"none\"}}><TokenFixPrice tokenFormatValue={token.balance} defaultFixed={3} /></TableCell>\n                    <TableCell align=\"right\" sx={{borderBottom:\"none\", flexWrap:\"nowrap!important\"}}>\n                        {token.usd_24h_change ?\n                            <>\n                            {token.usd_24h_change < 0 ?\n                                <Typography variant=\"caption\" sx={{color:\"#f00\"}}>\n                                    <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n                                        <Grid item>\n                                            {token.usd_24h_change.toFixed(2)}%\n                                        </Grid>\n                                        <Grid item>\n                                            <ArrowDownwardIcon fontSize=\"0.75rem\" />\n                                        </Grid>\n                                    </Grid>\n                                </Typography>\n                            :\n                                <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>\n                                    <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n                                        <Grid item>\n                                            {token.usd_24h_change.toFixed(2)}%\n                                        </Grid>\n                                        <Grid item>\n                                            <ArrowUpwardIcon fontSize=\"0.75rem\" />\n                                        </Grid>\n                                    </Grid>\n                                </Typography>\n                            }\n                            </>\n                        :\n                            <>\n                                -\n                            </>\n                        }\n                    </TableCell>\n                    <TableCell align=\"right\" sx={{borderBottom:\"none\"}}>\n                        <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>$</Typography><TokenFixPrice tokenFormatValue={token.price} defaultFixed={2} />\n                    </TableCell>\n                    <TableCell align=\"right\" sx={{borderBottom:\"none\"}}><Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>$</Typography><TokenFixPrice tokenFormatValue={token.value} defaultFixed={2} /></TableCell>\n                    <TableCell sx={{borderBottom:\"none\"}}>\n                        <SendToken mint={token.mint} name={token.tokenInfo?.name} logoURI={token.tokenInfo?.logoURI} balance={token.balance} conversionrate={token.value/token.balance} showTokenName={false} sendType={0} />\n                    </TableCell>\n                </TableRow>\n            </React.Fragment>\n            <React.Fragment>\n                <TableRow key={`r-${index}`}>\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={7} align=\"center\">\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                            <Box sx={{ margin: 1 }}>\n                                {/*\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                    Address\n                                </Typography>\n                                */}\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12}>\n                                        <TopHolders mint={token.mint} name={token.tokenInfo?.name} logoURI={token.tokenInfo?.logoURI} balance={token.balance}/>\n                                        {token.address &&\n                                        <TransactionHistory address={token.address} mint={token.mint} mintdecimals={token.mintdecimals} name={token.tokenInfo?.name} logoURI={token.tokenInfo?.logoURI} balance={token.balance}/>\n                                        }\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <MakeLinkableAddress addr={token.mint} trim={0} hasextlink={true} hascopy={true} fontsize={12} />\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Collapse>\n                    </TableCell>\n                </TableRow>\n            </React.Fragment>\n        </React.Fragment>\n    );\n}\n\nexport const PortfolioTableView = (props) => {\n    const balances = props.balances || [];\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - balances.length) : 0;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    let portfolioTableCols = 7;\n    props.isFarm ?\n        portfolioTableCols = 5//3\n    :\n        portfolioTableCols = 7;\n\n    // When we have rewards add\n    //\n    //<TableCell align=\"center\">LP</TableCell>\n    //<TableCell align=\"center\">Value</TableCell>\n    //<TableCell align=\"right\">Pending</TableCell>\n\n    //<TableCell align=\"right\">{token.lpprice && `$${token.lpprice.toFixed(4)}`}</TableCell>\n    //<TableCell align=\"right\">{token.value && `$${token.value.toFixed(6)}`}</TableCell>\n    //<TableCell align=\"right\">{token.pendingReward}</TableCell>\n\n    return (\n        <React.Fragment>\n                <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 500 }} size=\"small\" aria-label=\"Portfolio Table\">\n                        <TableHead>\n                            {!props.isFarm &&\n                                <TableRow>\n                                    <TableCell sx={{width:\"1%\"}} />\n                                    <TableCell><Typography variant=\"caption\">Asset</Typography></TableCell>\n                                    <TableCell align=\"right\"><Typography variant=\"caption\">Balance</Typography></TableCell>\n                                    <TableCell align=\"right\"></TableCell>\n                                    <TableCell align=\"right\"><Typography variant=\"caption\">Price</Typography></TableCell> \n                                    <TableCell align=\"right\"><Typography variant=\"caption\">Value</Typography></TableCell>\n                                    <TableCell></TableCell>\n                                </TableRow>\n                            }\n                        </TableHead>\n                        <TableBody>\n                            {(rowsPerPage > 0\n                                ? balances.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                : balances\n                            ).map((token, index) => {\n                                return !props.isFarm &&\n                                    <PortfolioRow token={token} index={index} />\n                            })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 53 * emptyRows }}>\n                                    <TableCell colSpan={4} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                        <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={portfolioTableCols}\n                            count={balances.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: {\n                                'aria-label': 'rows per page',\n                                },\n                                native: true,\n                            }}\n                            //onChangePage={handleChangePage}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                            />\n                        </TableRow>\n                        </TableFooter>\n                    </Table>\n                </TableContainer>\n        </React.Fragment>\n    );\n};\n\nexport default PortfolioTableView;","/Users/kirk/Solana/grape-dashboard/src/views/Contribute/ContributeTable.jsx",["787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, styled, alpha, useTheme } from '@mui/material/styles';\n\nimport {\n    Grid,\n    Typography,\n    Collapse,\n    Button,\n    Divider,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableContainer,\n    TableRow,\n    TableFooter,\n    TablePagination,\n    Paper,\n    Box,\n    Avatar,\n    AvatarGroup,\n} from '@mui/material';\n\nimport IconButton from '@mui/material/IconButton';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport HelpIcon from '@mui/icons-material/Help';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\n\nimport SendToken from '../SendToken/SendToken';\nimport TopHolders from '../TopHolders/TopHolders';\nimport { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nfunction TablePaginationActions(props) {\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n  \n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n  \n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n  \n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n    \n    return (\n        <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton\n                onClick={handleBackButtonClick}\n                disabled={page === 0}\n                aria-label=\"previous page\"\n            >\n                {theme.direction === \"rtl\" ? (\n                    <KeyboardArrowRight />\n                ) : (\n                    <KeyboardArrowLeft />\n                )}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === \"rtl\" ? (\n                    <KeyboardArrowLeft />\n                ) : (\n                    <KeyboardArrowRight />\n                )}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </Box>\n    );\n  }\n  \n  TablePaginationActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n  };\n\nfunction trimAddress(addr) {\n    if (!addr) return addr;\n    let start = addr.substring(0, 8);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n}\n\nconst FarmStake = (props) => {\n    const{ stake } = props;\n    \n    let stakeList = '';\n\n    try{\n\n        return(\n            <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item>\n                    <AvatarGroup\n                        sx={{ mr:1 }}\n                    >\n                        {stake.map((farmStake, i) => \n                            <Avatar \n                                component={Paper} \n                                elevation={4}\n                                alt={farmStake.name} \n                                src={farmStake.logo}\n                                sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                            />\n                        )}\n                    </AvatarGroup>\n                </Grid>\n                <Grid item>\n                    {stake.map((farmStake, i) =>\n                        <>\n                            {i>0 && ('-')}\n                            {farmStake.name}\n                        </> \n                    )}\n                </Grid>\n            </Grid>\n        );\n    } catch(e){ \n        console.log(\"ERR: \"+e) \n    }\n    \n    return '<></>';\n}\n\nconst FarmIcon = (props) => {\n    const { farmLogoURI, farmName } = props;\n\n    return (\n       <Grid container direction=\"row\" alignItems=\"center\">\n           <Grid item>\n                <Avatar \n                    component={Paper} \n                    elevation={4}\n                    alt=\"Token\" \n                    src={farmLogoURI}\n                    sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                />\n           </Grid>\n           <Grid item sx={{ ml: 1 }}>\n                {farmName}\n           </Grid>\n       </Grid>\n   );\n};\n\nconst TokenIcon = (props) => {\n    const {tokenInfo, mint} = props;\n    const tokenLogo = tokenInfo && tokenInfo.logoURI;\n    const tokenName = tokenInfo && tokenInfo.name;\n\n    return (\n        <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n            <Grid item>\n                {tokenLogo ? \n                    <Avatar component={Paper} \n                        elevation={4}\n                        alt=\"Token\" \n                        src={tokenLogo}\n                        sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                    /> : <HelpIcon />}\n            </Grid>\n            <Grid item sx={{ ml: 1 }}>\n                {tokenName || (mint && trimAddress(mint)) || ''}\n            </Grid>\n        </Grid>\n    );\n};\n\nconst TokenFixPrice = (props) => {\n    const { tokenFormatValue, defaultFixed } = props;\n    try{\n        switch (true){\n            case (+tokenFormatValue < 0.001):{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(6)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(6))\n            }case (+tokenFormatValue < 0.1):{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(4)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(4))\n            }default:{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(defaultFixed)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(defaultFixed))\n            }\n        }\n    } catch(e) {\n        return tokenFormatValue;\n    }\n}\n\nfunction PortfolioRow(props) {\n    const { token, index } = props;\n    const [open, setOpen] = React.useState(false);\n    \n    return (\n        <React.Fragment>\n            <TableRow key={index} sx={{ '& > *': { borderBottom: 'unset' }}}>\n                <TableCell align=\"left\" sx={{borderBottom:\"none\"}}>\n                    <TokenIcon tokenInfo={token.tokenInfo} mint={token.mint} />\n                </TableCell>\n                <TableCell align=\"right\" sx={{borderBottom:\"none\"}}><TokenFixPrice tokenFormatValue={token.balance} defaultFixed={3} /></TableCell>\n                <TableCell align=\"right\" sx={{borderBottom:\"none\", flexWrap:\"nowrap!important\"}}>\n                    {token.usd_24h_change ?\n                        <>\n                        {token.usd_24h_change < 0 ?\n                            <Typography variant=\"caption\" sx={{color:\"#f00\"}}>\n                                <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n                                    <Grid item>\n                                        {token.usd_24h_change.toFixed(2)}%\n                                    </Grid>\n                                    <Grid item>\n                                        <ArrowDownwardIcon fontSize=\"0.75rem\" />\n                                    </Grid>\n                                </Grid>\n                            </Typography>\n                        :\n                            <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>\n                                <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n                                    <Grid item>\n                                        {token.usd_24h_change.toFixed(2)}%\n                                    </Grid>\n                                    <Grid item>\n                                        <ArrowUpwardIcon fontSize=\"0.75rem\" />\n                                    </Grid>\n                                </Grid>\n                            </Typography>\n                        }\n                        </>\n                    :\n                        <>\n                            -\n                        </>\n                    }\n                </TableCell>\n                <TableCell align=\"right\" sx={{borderBottom:\"none\"}}>\n                    <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>$</Typography><TokenFixPrice tokenFormatValue={token.price} defaultFixed={2} />\n                </TableCell>\n                <TableCell align=\"right\" sx={{borderBottom:\"none\"}}><Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>$</Typography><TokenFixPrice tokenFormatValue={token.value} defaultFixed={2} /></TableCell>\n                <TableCell>\n                    <SendToken mint={token.mint} name={token.tokenInfo.name} logoURI={token.tokenInfo.logoURI} balance={token.balance} conversionrate={token.value/token.balance} showTokenName={false} sendType={1} />\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nexport const ContributeTableView = (props) => {\n    const balances = props.balances || [];\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - balances.length) : 0;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    let portfolioTableCols = 7;\n    \n    return (\n        <React.Fragment>\n            <>\n                <TableContainer>\n                    <StyledTable sx={{ minWidth: 500 }} size=\"small\" aria-label=\"Portfolio Table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell><Typography variant=\"caption\">Asset</Typography></TableCell>\n                                <TableCell align=\"right\"><Typography variant=\"caption\">Balance</Typography></TableCell>\n                                <TableCell align=\"right\"></TableCell>\n                                <TableCell align=\"right\"><Typography variant=\"caption\">Price</Typography></TableCell> \n                                <TableCell align=\"right\"><Typography variant=\"caption\">Value</Typography></TableCell>\n                                <TableCell></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {(rowsPerPage > 0\n                                ? balances.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                : balances\n                            ).map((token, index) => {\n                                return (\n                                    <> \n                                        <PortfolioRow token={token} index={index} />\n                                    </>\n                                )\n                            })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={4} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                        <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                            rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                            colSpan={portfolioTableCols}\n                            count={balances.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: {\n                                'aria-label': 'rows per page',\n                                },\n                                native: true,\n                            }}\n                            //onChangePage={handleChangePage}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                            />\n                        </TableRow>\n                        </TableFooter>\n                    </StyledTable>\n                </TableContainer>\n            </>\n        </React.Fragment>\n    );\n};\n\nexport default ContributeTableView;","/Users/kirk/Solana/grape-dashboard/src/views/Farms/FarmsTable.jsx",["804","805","806"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, useTheme } from '@mui/material/styles';\n\nimport {\n    Grid,\n    Typography,\n    Collapse,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableContainer,\n    TableRow,\n    TableFooter,\n    TablePagination,\n    Paper,\n    Box,\n    Avatar,\n    AvatarGroup,\n} from '@mui/material';\n\nimport IconButton from '@mui/material/IconButton';\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\nimport LastPageIcon from '@mui/icons-material/LastPage';\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n    '& .MuiTableCell-root': {\n        borderBottom: '1px solid rgba(255,255,255,0.05)'\n    },\n}));\n\nfunction TablePaginationActions(props) {\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n  \n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n  \n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n  \n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n    \n    return (\n        <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton\n                onClick={handleBackButtonClick}\n                disabled={page === 0}\n                aria-label=\"previous page\"\n            >\n                {theme.direction === \"rtl\" ? (\n                    <KeyboardArrowRight />\n                ) : (\n                    <KeyboardArrowLeft />\n                )}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === \"rtl\" ? (\n                    <KeyboardArrowLeft />\n                ) : (\n                    <KeyboardArrowRight />\n                )}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </Box>\n    );\n  }\n  \n  TablePaginationActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n  };\n\nfunction trimAddress(addr) {\n    if (!addr) return addr;\n    let start = addr.substring(0, 8);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n}\n\nconst FarmStake = (props) => {\n    const{ stake } = props;\n    \n    let stakeList = '';\n\n    try{\n\n        return(\n            <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n                <Grid item>\n                    <AvatarGroup\n                        sx={{ mr:1 }}\n                    >\n                        {stake.map((farmStake, i) => \n                            <Avatar \n                                component={Paper} \n                                elevation={4}\n                                alt={farmStake.name} \n                                src={farmStake.logo}\n                                sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                            />\n                        )}\n                    </AvatarGroup>\n                </Grid>\n                <Grid item>\n                    {stake.map((farmStake, i) =>\n                        <>\n                            {i>0 && ('-')}\n                            {farmStake.name}\n                        </> \n                    )}\n                </Grid>\n            </Grid>\n        );\n    } catch(e){ \n        console.log(\"ERR: \"+e) \n    }\n    \n    return '<></>';\n}\n\nconst FarmIcon = (props) => {\n    const { farmLogoURI, farmName } = props;\n\n    return (\n       <Grid container direction=\"row\" alignItems=\"center\" sx={{ flexWrap:\"nowrap!important\" }}>\n           <Grid item>\n                <Avatar \n                    component={Paper} \n                    elevation={4}\n                    alt=\"Token\" \n                    src={farmLogoURI}\n                    sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                />\n           </Grid>\n           <Grid item sx={{ ml: 1 }}>\n                {farmName}\n           </Grid>\n       </Grid>\n   );\n};\n\nconst TokenFixPrice = (props) => {\n    const { tokenFormatValue, defaultFixed } = props;\n    try{\n        switch (true){\n            case (+tokenFormatValue < 0.001):{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(6)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(6))\n            }case (+tokenFormatValue < 0.1):{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(4)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(4))\n            }default:{\n                return <PretifyCommaNumber number={tokenFormatValue.toFixed(defaultFixed)} />\n                //return numberWithCommasDecimal(tokenFormatValue.toFixed(defaultFixed))\n            }\n        }\n    } catch(e) {\n        return tokenFormatValue;\n    }\n}\n\nexport const FarmsTableView = (props) => {\n    const balances = props.balances || [];\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - balances.length) : 0;\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    let portfolioTableCols = 6;\n    props.isFarm ?\n        portfolioTableCols = 5//3\n    :\n        portfolioTableCols = 6;\n\n    // When we have rewards add\n    //\n    //<TableCell align=\"center\">LP</TableCell>\n    //<TableCell align=\"center\">Value</TableCell>\n    //<TableCell align=\"right\">Pending</TableCell>\n\n    //<TableCell align=\"right\">{token.lpprice && `$${token.lpprice.toFixed(4)}`}</TableCell>\n    //<TableCell align=\"right\">{token.value && `$${token.value.toFixed(6)}`}</TableCell>\n    //<TableCell align=\"right\">{token.pendingReward}</TableCell>\n\n    return (\n        <React.Fragment>\n            \n                <TableContainer component={Paper}>\n                    <StyledTable sx={{ minWidth: 500 }} size=\"small\" aria-label=\"Farms Table\">\n                        <TableHead>\n                            {props.isFarm &&\n                                <TableRow>\n                                    <TableCell><Typography variant=\"caption\">Platform</Typography></TableCell>\n                                    <TableCell><Typography variant=\"caption\">Asset</Typography></TableCell>\n                                    <TableCell align=\"right\"><Typography variant=\"caption\">Staked LP</Typography></TableCell>\n                                    <TableCell align=\"right\"><Typography variant=\"caption\">APR</Typography></TableCell>\n                                    <TableCell align=\"right\"><Typography variant=\"caption\">Value</Typography></TableCell>\n                                </TableRow>\n                            }\n                        </TableHead>\n                        <TableBody>\n                            {(rowsPerPage > 0\n                                ? balances.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                : balances\n                            ).map((token, index) => {\n                                return props.isFarm && \n                                    <React.Fragment>\n                                        <TableRow>\n                                            <TableCell style={{ verticalAlign: 'middle' }}>\n                                                <FarmIcon farmLogoURI={token.farmLogoURI} farmName={token.farmName} />\n                                            </TableCell>\n                                            <TableCell align=\"center\" style={{ verticalAlign: 'middle' }}>\n                                                <FarmStake stake={token.farmInfo} />\n                                            </TableCell>\n                                            <TableCell align=\"right\"><TokenFixPrice tokenFormatValue={token.balance} defaultFixed={6} /></TableCell>\n                                            <TableCell align=\"right\"><TokenFixPrice tokenFormatValue={token.apr} defaultFixed={2} />%</TableCell>\n                                            <TableCell align=\"right\"><Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>$</Typography><TokenFixPrice tokenFormatValue={token.value} defaultFixed={2} /></TableCell>\n                                        </TableRow> \n                                    </React.Fragment>\n                            })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={4} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                        <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                                colSpan={portfolioTableCols}\n                                count={balances.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                SelectProps={{\n                                    inputProps: {\n                                    'aria-label': 'rows per page',\n                                    },\n                                    native: true,\n                                }}\n                                //onChangePage={handleChangePage}\n                                onPageChange={handleChangePage}\n                                onRowsPerPageChange={handleChangeRowsPerPage}\n                                ActionsComponent={TablePaginationActions}\n                            />\n                        </TableRow>\n                        </TableFooter>\n                    </StyledTable>\n                </TableContainer>\n                \n        </React.Fragment>\n    );\n};\n\nexport default FarmsTableView;","/Users/kirk/Solana/grape-dashboard/src/utils/token/ids.ts",[],"/Users/kirk/Solana/grape-dashboard/src/utils/token/tokens.ts",[],"/Users/kirk/Solana/grape-dashboard/src/utils/ftx-pay.tsx",[],"/Users/kirk/Solana/grape-dashboard/src/views/OrcaSwap/OrcaSwap.tsx",["807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859"],"import React, { FC, useCallback } from 'react';\nimport { WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction, Signer } from '@solana/web3.js';\nimport { Token, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { getOrca, OrcaFarmConfig, OrcaPool, OrcaPoolConfig } from \"@orca-so/sdk\";\nimport Decimal from \"decimal.js\";\nimport * as web3 from '@solana/web3.js';\n\nimport { styled } from '@mui/material/styles';\n\nimport {\n  Dialog,\n  Button,\n  ButtonGroup,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Avatar,\n  Grid,\n  Paper,\n  Skeleton,\n  InputLabel,\n  Tooltip,\n  Typography,\n  MenuItem\n} from '@mui/material';\n\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\n\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from '../../components/Tools/constants';\nimport { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\nimport { useSnackbar } from 'notistack';\n\nimport CircularProgress from '@mui/material/CircularProgress';\nimport HelpIcon from '@mui/icons-material/Help';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz';\nimport ArrowCircleRightIcon from '@mui/icons-material/ArrowCircleRight';\n\nfunction trimAddress(addr: string) {\n    if (!addr) return addr;\n    let start = addr.substring(0, 8);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n}\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\n\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nexport default function OrcaSwap(props: any) {\n    const [tokenSwapAvailableBalance, setPortfolioSwapTokenAvailableBalance] = React.useState(0);\n    const [portfolioPositions, setPortofolioPositions] = React.useState(props.portfolioPositions);\n    const [open, setOpen] = React.useState(false);\n    const [amounttoswap, setTokensToSwap] = React.useState(null);\n    const [userTokenBalanceInput, setTokenBalanceInput] = React.useState(0);\n    const [convertedAmountValue, setConvertedAmountValue] = React.useState(null);\n    const [tokena, setTokenA] = React.useState(null);\n    const [tokenb, setTokenB] = React.useState(null);\n    const [lpFees, setLPFees] = React.useState(null);\n    const [networkFees, setNetworkFees] = React.useState(null);\n    const [minimumOutputAmount, setMinimumOutputAmount] = React.useState(null);\n    const [priceImpact, setPriceImpact] = React.useState(null);\n    const [rate, setRate] = React.useState(null);\n    const [swapfrom, setSwapFrom] = React.useState(props.swapfrom);\n    const [swapto, setSwapTo] = React.useState(props.swapto);\n    const [tokenmap, setTokenMap] = React.useState(props.tokenmap);\n\n    const usdc_mint = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v';\n    const sol_mint = 'So11111111111111111111111111111111111111112';\n    const grape_mint = '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA';\n    const orca_mint = 'orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE';\n\n    const [loading, setLoading] = React.useState(false);\n\n    //const mint = props.mint;\n    //const logoURI = props.logoURI;\n    //const name = props.name;\n    //const balance = props.balance;\n    ///const conversionrate = props.conversionrate;\n    const freeconnection = new Connection(FREE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const orca = getOrca(connection);\n\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const { enqueueSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    const handleClickOpen = () => {\n        setTokenBalanceInput(0);\n        setTokensToSwap(0);\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    function getPortfolioTokenBalance(swapingfrom:string){\n        let withmint = '';\n        if (swapingfrom == 'USDC'){\n            withmint = usdc_mint;\n        } else if (swapingfrom == 'SOL'){\n            withmint = sol_mint;\n        } else if (swapingfrom == 'ORCA'){\n            withmint = orca_mint;\n        }\n\n        let balance = 0;\n        portfolioPositions.portfolio.map((token: any) => {\n            if (token.mint == withmint){\n                if (token.balance > 0)\n                    balance = token.balance;\n            }\n        });\n        setPortfolioSwapTokenAvailableBalance(balance);\n    }\n\n\n    const handleSelectChange = (event: SelectChangeEvent) => {\n        setSwapFrom(event.target.value);\n        getPortfolioTokenBalance(event.target.value);\n        setTokenBalanceInput(0);\n        setTokensToSwap(0);\n        setConvertedAmountValue(0);\n        setLPFees(null);\n        setNetworkFees(null);\n        setMinimumOutputAmount(null);\n        setPriceImpact(null);\n        setRate(null);\n    };\n\n    async function swapTokens(tokenPoolA: OrcaPool, tokenPoolB: OrcaPool, amountToSwap: number) {\n        try{\n            /*** Swap ***/\n            //const orcaSolPool = orca.getPool(OrcaPoolConfig.ORCA_SOL); // Default\n            //const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n            let transaction = new Transaction();\n\n            if (!tokenPoolB){\n                \n                const tokenPairA = tokenPoolA.getTokenB(); // USDC\n                const tokenAmount = new Decimal(amountToSwap); // amount in USDC\n                const quote = await tokenPoolA.getQuote(tokenPairA, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                const swapPayload = await tokenPoolA.swap(publicKey, tokenPairA, tokenAmount, convertedAmount);\n                \n                enqueueSnackbar(`Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenB().name} for at least ${convertedAmount.toNumber()} ${tokenPoolA.getTokenA().name}`,{ variant: 'info' });\n                //swapPayload.transaction.partialSign(...swapPayload.signers);\n                //const signedTransaction = await sendTransaction(swapPayload.transaction, connection);\n                const signedTransaction = await sendTransaction(swapPayload.transaction, freeconnection, {signers: swapPayload.signers});\n\n                enqueueSnackbar(`Transaction ready`,{ variant: 'info' });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`Swapped: ${signedTransaction}`,{ variant: 'success' });\n            } else{\n                const tokenPairA = tokenPoolA.getTokenA(); // SOL_USDC\n                const tokenAmount = new Decimal(amountToSwap); \n                const quote = await tokenPoolA.getQuote(tokenPairA, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                const swapPayload = await tokenPoolA.swap(publicKey, tokenPairA, tokenAmount, convertedAmount);\n                //swapPayload.transaction.partialSign(...swapPayload.signers);\n                \n                //enqueueSnackbar(`Step 1. Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenA().name} for at least ${convertedAmount.toNumber()} ${tokenPoolA.getTokenB().name}`,{ variant: 'info' });\n                const tokenPairB = tokenPoolB.getTokenB(); // GRAPE_USDC\n                const tokenAmountB = new Decimal(convertedAmount.toNumber()); \n                const quoteB = await tokenPoolB.getQuote(tokenPairB, tokenAmountB); // consider adding slippage amount\n                const convertedAmountB = quoteB.getMinOutputAmount();\n                //enqueueSnackbar(`Step 2. Preparing to swap ${tokenAmountB.toString()} ${tokenPoolB.getTokenB().name} for at least ${convertedAmountB.toNumber()} ${tokenPoolB.getTokenA().name}`,{ variant: 'info' });\n                const swapPayloadB = await tokenPoolB.swap(publicKey, tokenPairB, tokenAmountB, convertedAmountB);\n                //swapPayloadB.transaction.partialSign(...swapPayload.signers);\n                \n                enqueueSnackbar(`Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenA().name} for at least ${convertedAmountB.toNumber()} ${tokenPoolB.getTokenA().name}`,{ variant: 'info' });\n                transaction = swapPayload.transaction.add(swapPayloadB.transaction);\n                //transaction.partialSign(...swapPayload.signers);\n                //transaction.partialSign(...swapPayloadB.signers);\n                //const signedTransaction = await sendTransaction(transaction, connection);\n                const signedTransaction = await sendTransaction(transaction, freeconnection, {signers: [...swapPayload.signers, ...swapPayloadB.signers]});\n\n                enqueueSnackbar(`Transaction ready`,{ variant: 'info' });\n                await connection.confirmTransaction(signedTransaction, 'processed');\n                enqueueSnackbar(`Swapped: ${signedTransaction}`,{ variant: 'success' });\n            }\n\n            \n        } catch(e){\n            enqueueSnackbar(`${e}`,{ variant: 'error' });\n        }\n    }\n\n    async function getConvertedValue(tokenPoolA: OrcaPool, tokenPoolB: OrcaPool, amountToSwap: number) {\n        setLoading(true);\n        try{\n            if (!tokenPoolB){ // USDC_GRAPE CONVERSION\n                //const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                const tokenPair = tokenPoolA.getTokenB(); // USDC \n                const tokenAmount = new Decimal(amountToSwap); // amount in USDC\n                const quote = await tokenPoolA.getQuote(tokenPair, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                \n                const lpfees = quote.getLPFees();\n                const networkfees = quote.getNetworkFees();\n                const expectedoutputamount = quote.getExpectedOutputAmount();\n                const priceimpact = quote.getPriceImpact();\n                const rate = quote.getRate();\n                \n                setTokenA(tokenPoolA.getTokenA().name);\n                setTokenB(tokenPoolA.getTokenB().name);\n                \n                setConvertedAmountValue(expectedoutputamount.toNumber());\n                setLPFees(lpfees.toNumber());\n                setNetworkFees(networkfees.toNumber());\n                setMinimumOutputAmount(convertedAmount.toNumber());\n                setPriceImpact(priceimpact.toNumber());\n                setRate(rate.toNumber());\n            } else { // SOL_USDC ... GRAPE_USDC conversion\n                const tokenPairA = tokenPoolA.getTokenA(); // SOL_USDC\n                const tokenAmount = new Decimal(amountToSwap); \n                const quote = await tokenPoolA.getQuote(tokenPairA, tokenAmount);\n                const convertedAmount = quote.getMinOutputAmount();\n                //enqueueSnackbar(`Step 1. Preparing to swap ${tokenAmount.toString()} ${tokenPoolA.getTokenA().name} for at least ${convertedAmount.toNumber()} ${tokenPoolA.getTokenB().name}`,{ variant: 'info' });\n                const tokenPairB = tokenPoolB.getTokenB(); // GRAPE_USDC\n                const tokenAmountB = new Decimal(convertedAmount.toNumber()); \n                const quoteB = await tokenPoolB.getQuote(tokenPairB, tokenAmountB); // consider adding slippage amount\n                const convertedAmountB = quoteB.getMinOutputAmount();\n                //enqueueSnackbar(`Step 2. Preparing to swap ${tokenAmountB.toString()} ${tokenPoolB.getTokenB().name} for at least ${convertedAmountB.toNumber()} ${tokenPoolB.getTokenA().name}`,{ variant: 'info' });\n                //const swapPayloadB = await tokenPoolB.swap(publicKey, tokenPairB, tokenAmountB, convertedAmountB);\n\n                setTokenA(tokenPoolA.getTokenA().name);\n                setTokenB(tokenPoolB.getTokenB().name);\n                \n                const lpfees = quote.getLPFees();\n                const networkfees = quote.getNetworkFees();\n                const expectedoutputamount = quote.getExpectedOutputAmount();\n                const priceimpact = quote.getPriceImpact();\n                const rate = quote.getRate();\n\n                const lpfeesB = quoteB.getLPFees();\n                const networkfeesB = quoteB.getNetworkFees();\n                const expectedoutputamountB = quoteB.getExpectedOutputAmount();\n                const priceimpactB = quoteB.getPriceImpact();\n                const rateB = quoteB.getRate();\n                /*\n                console.log(\"lpfees: \"+lpfees.toNumber());\n                console.log(\"networkfees: \"+networkfees.toNumber());\n                console.log(\"expectedoutputamount: \"+expectedoutputamount.toNumber());\n                console.log(\"priceimpact: \"+priceimpact);\n                console.log(\"rate: \"+rate.toNumber());\n                console.log(\"***\");\n                console.log(\"lpfeesB: \"+lpfeesB.toNumber());\n                console.log(\"networkfeesB: \"+networkfeesB.toNumber());\n                console.log(\"expectedoutputamountB: \"+expectedoutputamountB.toNumber());\n                console.log(\"priceimpactB: \"+priceimpactB);\n                console.log(\"rateB: \"+rateB.toNumber());\n                */\n                setConvertedAmountValue(expectedoutputamountB.toNumber());\n                setLPFees(lpfees.toNumber()+lpfeesB.toNumber());\n                setNetworkFees(networkfees.toNumber());\n\n                setMinimumOutputAmount(convertedAmountB.toNumber());\n                setPriceImpact(priceimpact.toNumber()+priceimpactB.toNumber());\n                \n                //1 SOL = rate.toNumber() USDC\n                //1 USDC = X grape\n                \n                setRate(rateB.toNumber()*rate.toNumber());\n            }\n        } catch(e){\n            enqueueSnackbar(`${e}`,{ variant: 'error' });\n        }\n        setLoading(false);\n    }\n    \n    function HandleSendSubmit(event: any) {\n        event.preventDefault();\n        if ((amounttoswap > 0)&&(amounttoswap < 99999999999999)){\n            if ((swapfrom == 'USDC') && (swapto == 'GRAPE')){\n                const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);    \n                swapTokens(tokenPool, null, amounttoswap);\n                handleClose();\n            } else if ((swapfrom == 'SOL') && (swapto == 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.SOL_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                swapTokens(tokenPoolA, tokenPoolB, amounttoswap);\n                handleClose();\n            } else if ((swapfrom == 'ORCA') && (swapto == 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.ORCA_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                swapTokens(tokenPoolA, tokenPoolB, amounttoswap);\n                handleClose();\n            }\n        }else{\n            setConvertedAmountValue(0);\n            enqueueSnackbar(`Enter the balance you would like to send`,{ variant: 'error' });\n        }\n    }\n\n    React.useEffect(() => {\n        getPortfolioTokenBalance(swapfrom);\n    }, []);\n\n    React.useEffect(() => {\n\n        // get the balance for this token\n        if ((amounttoswap > 0)&&(amounttoswap < 99999999999999)){\n            if ((swapfrom == 'USDC') && (swapto == 'GRAPE')){\n                const tokenPool = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                getConvertedValue(tokenPool, null, amounttoswap);\n            } else if ((swapfrom == 'SOL') && (swapto == 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.SOL_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                getConvertedValue(tokenPoolA, tokenPoolB,amounttoswap);\n            } else if ((swapfrom == 'ORCA') && (swapto == 'GRAPE')){\n                const tokenPoolA = orca.getPool(OrcaPoolConfig.ORCA_USDC);\n                const tokenPoolB = orca.getPool(OrcaPoolConfig.GRAPE_USDC);\n                getConvertedValue(tokenPoolA, tokenPoolB,amounttoswap);\n            }\n        } else{\n            setConvertedAmountValue(0);\n            setLPFees(null);\n            setNetworkFees(null);\n            setMinimumOutputAmount(null);\n            setPriceImpact(null);\n            setRate(null);\n        }\n    }, [amounttoswap]);\n    \n    return (\n        <div>\n            <Button\n                variant=\"outlined\" \n                //aria-controls={menuId}\n                title={`Swap ${swapfrom} > ${swapto}`}\n                onClick={handleClickOpen}\n                size=\"small\"\n                //onClick={isConnected ? handleProfileMenuOpen : handleOpen}\n                >\n                {swapfrom} <SwapHorizIcon sx={{mr:1,ml:1}} /> {swapto}\n            </Button>\n        <BootstrapDialog\n            onClose={handleClose}\n            aria-labelledby=\"customized-dialog-title\"\n            open={open}\n            PaperProps={{ \n                style: {\n                    background: 'linear-gradient(to right, #251a3a, #000000)',\n                    boxShadow: '3',\n                    border: '1px solid rgba(255,255,255,0.15)',\n                    borderTop: '1px solid rgba(255,255,255,0.3)',\n                    borderRadius: '20px',\n                    padding:'4',\n                    },\n                }}\n        >   \n            <form onSubmit={HandleSendSubmit}>\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    Swap\n                </BootstrapDialogTitle>\n                <DialogContent dividers>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>     \n                                    <Grid container>\n                                        <Grid item xs={6}> \n                                            <FormControl> \n                                                <InputLabel id=\"from-label\">From</InputLabel>\n                                                <Select\n                                                    labelId=\"from-label\"\n                                                    id=\"from-select-dropdown\"\n                                                    fullWidth\n                                                    value={swapfrom}\n                                                    onChange={handleSelectChange}\n                                                    label=\"From\"\n                                                    >\n                                                    <MenuItem value=\"USDC\">USDC</MenuItem>\n                                                    <MenuItem value=\"SOL\">SOL</MenuItem>\n                                                    <MenuItem value=\"ORCA\">ORCA</MenuItem>\n                                                </Select>\n                                            </FormControl>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField \n                                                id=\"swap-token-amount\" \n                                                inputRef={input => input && input.focus()}\n                                                fullWidth \n                                                placeholder=\"0.00\" \n                                                autoComplete=\"off\"\n                                                variant=\"outlined\"\n                                                //value={parseFloat((userTokenBalanceInput).toString().replace(/^0|[1-9]+/, ''))}\n                                                value={userTokenBalanceInput}\n                                                type=\"number\"\n                                                onChange={(e) => {\n                                                    // here add an additional check if valid number\n                                                    // let regex = \n                                                    // regex.text(e.target.value){\n                                                    setTokensToSwap(e.target.value)\n                                                    setTokenBalanceInput(+e.target.value)\n                                                    // }\n                                                }}\n                                                InputProps={{\n                                                    inputProps: {\n                                                        step: 0.000000001,\n                                                        style: {\n                                                            textAlign:'right'\n                                                        }\n                                                    }\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    <Grid item xs={2}>\n                                                    \n                                    </Grid>\n                                    <Grid item xs={10}\n                                        sx={{textAlign:'right'}}\n                                    >\n                                        <Typography\n                                            variant=\"caption\"  \n                                        >\n                                            Balance: {tokenSwapAvailableBalance} {swapfrom}\n                                            <ButtonGroup variant=\"text\" size=\"small\" aria-label=\"outlined primary button group\" sx={{ml:1}}>\n                                                <Button \n                                                    onClick={() => {\n                                                        setTokensToSwap(tokenSwapAvailableBalance);\n                                                        setTokenBalanceInput(tokenSwapAvailableBalance);\n                                                    }}\n                                                > \n                                                    Max \n                                                </Button>\n                                                <Button  \n                                                    onClick={() => {\n                                                        setTokensToSwap(+tokenSwapAvailableBalance/2);\n                                                        setTokenBalanceInput(+tokenSwapAvailableBalance/2);\n                                                    }}\n                                                > \n                                                    Half\n                                                </Button>\n                                            </ButtonGroup>\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <Grid container>\n                                    <Grid item xs={6}> \n                                        <FormControl> \n                                            <InputLabel id=\"to-label\">To</InputLabel>\n                                            <Select\n                                                labelId=\"to-label\"\n                                                id=\"to-select-dropdown\"\n                                                fullWidth\n                                                value={swapto}\n                                                label=\"To\"\n                                                disabled \n                                                defaultValue=\"Disabled\"\n                                                >\n                                                <MenuItem value=\"GRAPE\">GRAPE</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <TextField \n                                            id=\"swap-result\" \n                                            fullWidth \n                                            autoComplete=\"off\"\n                                            value={convertedAmountValue}\n                                            type=\"number\"\n                                            variant=\"outlined\"\n                                            disabled \n                                            defaultValue=\"Disabled\"\n                                            InputProps={{\n                                                inputProps: {\n                                                    style: {\n                                                        textAlign:'right'\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <p>\n                        {!loading ?\n                            <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>\n                                {priceImpact &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Price Impact <Tooltip title={`Swaping shifts the ratio of tokens in the pool, which will cause a change in the price per token`}><HelpOutlineIcon sx={{ fontSize:14  }}/></Tooltip>\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {(priceImpact).toFixed(2)}%\n                                        </Grid>\n                                    </Grid>\n                                } \n                                {minimumOutputAmount &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Minimum Received <Tooltip title={`1% slippage tolerance`}><HelpOutlineIcon sx={{ fontSize:14  }}/></Tooltip>\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {minimumOutputAmount.toFixed(6)} {swapto}\n                                        </Grid>\n                                    </Grid>\n                                } \n\n                                {rate &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Rate\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {rate.toFixed(6)} {swapto} per {swapfrom}\n                                        </Grid>\n                                    </Grid>\n                                } \n                                {lpFees &&\n                                    <Grid container spacing={1}>\n                                        <>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                            SWAP Fees <Tooltip title={`ORCA Swap Fees (to LPs): including 0.05% split 80/20 Orca Treasury and Orca Impact Fund`}><HelpOutlineIcon sx={{ fontSize:14  }}/></Tooltip>\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {swapfrom != 'SOL' ?\n                                                <>\n                                                {(lpFees/amounttoswap*100).toFixed(2)}% = ${lpFees.toFixed(6)}\n                                                </>\n                                            :\n                                                <>{(0.30)}% + {(0.30)}% = ~${lpFees.toFixed(6)*2}</>\n                                            }\n                                        </Grid>\n                                        </>\n                                    </Grid>\n                                } \n                                {networkFees &&\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        >\n                                        Network Fees\n                                        </Grid>\n                                        <Grid item xs={6}\n                                            sx={{\n                                                textAlign:'right'\n                                            }}\n                                        > \n                                            {(networkFees/web3.LAMPORTS_PER_SOL)} SOL\n                                        </Grid>\n                                    </Grid>\n                                } \n                            </Typography>\n                        :\n                            <Typography variant=\"caption\" sx={{color:\"#aaaaaa\"}}>\n                                <Grid container spacing={1}>\n                                    <Grid item xs={12} \n                                            sx={{\n                                                textAlign:'center'\n                                            }}>\n                                        loading...\n                                    </Grid>\n                                </Grid>\n                            </Typography>\n                        }\n                        </p>\n                        \n                </DialogContent>\n                <DialogActions>\n                    <Button     \n                        fullWidth\n                        type=\"submit\"\n                        variant=\"outlined\" \n                        title=\"Swap\"\n                        disabled={userTokenBalanceInput > tokenSwapAvailableBalance}\n                        sx={{\n                            margin:1\n                        }}>\n                        Swap\n                    </Button>\n                </DialogActions>\n            </form>\n        </BootstrapDialog>\n        </div>\n    );\n}","/Users/kirk/Solana/grape-dashboard/src/views/SendToken/SendToken.tsx",["860","861","862","863","864","865","866","867","868","869","870","871","872"],"import React, { FC, useCallback } from 'react';\nimport { WalletError, WalletNotConnectedError } from '@solana/wallet-adapter-base';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Connection, PublicKey, SystemProgram, Transaction, TransactionInstruction, Signer } from '@solana/web3.js';\nimport { Token, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nimport { GRAPE_RPC_ENDPOINT, FREE_RPC_ENDPOINT } from '../../components/Tools/constants';\nimport { GRAPE_TREASURY } from '../../components/Tools/constants';\n\nimport { styled } from '@mui/material/styles';\n\nimport {\n  Dialog,\n  Button,\n  ButtonGroup,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  MenuItem,\n  InputLabel,\n  Select,\n  IconButton,\n  Avatar,\n  Grid,\n  Paper,\n  Typography\n} from '@mui/material';\n\n\nimport { SelectChangeEvent } from '@mui/material/Select';\nimport { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\nimport { useSnackbar } from 'notistack';\n\nimport CircularProgress from '@mui/material/CircularProgress';\nimport HelpIcon from '@mui/icons-material/Help';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ArrowCircleRightIcon from '@mui/icons-material/ArrowCircleRight';\nimport ArrowCircleRightOutlinedIcon from '@mui/icons-material/ArrowCircleRightOutlined';\n\nfunction trimAddress(addr: string) {\n    if (!addr) return addr;\n    let start = addr.substring(0, 8);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n}\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\n\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nexport default function SendToken(props: any) {\n    const [open, setOpen] = React.useState(false);\n    const [amounttosend, setTokensToSend] = React.useState(null);\n    const [showTokenName, setShowTokenName] = React.useState(props.showTokenName);\n    const [toaddress, setToAddress] = React.useState(null);\n    const [userTokenBalanceInput, setTokenBalanceInput] = React.useState(0);\n    const [convertedAmountValue, setConvertedAmountValue] = React.useState(null);\n    const mint = props.mint;\n    const logoURI = props.logoURI;\n    const name = props.name;\n    const balance = props.balance;\n    const conversionrate = props.conversionrate;\n    const sendtype = props.sendType || 0; // 0 regular 1 to grape treasury\n    const [memotype, setMemoType] = React.useState(0);\n    const [memoref, setMemoRef] = React.useState('');\n    const [memonotes, setMemoNotes] = React.useState(''); \n    const [memoText, setMemoText] = React.useState(null); \n    const freeconnection = new Connection(FREE_RPC_ENDPOINT);\n    const { connection } = useConnection();\n    const { publicKey, wallet, sendTransaction } = useWallet();\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n    const handleClickOpen = () => {\n\n        if (sendtype === 1) \n            setToAddress(GRAPE_TREASURY);\n\n        setTokenBalanceInput(0);\n        setConvertedAmountValue(0);\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSelectChange = (event: SelectChangeEvent) => {\n        setMemoType(+(event.target.value as string));\n      };\n\n    async function transferTokens(tokenMintAddress: string, to: string, amount: number) {\n        const fromWallet = publicKey;\n        const toWallet = new PublicKey(toaddress);\n        const mintPubkey = new PublicKey(tokenMintAddress);\n        const amountToSend = +amounttosend;\n        const tokenAccount = new PublicKey(mintPubkey);\n        \n\n        let GRAPE_TT_MEMO = {\n            status:1, // status\n            type:memotype, // AMA - SETUP \n            ref:memoref, // SOURCE\n            notes:memonotes\n        };\n        \n        if (memoText){\n            GRAPE_TT_MEMO = memoText\n        }\n        \n\n        if (tokenMintAddress == \"So11111111111111111111111111111111111111112\"){ // Check if SOL\n            const decimals = 9;\n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const transaction = new Transaction()\n            .add(\n                SystemProgram.transfer({\n                    fromPubkey: fromWallet,\n                    toPubkey: toWallet,\n                    lamports: adjustedAmountToSend,\n                })\n            ).add(\n                new TransactionInstruction({\n                    keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                    data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                    programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                })\n            );\n            try{\n                enqueueSnackbar(`Preparing to send ${amountToSend} ${name} to ${toaddress}`,{ variant: 'info' });\n                const signature = await sendTransaction(transaction, freeconnection);\n                const snackprogress = (key:any) => (\n                    <CircularProgress sx={{padding:'10px'}} />\n                );\n                const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                await connection.confirmTransaction(signature, 'processed');\n                closeSnackbar(cnfrmkey);\n                const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank'  sx={{color:'white'}}>\n                            Signature: {signature}\n                        </Button>\n                );\n                enqueueSnackbar(`Sent ${amountToSend} ${name} to ${toaddress}`,{ variant: 'success', action });\n            }catch(e){\n                enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n            } \n        } else{\n            const accountInfo = await connection.getParsedAccountInfo(tokenAccount);\n            const accountParsed = JSON.parse(JSON.stringify(accountInfo.value.data));\n            const decimals = accountParsed.parsed.info.decimals;\n\n            let fromAta = await Token.getAssociatedTokenAddress( // calculate from ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                fromWallet // from owner\n            );\n            \n            let toAta = await Token.getAssociatedTokenAddress( // calculate to ATA\n                ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                mintPubkey, // mint\n                toWallet // to owner\n            );\n            \n            const adjustedAmountToSend = amountToSend * Math.pow(10, decimals);\n            const receiverAccount = await connection.getAccountInfo(toAta);\n            \n            if (receiverAccount === null) { // initialize token\n                const transaction = new Transaction()\n                .add(\n                    Token.createAssociatedTokenAccountInstruction(\n                        ASSOCIATED_TOKEN_PROGRAM_ID, // always ASSOCIATED_TOKEN_PROGRAM_ID\n                        TOKEN_PROGRAM_ID, // always TOKEN_PROGRAM_ID\n                        mintPubkey, // mint\n                        toAta, // ata\n                        toWallet, // owner of token account\n                        fromWallet // fee payer\n                    )\n                )\n                .add(\n                    Token.createTransferInstruction(\n                        TOKEN_PROGRAM_ID,\n                        fromAta,\n                        toAta,\n                        publicKey,\n                        [],\n                        adjustedAmountToSend,\n                    )\n                ).add(\n                    new TransactionInstruction({\n                        keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                        data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                    })\n                );\n                \n                try{\n                    enqueueSnackbar(`Preparing to send ${amountToSend} ${name} to ${toaddress}`,{ variant: 'info' });\n                    const signature = await sendTransaction(transaction, freeconnection);\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await connection.confirmTransaction(signature, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank' sx={{color:'white'}} >\n                            Signature: {signature}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Sent ${amountToSend} ${name} to ${toaddress}`,{ variant: 'success', action });\n                }catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                } \n            } else{ // token already in wallet\n                const transaction = new Transaction()\n                .add(\n                    Token.createTransferInstruction(\n                    TOKEN_PROGRAM_ID,\n                    fromAta,\n                    toAta,\n                    publicKey,\n                    [],\n                    adjustedAmountToSend,\n                    )\n                )\n                .add(\n                    new TransactionInstruction({\n                        keys: [{ pubkey: fromWallet, isSigner: true, isWritable: true }],\n                        data: Buffer.from(JSON.stringify(GRAPE_TT_MEMO), 'utf-8'),\n                        programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n                    })\n                );\n                \n                try{\n                    enqueueSnackbar(`Preparing to send ${amountToSend} ${name} to ${toaddress}`,{ variant: 'info' });\n                    const signature = await sendTransaction(transaction, freeconnection);\n                    const snackprogress = (key:any) => (\n                        <CircularProgress sx={{padding:'10px'}} />\n                    );\n                    const cnfrmkey = enqueueSnackbar(`Confirming transaction`,{ variant: 'info', action:snackprogress, persist: true });\n                    await connection.confirmTransaction(signature, 'processed');\n                    closeSnackbar(cnfrmkey);\n                    const action = (key:any) => (\n                        <Button href={`https://explorer.solana.com/tx/${signature}`} target='_blank' sx={{color:'white'}} >\n                            Signature: {signature}\n                        </Button>\n                    );\n                    enqueueSnackbar(`Sent ${amountToSend} ${name} to ${toaddress}`,{ variant: 'success', action });\n                }catch(e){\n                    closeSnackbar();\n                    enqueueSnackbar(`Error: ${(e)}`,{ variant: 'error' });\n                } \n            }\n        }\n    }\n    \n    function HandleSendSubmit(event: any) {\n        event.preventDefault();\n        if (amounttosend >= 0){\n            if (toaddress){\n                if ((toaddress.length >= 32) && \n                    (toaddress.length <= 44)){ // very basic check / remove and add twitter handle support (handles are not bs58)\n                    transferTokens(mint, toaddress, amounttosend);\n                    handleClose();\n                } else{\n                    // Invalid Wallet ID\n                    enqueueSnackbar(`Enter a valid Wallet Address!`,{ variant: 'error' });\n                    console.log(\"INVALID WALLET ID\");\n                }\n            } else{\n                enqueueSnackbar(`Enter a valid Wallet Address!`,{ variant: 'error' });\n            }\n        }else{\n            enqueueSnackbar(`Enter the balance you would like to send`,{ variant: 'error' });\n        }\n    }\n\n    React.useEffect(() => {\n         setConvertedAmountValue(amounttosend*conversionrate);\n    }, [amounttosend]);\n    \n    return (\n        <div>\n\n            \n\n            {showTokenName ? \n                <Button\n                    variant=\"outlined\" \n                    //aria-controls={menuId}\n                    title={`Send ${name}`}\n                    onClick={handleClickOpen}\n                    size=\"small\"\n                    //onClick={isConnected ? handleProfileMenuOpen : handleOpen}\n                    >\n                    <ArrowCircleRightIcon sx={{mr:1}} /> {name}   \n                </Button>\n            :\n                <IconButton \n                    color=\"primary\"\n                    title={`Send ${name}`}\n                    size=\"small\"\n                    aria-label=\"Send\" \n                    onClick={handleClickOpen}>\n                    <ArrowCircleRightOutlinedIcon fontSize=\"small\" />\n                </IconButton>\n            }   \n        <BootstrapDialog\n            onClose={handleClose}\n            aria-labelledby=\"customized-dialog-title\"\n            open={open}\n            PaperProps={{ \n                style: {\n                    background: 'linear-gradient(to right, #251a3a, #000000)',\n                    boxShadow: '3',\n                    border: '1px solid rgba(255,255,255,0.15)',\n                    borderTop: '1px solid rgba(255,255,255,0.3)',\n                    borderRadius: '20px',\n                    padding:'4'\n                    },\n                }}\n        >\n            <form onSubmit={HandleSendSubmit}>\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    Send {name}\n                </BootstrapDialogTitle>\n                <DialogContent dividers>\n                    <FormControl>\n                        <Grid container spacing={2}>\n                            <Grid item xs={4}>\n                                \n                            <Grid container direction=\"row\" alignItems=\"center\">\n                                <Grid item>\n                                    {logoURI ? \n                                        <Avatar component={Paper} \n                                            elevation={4}\n                                            alt=\"Token\" \n                                            src={logoURI}\n                                            sx={{ width: 28, height: 28, bgcolor: \"#222\" }}\n                                        /> : <HelpIcon />}\n                                </Grid>\n                                <Grid item sx={{ ml: 1 }}>\n                                    {name || (mint && trimAddress(mint)) || ''}\n                                </Grid>\n                            </Grid>\n                            </Grid>\n                            <Grid item xs={8}>\n                                <TextField \n                                    id=\"send-token-amount\" \n                                    fullWidth \n                                    placeholder=\"0.00\" \n                                    variant=\"standard\" \n                                    autoComplete=\"off\"\n                                    //value={(userTokenBalanceInput).toString().replace(/^0+/, '')}\n                                    value={userTokenBalanceInput}\n                                    type=\"number\"\n                                    onChange={(e) => {\n                                        // here add an additional check if valid number\n                                        // let regex = \n                                        // regex.text(e.target.value){\n                                        setTokensToSend(e.target.value)\n                                        setTokenBalanceInput(+e.target.value)\n                                        // }\n                                    }}\n                                    InputProps={{\n                                        inputProps: {\n                                            step: 0.000000001,\n                                            style: {\n                                                textAlign:'right'\n                                            }\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography\n                                    variant=\"caption\"\n                                >\n                                    Balance: {balance} \n                                    <ButtonGroup variant=\"text\" size=\"small\" aria-label=\"outlined primary button group\" sx={{ml:1}}>\n                                        <Button \n                                            onClick={() => {\n                                                setTokensToSend(balance)\n                                                setTokenBalanceInput(+balance) }}\n                                        > \n                                            Max \n                                        </Button>\n                                        <Button  \n                                            onClick={() => {\n                                                setTokensToSend(+balance/2)\n                                                setTokenBalanceInput(+balance/2) }}\n                                        > \n                                            Half\n                                        </Button>\n                                    </ButtonGroup>\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={6}\n                                sx={{\n                                    textAlign:'right'\n                                }}\n                            >\n                                <Typography\n                                    variant=\"caption\"\n                                >\n                                    {convertedAmountValue &&\n                                    <>\n                                    ~ ${convertedAmountValue.toFixed(2)}\n                                    </>\n                                    }\n                                </Typography>\n                            </Grid>\n                            \n                            {sendtype === 0 ? \n                            (\n                                <>\n                                    <Grid item xs={12}>\n                                        <TextField \n                                            id=\"send-to-address\" \n                                            fullWidth \n                                            placeholder=\"Enter any Solana address\" \n                                            label=\"To address\" \n                                            variant=\"standard\"\n                                            autoComplete=\"off\"\n                                            onChange={(e) => {setToAddress(e.target.value)}}\n                                            InputProps={{\n                                                inputProps: {\n                                                    style: {\n                                                        textAlign:'center'\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <TextField \n                                            id=\"send-to-memo\" \n                                            fullWidth \n                                            placeholder=\"Add a memo for your transaction\" \n                                            label=\"Memo\" \n                                            variant=\"standard\"\n                                            autoComplete=\"off\"\n                                            onChange={(e) => {setMemoText(e.target.value)}}\n                                            InputProps={{\n                                                inputProps: {\n                                                    style: {\n                                                        textAlign:'left'\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n                                </>\n                            ) : (\n                                <>\n                                    <Grid item xs={12}>\n                                        <TextField \n                                            id=\"send-to-address\" \n                                            fullWidth \n                                            placeholder=\"Enter any Solana address\" \n                                            label=\"To address\" \n                                            variant=\"standard\"\n                                            autoComplete=\"off\"\n                                            value={GRAPE_TREASURY}\n                                            disabled={true}\n                                            onChange={(e) => {setToAddress(e.target.value)}}\n                                            InputProps={{\n                                                inputProps: {\n                                                    style: {\n                                                        textAlign:'center'\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item xs={12}>\n                                        <FormControl fullWidth>\n                                            <InputLabel id=\"demo-simple-select-label\">Type</InputLabel>\n                                            <Select\n                                                labelId=\"demo-simple-select-label\"\n                                                id=\"demo-simple-select\"\n                                                value={(memotype.toString())}\n                                                label=\"Type\"\n                                                onChange={handleSelectChange}\n                                            >\n                                                <MenuItem value={8}>Tools</MenuItem>\n                                                <MenuItem value={1}>AMA</MenuItem>\n                                                <MenuItem value={2}>Content</MenuItem>\n                                                <MenuItem value={3}>Development</MenuItem>\n                                                <MenuItem value={4}>Events</MenuItem>\n                                                <MenuItem value={5}>Moderation</MenuItem>\n                                                <MenuItem value={6}>Organization</MenuItem>\n                                                <MenuItem value={7}>Parternship</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <TextField \n                                            id=\"send-to-ref\" \n                                            fullWidth \n                                            placeholder=\"Sender\" \n                                            label=\"Sender/Community Name\" \n                                            variant=\"standard\"\n                                            autoComplete=\"off\"\n                                            onChange={(e) => {setMemoRef(e.target.value)}}\n                                            InputProps={{\n                                                inputProps: {\n                                                    style: {\n                                                        textAlign:'left'\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <TextField \n                                            id=\"send-to-notes\" \n                                            fullWidth \n                                            placeholder=\"Notes\" \n                                            label=\"Contribution Reason\" \n                                            variant=\"standard\"\n                                            autoComplete=\"off\"\n                                            onChange={(e) => {setMemoNotes(e.target.value)}}\n                                            InputProps={{\n                                                inputProps: {\n                                                    style: {\n                                                        textAlign:'left'\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n                                </>\n                            )}\n\n                        </Grid>\n                    </FormControl>\n                </DialogContent>\n                <DialogActions>\n                    <Button     \n                        fullWidth\n                        type=\"submit\"\n                        variant=\"outlined\" \n                        title=\"Send\"\n                        disabled={\n                            (userTokenBalanceInput > balance) || (userTokenBalanceInput <= 0)}\n                        sx={{\n                            margin:1\n                        }}>\n                        Send\n                    </Button>\n                </DialogActions>\n            </form>\n        </BootstrapDialog>\n        </div>\n    );\n}","/Users/kirk/Solana/grape-dashboard/src/views/TopHolders/TopHolders.tsx",["873","874","875","876","877","878"],"import React, { FC, useCallback } from 'react';\n\nimport { styled } from '@mui/material/styles';\n\nimport {\n  Dialog,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Grid,\n  Skeleton,\n  Typography,\n  DialogTitle,\n  DialogContent,\n  Chip,\n  Avatar,\n} from '@mui/material';\n\nimport { PretifyCommaNumber } from '../../components/Tools/PretifyCommaNumber';\nimport { MakeLinkableAddress, ValidateAddress } from '../../components/Tools/WalletAddress'; // global key handling\n\nimport HelpIcon from '@mui/icons-material/Help';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport AccountBalanceIcon from '@mui/icons-material/AccountBalance';\n\nconst StyledTable = styled(Table)(({ theme }) => ({\n  '& .MuiTableCell-root': {\n    borderBottom: '1px solid rgba(255,255,255,0.05)',\n  },\n  '& .MuiTableContainer-root': {\n    backgroundColor: 'none',  \n  },\n}));\n\nfunction trimAddress(addr: string) {\n    if (!addr) return addr;\n    let start = addr.substring(0, 8);\n    let end = addr.substring(addr.length - 4);\n    return `${start}...${end}`;\n}\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nexport interface DialogTitleProps {\n  id: string;\n  children?: React.ReactNode;\n  onClose: () => void;\n}\n\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\n  const { children, onClose, ...other } = props;\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n};\n\nexport default function TopHolders(props: any) {\n    const [open, setOpen] = React.useState(false);\n    const [largestAccounts, setLargestAccounts] = React.useState(null);\n    const [tokenSupply, setTokenSupply] = React.useState(null);\n    const mint = props.mint;\n    const logoURI = props.logoURI;\n    const name = props.name;\n    \n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const GetLargestTokenAccounts = async () => {\n      const body = {\n        method: \"getTokenLargestAccounts\",\n        jsonrpc: \"2.0\",\n        params: [\n          // Get the public key of the account you want the balance for.\n          mint,\n          // add <object> (optional) Commitment\n        ],\n        \"id\":1,\n      };\n  \n      const response = await fetch(\"https://free.rpcpool.com\", {\n      //const response = await fetch(\"https://solana-api.projectserum.com/\", {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n  \n      const json = await response.json();\n      const resultValues = json.result.value\n      return resultValues;\n    };\n\n    const GetTokenSupply = async () => {\n      const body = {\n        method: \"getTokenSupply\",\n        jsonrpc: \"2.0\",\n        params: [\n          // Get the public key of the account you want the balance for.\n          mint,\n          // add <object> (optional) Commitment\n        ],\n        \"id\":2,\n      };\n  \n      const response = await fetch(\"https://free.rpcpool.com\", {\n      //const response = await fetch(\"https://solana-api.projectserum.com/\", {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n  \n      const json = await response.json();\n      const resultValues = json.result.value\n      return resultValues;\n    };\n    \n    const fetchTokenAccountData = async () => {\n      let [flargestTokenAccounts] = await Promise.all([GetLargestTokenAccounts()]);\n      setLargestAccounts(flargestTokenAccounts);\n    }\n    const fetchTokenSupply = async () => {\n      let [ftokenSupply] = await Promise.all([GetTokenSupply()]);\n      setTokenSupply(ftokenSupply);\n    }\n\n    React.useEffect(() => { \n      if (!largestAccounts){\n        fetchTokenAccountData();\n      }\n      if (!tokenSupply){\n        fetchTokenSupply();\n      }\n    }, [mint]);\n    \n    return (\n      <React.Fragment>\n            <Button\n                variant=\"outlined\" \n                //aria-controls={menuId}\n                title={`Top 20 ${name} Holders`}\n                onClick={handleClickOpen}\n                size=\"small\"\n                >\n                <AccountBalanceIcon sx={{mr:1}} /> {name} Holders\n            </Button>\n            <BootstrapDialog\n                onClose={handleClose}\n                aria-labelledby=\"customized-dialog-title\"\n                open={open}\n                PaperProps={{ \n                    style: {\n                        background: 'linear-gradient(to right, #251a3a, #000000)',\n                        boxShadow: '3',\n                        border: '1px solid rgba(255,255,255,0.15)',\n                        borderTop: '1px solid rgba(255,255,255,0.3)',\n                        borderRadius: '20px',\n                        padding:'4'\n                        },\n                    }}\n            >\n              <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                Top 20 {name} Holders\n              </BootstrapDialogTitle>\n              <DialogContent dividers>\n\n              {tokenSupply && \n                <>\n                {+tokenSupply.amount > 0 &&\n                  <Grid container spacing={3}                  \n                    direction=\"column\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                    >\n                    <Grid item>\n                        <Typography\n                          variant=\"h6\"\n                          textAlign=\"center\"\n                        >\n                        <PretifyCommaNumber number={parseFloat(tokenSupply.uiAmountString).toFixed(2)} />\n                        <br/>\n                        <Chip \n                          avatar={<Avatar alt={name} src={logoURI} />}\n                          color=\"primary\"\n                          size=\"small\"\n                          label=\"Current Total Supply\" \n                          variant=\"outlined\" />\n                        </Typography>\n                    </Grid>\n                  </Grid>\n                }\n                </> \n              }\n\n                <TableContainer>\n                  <StyledTable sx={{ minWidth: 500 }} size=\"small\" aria-label=\"Portfolio Table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell align=\"center\">Address</TableCell>\n                        <TableCell align=\"right\">Holdings</TableCell>\n                        {tokenSupply && \n                          <>\n                            {+tokenSupply.amount > 0 &&\n                              <TableCell align=\"right\"></TableCell>\n                            }\n                          </>\n                        }\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {largestAccounts ? largestAccounts.map((item: any, index: number) => (\n                        <TableRow\n                          key={item.address}\n                          sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                          <TableCell component=\"th\" scope=\"row\">{index+1}</TableCell>\n                          <TableCell component=\"th\" scope=\"row\">  \n                            <MakeLinkableAddress addr={item.address} trim={4} hasextlink={true} hascopy={true} fontsize={12} />\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <PretifyCommaNumber number={parseFloat(item.uiAmountString).toFixed(2)} />\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            {tokenSupply && \n                              <>\n                                {+tokenSupply.amount > 0 &&\n                                <>\n                                {(parseFloat(item.uiAmountString)/parseFloat(tokenSupply.uiAmountString)*100).toFixed(2)}\n                                %\n                                </>\n                                }\n                              </>\n                            }\n                          </TableCell>\n                        </TableRow>\n                        ))\n                        :\n                        <React.Fragment>\n                            <TableRow>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                                <TableCell><Skeleton/></TableCell>\n                            </TableRow>\n                        </React.Fragment>\n                      }\n                    </TableBody>\n                  </StyledTable>\n                </TableContainer>\n              </DialogContent>\n            </BootstrapDialog>\n      </React.Fragment>\n    );\n}",{"ruleId":"879","severity":1,"message":"880","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"879","severity":1,"message":"883","line":1,"column":21,"nodeType":"881","messageId":"882","endLine":1,"endColumn":30},{"ruleId":"879","severity":1,"message":"884","line":1,"column":32,"nodeType":"881","messageId":"882","endLine":1,"endColumn":43},{"ruleId":"879","severity":1,"message":"885","line":3,"column":39,"nodeType":"881","messageId":"882","endLine":3,"endColumn":45},{"ruleId":"879","severity":1,"message":"886","line":10,"column":3,"nodeType":"881","messageId":"882","endLine":10,"endColumn":6},{"ruleId":"879","severity":1,"message":"887","line":20,"column":10,"nodeType":"881","messageId":"882","endLine":20,"endColumn":23},{"ruleId":"879","severity":1,"message":"888","line":20,"column":61,"nodeType":"881","messageId":"882","endLine":20,"endColumn":70},{"ruleId":"879","severity":1,"message":"889","line":21,"column":32,"nodeType":"881","messageId":"882","endLine":21,"endColumn":43},{"ruleId":"879","severity":1,"message":"890","line":21,"column":45,"nodeType":"881","messageId":"882","endLine":21,"endColumn":68},{"ruleId":"879","severity":1,"message":"891","line":22,"column":10,"nodeType":"881","messageId":"882","endLine":22,"endColumn":20},{"ruleId":"879","severity":1,"message":"892","line":22,"column":22,"nodeType":"881","messageId":"882","endLine":22,"endColumn":29},{"ruleId":"879","severity":1,"message":"893","line":22,"column":31,"nodeType":"881","messageId":"882","endLine":22,"endColumn":44},{"ruleId":"879","severity":1,"message":"894","line":22,"column":46,"nodeType":"881","messageId":"882","endLine":22,"endColumn":57},{"ruleId":"879","severity":1,"message":"895","line":22,"column":59,"nodeType":"881","messageId":"882","endLine":22,"endColumn":72},{"ruleId":"879","severity":1,"message":"896","line":25,"column":10,"nodeType":"881","messageId":"882","endLine":25,"endColumn":21},{"ruleId":"879","severity":1,"message":"897","line":47,"column":3,"nodeType":"881","messageId":"882","endLine":47,"endColumn":18},{"ruleId":"879","severity":1,"message":"898","line":59,"column":30,"nodeType":"881","messageId":"882","endLine":59,"endColumn":47},{"ruleId":"879","severity":1,"message":"899","line":76,"column":7,"nodeType":"881","messageId":"882","endLine":76,"endColumn":13},{"ruleId":"879","severity":1,"message":"900","line":1,"column":23,"nodeType":"881","messageId":"882","endLine":1,"endColumn":33},{"ruleId":"879","severity":1,"message":"901","line":16,"column":7,"nodeType":"881","messageId":"882","endLine":16,"endColumn":20},{"ruleId":"879","severity":1,"message":"902","line":1,"column":44,"nodeType":"881","messageId":"882","endLine":1,"endColumn":52},{"ruleId":"903","severity":1,"message":"904","line":33,"column":14,"nodeType":"881","messageId":"905","endLine":33,"endColumn":28},{"ruleId":"879","severity":1,"message":"906","line":2,"column":10,"nodeType":"881","messageId":"882","endLine":2,"endColumn":14},{"ruleId":"879","severity":1,"message":"907","line":7,"column":8,"nodeType":"881","messageId":"882","endLine":7,"endColumn":14},{"ruleId":"879","severity":1,"message":"908","line":12,"column":8,"nodeType":"881","messageId":"882","endLine":12,"endColumn":16},{"ruleId":"879","severity":1,"message":"909","line":32,"column":8,"nodeType":"881","messageId":"882","endLine":32,"endColumn":22},{"ruleId":"879","severity":1,"message":"910","line":33,"column":8,"nodeType":"881","messageId":"882","endLine":33,"endColumn":21},{"ruleId":"879","severity":1,"message":"911","line":37,"column":8,"nodeType":"881","messageId":"882","endLine":37,"endColumn":21},{"ruleId":"879","severity":1,"message":"912","line":38,"column":8,"nodeType":"881","messageId":"882","endLine":38,"endColumn":17},{"ruleId":"879","severity":1,"message":"913","line":41,"column":8,"nodeType":"881","messageId":"882","endLine":41,"endColumn":22},{"ruleId":"879","severity":1,"message":"914","line":48,"column":10,"nodeType":"881","messageId":"882","endLine":48,"endColumn":18},{"ruleId":"879","severity":1,"message":"915","line":49,"column":8,"nodeType":"881","messageId":"882","endLine":49,"endColumn":15},{"ruleId":"879","severity":1,"message":"916","line":60,"column":11,"nodeType":"881","messageId":"882","endLine":60,"endColumn":22},{"ruleId":"879","severity":1,"message":"917","line":64,"column":7,"nodeType":"881","messageId":"882","endLine":64,"endColumn":12},{"ruleId":"879","severity":1,"message":"918","line":72,"column":13,"nodeType":"881","messageId":"882","endLine":72,"endColumn":22},{"ruleId":"879","severity":1,"message":"919","line":73,"column":12,"nodeType":"881","messageId":"882","endLine":73,"endColumn":25},{"ruleId":"879","severity":1,"message":"920","line":76,"column":12,"nodeType":"881","messageId":"882","endLine":76,"endColumn":22},{"ruleId":"879","severity":1,"message":"921","line":76,"column":24,"nodeType":"881","messageId":"882","endLine":76,"endColumn":37},{"ruleId":"879","severity":1,"message":"922","line":77,"column":12,"nodeType":"881","messageId":"882","endLine":77,"endColumn":21},{"ruleId":"879","severity":1,"message":"923","line":77,"column":23,"nodeType":"881","messageId":"882","endLine":77,"endColumn":35},{"ruleId":"879","severity":1,"message":"924","line":78,"column":20,"nodeType":"881","messageId":"882","endLine":78,"endColumn":29},{"ruleId":"879","severity":1,"message":"925","line":79,"column":23,"nodeType":"881","messageId":"882","endLine":79,"endColumn":35},{"ruleId":"879","severity":1,"message":"926","line":84,"column":11,"nodeType":"881","messageId":"882","endLine":84,"endColumn":18},{"ruleId":"879","severity":1,"message":"927","line":101,"column":11,"nodeType":"881","messageId":"882","endLine":101,"endColumn":23},{"ruleId":"879","severity":1,"message":"928","line":153,"column":11,"nodeType":"881","messageId":"882","endLine":153,"endColumn":30},{"ruleId":"879","severity":1,"message":"929","line":1,"column":34,"nodeType":"881","messageId":"882","endLine":1,"endColumn":41},{"ruleId":"879","severity":1,"message":"886","line":4,"column":3,"nodeType":"881","messageId":"882","endLine":4,"endColumn":6},{"ruleId":"879","severity":1,"message":"930","line":5,"column":3,"nodeType":"881","messageId":"882","endLine":5,"endColumn":13},{"ruleId":"879","severity":1,"message":"931","line":10,"column":3,"nodeType":"881","messageId":"882","endLine":10,"endColumn":16},{"ruleId":"879","severity":1,"message":"932","line":11,"column":3,"nodeType":"881","messageId":"882","endLine":11,"endColumn":16},{"ruleId":"879","severity":1,"message":"933","line":13,"column":3,"nodeType":"881","messageId":"882","endLine":13,"endColumn":7},{"ruleId":"879","severity":1,"message":"934","line":14,"column":3,"nodeType":"881","messageId":"882","endLine":14,"endColumn":17},{"ruleId":"879","severity":1,"message":"935","line":15,"column":3,"nodeType":"881","messageId":"882","endLine":15,"endColumn":15},{"ruleId":"879","severity":1,"message":"936","line":16,"column":3,"nodeType":"881","messageId":"882","endLine":16,"endColumn":15},{"ruleId":"879","severity":1,"message":"937","line":17,"column":3,"nodeType":"881","messageId":"882","endLine":17,"endColumn":11},{"ruleId":"879","severity":1,"message":"938","line":21,"column":3,"nodeType":"881","messageId":"882","endLine":21,"endColumn":11},{"ruleId":"879","severity":1,"message":"939","line":22,"column":3,"nodeType":"881","messageId":"882","endLine":22,"endColumn":19},{"ruleId":"879","severity":1,"message":"940","line":27,"column":8,"nodeType":"881","messageId":"882","endLine":27,"endColumn":22},{"ruleId":"879","severity":1,"message":"941","line":35,"column":8,"nodeType":"881","messageId":"882","endLine":35,"endColumn":15},{"ruleId":"879","severity":1,"message":"942","line":36,"column":10,"nodeType":"881","messageId":"882","endLine":36,"endColumn":19},{"ruleId":"879","severity":1,"message":"943","line":36,"column":49,"nodeType":"881","messageId":"882","endLine":36,"endColumn":71},{"ruleId":"879","severity":1,"message":"944","line":36,"column":73,"nodeType":"881","messageId":"882","endLine":36,"endColumn":79},{"ruleId":"879","severity":1,"message":"945","line":37,"column":25,"nodeType":"881","messageId":"882","endLine":37,"endColumn":43},{"ruleId":"879","severity":1,"message":"946","line":37,"column":45,"nodeType":"881","messageId":"882","endLine":37,"endColumn":59},{"ruleId":"879","severity":1,"message":"947","line":38,"column":32,"nodeType":"881","messageId":"882","endLine":38,"endColumn":54},{"ruleId":"879","severity":1,"message":"948","line":40,"column":10,"nodeType":"881","messageId":"882","endLine":40,"endColumn":30},{"ruleId":"879","severity":1,"message":"889","line":40,"column":32,"nodeType":"881","messageId":"882","endLine":40,"endColumn":43},{"ruleId":"879","severity":1,"message":"890","line":40,"column":45,"nodeType":"881","messageId":"882","endLine":40,"endColumn":68},{"ruleId":"879","severity":1,"message":"949","line":41,"column":10,"nodeType":"881","messageId":"882","endLine":41,"endColumn":25},{"ruleId":"879","severity":1,"message":"950","line":43,"column":10,"nodeType":"881","messageId":"882","endLine":43,"endColumn":23},{"ruleId":"879","severity":1,"message":"951","line":49,"column":7,"nodeType":"881","messageId":"882","endLine":49,"endColumn":22},{"ruleId":"879","severity":1,"message":"952","line":64,"column":7,"nodeType":"881","messageId":"882","endLine":64,"endColumn":27},{"ruleId":"953","severity":1,"message":"954","line":174,"column":40,"nodeType":"955","messageId":"956","endLine":174,"endColumn":42},{"ruleId":"879","severity":1,"message":"957","line":189,"column":17,"nodeType":"881","messageId":"882","endLine":189,"endColumn":30},{"ruleId":"953","severity":1,"message":"958","line":240,"column":36,"nodeType":"955","messageId":"956","endLine":240,"endColumn":38},{"ruleId":"959","severity":1,"message":"960","line":365,"column":6,"nodeType":"961","endLine":365,"endColumn":19,"suggestions":"962"},{"ruleId":"959","severity":1,"message":"963","line":384,"column":6,"nodeType":"961","endLine":384,"endColumn":17,"suggestions":"964"},{"ruleId":"879","severity":1,"message":"965","line":395,"column":10,"nodeType":"881","messageId":"882","endLine":395,"endColumn":14},{"ruleId":"879","severity":1,"message":"966","line":396,"column":11,"nodeType":"881","messageId":"882","endLine":396,"endColumn":20},{"ruleId":"879","severity":1,"message":"967","line":396,"column":22,"nodeType":"881","messageId":"882","endLine":396,"endColumn":28},{"ruleId":"879","severity":1,"message":"968","line":396,"column":30,"nodeType":"881","messageId":"882","endLine":396,"endColumn":40},{"ruleId":"879","severity":1,"message":"969","line":396,"column":42,"nodeType":"881","messageId":"882","endLine":396,"endColumn":57},{"ruleId":"879","severity":1,"message":"970","line":396,"column":59,"nodeType":"881","messageId":"882","endLine":396,"endColumn":70},{"ruleId":"879","severity":1,"message":"971","line":404,"column":12,"nodeType":"881","messageId":"882","endLine":404,"endColumn":29},{"ruleId":"879","severity":1,"message":"972","line":412,"column":9,"nodeType":"881","messageId":"882","endLine":412,"endColumn":19},{"ruleId":"879","severity":1,"message":"973","line":415,"column":11,"nodeType":"881","messageId":"882","endLine":415,"endColumn":22},{"ruleId":"879","severity":1,"message":"974","line":426,"column":11,"nodeType":"881","messageId":"882","endLine":426,"endColumn":22},{"ruleId":"879","severity":1,"message":"975","line":426,"column":24,"nodeType":"881","messageId":"882","endLine":426,"endColumn":30},{"ruleId":"879","severity":1,"message":"976","line":426,"column":32,"nodeType":"881","messageId":"882","endLine":426,"endColumn":53},{"ruleId":"879","severity":1,"message":"977","line":426,"column":55,"nodeType":"881","messageId":"882","endLine":426,"endColumn":70},{"ruleId":"879","severity":1,"message":"978","line":426,"column":72,"nodeType":"881","messageId":"882","endLine":426,"endColumn":82},{"ruleId":"879","severity":1,"message":"979","line":426,"column":97,"nodeType":"881","messageId":"882","endLine":426,"endColumn":103},{"ruleId":"879","severity":1,"message":"922","line":426,"column":105,"nodeType":"881","messageId":"882","endLine":426,"endColumn":114},{"ruleId":"879","severity":1,"message":"980","line":426,"column":116,"nodeType":"881","messageId":"882","endLine":426,"endColumn":121},{"ruleId":"879","severity":1,"message":"981","line":426,"column":123,"nodeType":"881","messageId":"882","endLine":426,"endColumn":128},{"ruleId":"879","severity":1,"message":"965","line":427,"column":10,"nodeType":"881","messageId":"882","endLine":427,"endColumn":14},{"ruleId":"879","severity":1,"message":"971","line":438,"column":12,"nodeType":"881","messageId":"882","endLine":438,"endColumn":29},{"ruleId":"879","severity":1,"message":"982","line":448,"column":12,"nodeType":"881","messageId":"882","endLine":448,"endColumn":17},{"ruleId":"879","severity":1,"message":"983","line":448,"column":19,"nodeType":"881","messageId":"882","endLine":448,"endColumn":27},{"ruleId":"879","severity":1,"message":"984","line":449,"column":11,"nodeType":"881","messageId":"882","endLine":449,"endColumn":22},{"ruleId":"879","severity":1,"message":"972","line":503,"column":9,"nodeType":"881","messageId":"882","endLine":503,"endColumn":19},{"ruleId":"985","severity":1,"message":"880","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"985","severity":1,"message":"884","line":1,"column":21,"nodeType":"881","messageId":"882","endLine":1,"endColumn":32},{"ruleId":"985","severity":1,"message":"929","line":1,"column":34,"nodeType":"881","messageId":"882","endLine":1,"endColumn":41},{"ruleId":"985","severity":1,"message":"886","line":6,"column":8,"nodeType":"881","messageId":"882","endLine":6,"endColumn":11},{"ruleId":"985","severity":1,"message":"896","line":10,"column":10,"nodeType":"881","messageId":"882","endLine":10,"endColumn":21},{"ruleId":"985","severity":1,"message":"966","line":32,"column":11,"nodeType":"881","messageId":"882","endLine":32,"endColumn":20},{"ruleId":"985","severity":1,"message":"967","line":32,"column":22,"nodeType":"881","messageId":"882","endLine":32,"endColumn":28},{"ruleId":"985","severity":1,"message":"986","line":50,"column":20,"nodeType":"881","messageId":"882","endLine":50,"endColumn":30},{"ruleId":"985","severity":1,"message":"974","line":51,"column":9,"nodeType":"881","messageId":"882","endLine":51,"endColumn":20},{"ruleId":"959","severity":1,"message":"987","line":67,"column":6,"nodeType":"961","endLine":67,"endColumn":26,"suggestions":"988"},{"ruleId":"879","severity":1,"message":"989","line":18,"column":13,"nodeType":"881","messageId":"882","endLine":18,"endColumn":20},{"ruleId":"959","severity":1,"message":"990","line":32,"column":9,"nodeType":"961","endLine":32,"endColumn":30,"suggestions":"991"},{"ruleId":"879","severity":1,"message":"992","line":14,"column":13,"nodeType":"881","messageId":"882","endLine":14,"endColumn":24},{"ruleId":"993","severity":1,"message":"994","line":59,"column":43,"nodeType":"955","messageId":"995","endLine":59,"endColumn":44},{"ruleId":"993","severity":1,"message":"994","line":62,"column":40,"nodeType":"955","messageId":"995","endLine":62,"endColumn":41},{"ruleId":"993","severity":1,"message":"994","line":62,"column":69,"nodeType":"955","messageId":"995","endLine":62,"endColumn":70},{"ruleId":"993","severity":1,"message":"994","line":62,"column":86,"nodeType":"955","messageId":"995","endLine":62,"endColumn":87},{"ruleId":"879","severity":1,"message":"952","line":88,"column":7,"nodeType":"881","messageId":"882","endLine":88,"endColumn":27},{"ruleId":"879","severity":1,"message":"900","line":12,"column":5,"nodeType":"881","messageId":"882","endLine":12,"endColumn":15},{"ruleId":"879","severity":1,"message":"884","line":23,"column":30,"nodeType":"881","messageId":"882","endLine":23,"endColumn":41},{"ruleId":"993","severity":1,"message":"994","line":36,"column":39,"nodeType":"955","messageId":"995","endLine":36,"endColumn":40},{"ruleId":"993","severity":1,"message":"994","line":45,"column":36,"nodeType":"955","messageId":"995","endLine":45,"endColumn":37},{"ruleId":"993","severity":1,"message":"994","line":45,"column":65,"nodeType":"955","messageId":"995","endLine":45,"endColumn":66},{"ruleId":"993","severity":1,"message":"994","line":45,"column":82,"nodeType":"955","messageId":"995","endLine":45,"endColumn":83},{"ruleId":"879","severity":1,"message":"996","line":89,"column":11,"nodeType":"881","messageId":"882","endLine":89,"endColumn":18},{"ruleId":"879","severity":1,"message":"997","line":8,"column":10,"nodeType":"881","messageId":"882","endLine":8,"endColumn":20},{"ruleId":"879","severity":1,"message":"998","line":2,"column":5,"nodeType":"881","messageId":"882","endLine":2,"endColumn":10},{"ruleId":"879","severity":1,"message":"934","line":5,"column":5,"nodeType":"881","messageId":"882","endLine":5,"endColumn":19},{"ruleId":"879","severity":1,"message":"935","line":6,"column":5,"nodeType":"881","messageId":"882","endLine":6,"endColumn":17},{"ruleId":"879","severity":1,"message":"936","line":7,"column":5,"nodeType":"881","messageId":"882","endLine":7,"endColumn":17},{"ruleId":"879","severity":1,"message":"999","line":8,"column":5,"nodeType":"881","messageId":"882","endLine":8,"endColumn":11},{"ruleId":"879","severity":1,"message":"1000","line":1,"column":10,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"879","severity":1,"message":"1001","line":1,"column":21,"nodeType":"881","messageId":"882","endLine":1,"endColumn":42},{"ruleId":"879","severity":1,"message":"1002","line":1,"column":73,"nodeType":"881","messageId":"882","endLine":1,"endColumn":100},{"ruleId":"879","severity":1,"message":"1003","line":5,"column":18,"nodeType":"881","messageId":"882","endLine":5,"endColumn":26},{"ruleId":"879","severity":1,"message":"1004","line":23,"column":10,"nodeType":"881","messageId":"882","endLine":23,"endColumn":28},{"ruleId":"879","severity":1,"message":"1005","line":35,"column":12,"nodeType":"881","messageId":"882","endLine":35,"endColumn":18},{"ruleId":"879","severity":1,"message":"1006","line":35,"column":20,"nodeType":"881","messageId":"882","endLine":35,"endColumn":29},{"ruleId":"879","severity":1,"message":"1007","line":36,"column":12,"nodeType":"881","messageId":"882","endLine":36,"endColumn":23},{"ruleId":"879","severity":1,"message":"1008","line":36,"column":25,"nodeType":"881","messageId":"882","endLine":36,"endColumn":39},{"ruleId":"1009","severity":1,"message":"1010","line":36,"column":58,"nodeType":"1011","messageId":"1012","endLine":36,"endColumn":67,"fix":"1013"},{"ruleId":"1014","severity":1,"message":"1015","line":36,"column":58,"nodeType":"1011","messageId":"1016","endLine":36,"endColumn":67,"fix":"1017"},{"ruleId":"879","severity":1,"message":"1018","line":37,"column":12,"nodeType":"881","messageId":"882","endLine":37,"endColumn":23},{"ruleId":"879","severity":1,"message":"1019","line":37,"column":25,"nodeType":"881","messageId":"882","endLine":37,"endColumn":39},{"ruleId":"879","severity":1,"message":"1020","line":77,"column":19,"nodeType":"881","messageId":"882","endLine":77,"endColumn":34},{"ruleId":"959","severity":1,"message":"1021","line":96,"column":8,"nodeType":"961","endLine":96,"endColumn":19,"suggestions":"1022"},{"ruleId":"879","severity":1,"message":"880","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"879","severity":1,"message":"1003","line":2,"column":18,"nodeType":"881","messageId":"882","endLine":2,"endColumn":26},{"ruleId":"879","severity":1,"message":"944","line":4,"column":85,"nodeType":"881","messageId":"882","endLine":4,"endColumn":91},{"ruleId":"879","severity":1,"message":"890","line":11,"column":23,"nodeType":"881","messageId":"882","endLine":11,"endColumn":46},{"ruleId":"879","severity":1,"message":"906","line":19,"column":3,"nodeType":"881","messageId":"882","endLine":19,"endColumn":7},{"ruleId":"879","severity":1,"message":"967","line":44,"column":24,"nodeType":"881","messageId":"882","endLine":44,"endColumn":30},{"ruleId":"879","severity":1,"message":"1023","line":51,"column":12,"nodeType":"881","messageId":"882","endLine":51,"endColumn":34},{"ruleId":"879","severity":1,"message":"1024","line":54,"column":11,"nodeType":"881","messageId":"882","endLine":54,"endColumn":18},{"ruleId":"953","severity":1,"message":"954","line":102,"column":30,"nodeType":"955","messageId":"956","endLine":102,"endColumn":32},{"ruleId":"953","severity":1,"message":"954","line":199,"column":33,"nodeType":"955","messageId":"956","endLine":199,"endColumn":35},{"ruleId":"953","severity":1,"message":"954","line":204,"column":22,"nodeType":"955","messageId":"956","endLine":204,"endColumn":24},{"ruleId":"953","severity":1,"message":"954","line":206,"column":33,"nodeType":"955","messageId":"956","endLine":206,"endColumn":35},{"ruleId":"879","severity":1,"message":"1025","line":257,"column":9,"nodeType":"881","messageId":"882","endLine":257,"endColumn":18},{"ruleId":"1026","severity":1,"message":"1027","line":340,"column":47,"nodeType":"1028","messageId":"1029","endLine":340,"endColumn":49},{"ruleId":"959","severity":1,"message":"1030","line":374,"column":8,"nodeType":"961","endLine":374,"endColumn":19,"suggestions":"1031"},{"ruleId":"879","severity":1,"message":"935","line":12,"column":3,"nodeType":"881","messageId":"882","endLine":12,"endColumn":15},{"ruleId":"879","severity":1,"message":"1032","line":28,"column":9,"nodeType":"881","messageId":"882","endLine":28,"endColumn":25},{"ruleId":"879","severity":1,"message":"1033","line":37,"column":9,"nodeType":"881","messageId":"882","endLine":37,"endColumn":25},{"ruleId":"879","severity":1,"message":"1034","line":52,"column":9,"nodeType":"881","messageId":"882","endLine":52,"endColumn":13},{"ruleId":"879","severity":1,"message":"1035","line":60,"column":9,"nodeType":"881","messageId":"882","endLine":60,"endColumn":23},{"ruleId":"879","severity":1,"message":"1036","line":67,"column":7,"nodeType":"881","messageId":"882","endLine":67,"endColumn":23},{"ruleId":"879","severity":1,"message":"930","line":4,"column":5,"nodeType":"881","messageId":"882","endLine":4,"endColumn":15},{"ruleId":"879","severity":1,"message":"1037","line":3,"column":10,"nodeType":"881","messageId":"882","endLine":3,"endColumn":19},{"ruleId":"879","severity":1,"message":"1038","line":3,"column":27,"nodeType":"881","messageId":"882","endLine":3,"endColumn":38},{"ruleId":"879","severity":1,"message":"1039","line":37,"column":10,"nodeType":"881","messageId":"882","endLine":37,"endColumn":26},{"ruleId":"953","severity":1,"message":"954","line":49,"column":21,"nodeType":"955","messageId":"956","endLine":49,"endColumn":23},{"ruleId":"953","severity":1,"message":"954","line":52,"column":26,"nodeType":"955","messageId":"956","endLine":52,"endColumn":28},{"ruleId":"879","severity":1,"message":"1040","line":71,"column":12,"nodeType":"881","messageId":"882","endLine":71,"endColumn":20},{"ruleId":"879","severity":1,"message":"1041","line":71,"column":22,"nodeType":"881","messageId":"882","endLine":71,"endColumn":33},{"ruleId":"879","severity":1,"message":"1042","line":72,"column":20,"nodeType":"881","messageId":"882","endLine":72,"endColumn":29},{"ruleId":"879","severity":1,"message":"923","line":73,"column":23,"nodeType":"881","messageId":"882","endLine":73,"endColumn":35},{"ruleId":"879","severity":1,"message":"924","line":74,"column":20,"nodeType":"881","messageId":"882","endLine":74,"endColumn":29},{"ruleId":"879","severity":1,"message":"1043","line":75,"column":24,"nodeType":"881","messageId":"882","endLine":75,"endColumn":37},{"ruleId":"879","severity":1,"message":"921","line":76,"column":24,"nodeType":"881","messageId":"882","endLine":76,"endColumn":37},{"ruleId":"879","severity":1,"message":"1044","line":77,"column":12,"nodeType":"881","messageId":"882","endLine":77,"endColumn":20},{"ruleId":"879","severity":1,"message":"1045","line":77,"column":22,"nodeType":"881","messageId":"882","endLine":77,"endColumn":33},{"ruleId":"879","severity":1,"message":"1046","line":78,"column":24,"nodeType":"881","messageId":"882","endLine":78,"endColumn":37},{"ruleId":"879","severity":1,"message":"1047","line":79,"column":24,"nodeType":"881","messageId":"882","endLine":79,"endColumn":37},{"ruleId":"879","severity":1,"message":"1048","line":80,"column":12,"nodeType":"881","messageId":"882","endLine":80,"endColumn":24},{"ruleId":"879","severity":1,"message":"1049","line":80,"column":26,"nodeType":"881","messageId":"882","endLine":80,"endColumn":41},{"ruleId":"879","severity":1,"message":"966","line":82,"column":13,"nodeType":"881","messageId":"882","endLine":82,"endColumn":22},{"ruleId":"879","severity":1,"message":"967","line":82,"column":24,"nodeType":"881","messageId":"882","endLine":82,"endColumn":30},{"ruleId":"959","severity":1,"message":"1050","line":98,"column":8,"nodeType":"961","endLine":98,"endColumn":20,"suggestions":"1051"},{"ruleId":"959","severity":1,"message":"1052","line":105,"column":8,"nodeType":"961","endLine":105,"endColumn":17,"suggestions":"1053"},{"ruleId":"879","severity":1,"message":"1054","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":26},{"ruleId":"879","severity":1,"message":"1042","line":26,"column":20,"nodeType":"881","messageId":"882","endLine":26,"endColumn":29},{"ruleId":"879","severity":1,"message":"923","line":27,"column":23,"nodeType":"881","messageId":"882","endLine":27,"endColumn":35},{"ruleId":"879","severity":1,"message":"1045","line":28,"column":22,"nodeType":"881","messageId":"882","endLine":28,"endColumn":33},{"ruleId":"879","severity":1,"message":"1054","line":1,"column":27,"nodeType":"881","messageId":"882","endLine":1,"endColumn":36},{"ruleId":"879","severity":1,"message":"932","line":21,"column":3,"nodeType":"881","messageId":"882","endLine":21,"endColumn":16},{"ruleId":"879","severity":1,"message":"931","line":22,"column":3,"nodeType":"881","messageId":"882","endLine":22,"endColumn":16},{"ruleId":"879","severity":1,"message":"1055","line":23,"column":3,"nodeType":"881","messageId":"882","endLine":23,"endColumn":20},{"ruleId":"879","severity":1,"message":"900","line":28,"column":10,"nodeType":"881","messageId":"882","endLine":28,"endColumn":20},{"ruleId":"879","severity":1,"message":"1056","line":28,"column":30,"nodeType":"881","messageId":"882","endLine":28,"endColumn":35},{"ruleId":"879","severity":1,"message":"1057","line":38,"column":31,"nodeType":"881","messageId":"882","endLine":38,"endColumn":46},{"ruleId":"879","severity":1,"message":"917","line":48,"column":7,"nodeType":"881","messageId":"882","endLine":48,"endColumn":12},{"ruleId":"879","severity":1,"message":"951","line":55,"column":7,"nodeType":"881","messageId":"882","endLine":55,"endColumn":22},{"ruleId":"993","severity":1,"message":"994","line":88,"column":41,"nodeType":"955","messageId":"995","endLine":88,"endColumn":42},{"ruleId":"993","severity":1,"message":"994","line":91,"column":38,"nodeType":"955","messageId":"995","endLine":91,"endColumn":39},{"ruleId":"993","severity":1,"message":"994","line":91,"column":67,"nodeType":"955","messageId":"995","endLine":91,"endColumn":68},{"ruleId":"993","severity":1,"message":"994","line":91,"column":84,"nodeType":"955","messageId":"995","endLine":91,"endColumn":85},{"ruleId":"879","severity":1,"message":"952","line":117,"column":7,"nodeType":"881","messageId":"882","endLine":117,"endColumn":27},{"ruleId":"879","severity":1,"message":"1058","line":149,"column":10,"nodeType":"881","messageId":"882","endLine":149,"endColumn":17},{"ruleId":"879","severity":1,"message":"979","line":152,"column":9,"nodeType":"881","messageId":"882","endLine":152,"endColumn":15},{"ruleId":"879","severity":1,"message":"1059","line":153,"column":9,"nodeType":"881","messageId":"882","endLine":153,"endColumn":17},{"ruleId":"879","severity":1,"message":"967","line":154,"column":22,"nodeType":"881","messageId":"882","endLine":154,"endColumn":28},{"ruleId":"879","severity":1,"message":"1060","line":178,"column":9,"nodeType":"881","messageId":"882","endLine":178,"endColumn":22},{"ruleId":"985","severity":1,"message":"1061","line":8,"column":3,"nodeType":"881","messageId":"882","endLine":8,"endColumn":10},{"ruleId":"985","severity":1,"message":"1062","line":15,"column":10,"nodeType":"881","messageId":"882","endLine":15,"endColumn":29},{"ruleId":"985","severity":1,"message":"900","line":16,"column":10,"nodeType":"881","messageId":"882","endLine":16,"endColumn":20},{"ruleId":"985","severity":1,"message":"1056","line":16,"column":30,"nodeType":"881","messageId":"882","endLine":16,"endColumn":35},{"ruleId":"985","severity":1,"message":"1003","line":16,"column":37,"nodeType":"881","messageId":"882","endLine":16,"endColumn":45},{"ruleId":"985","severity":1,"message":"1063","line":364,"column":9,"nodeType":"881","messageId":"882","endLine":364,"endColumn":23},{"ruleId":"985","severity":1,"message":"1054","line":2,"column":10,"nodeType":"881","messageId":"882","endLine":2,"endColumn":19},{"ruleId":"985","severity":1,"message":"1064","line":3,"column":29,"nodeType":"881","messageId":"882","endLine":3,"endColumn":38},{"ruleId":"985","severity":1,"message":"1065","line":10,"column":3,"nodeType":"881","messageId":"882","endLine":10,"endColumn":10},{"ruleId":"985","severity":1,"message":"1066","line":11,"column":3,"nodeType":"881","messageId":"882","endLine":11,"endColumn":7},{"ruleId":"985","severity":1,"message":"1067","line":12,"column":3,"nodeType":"881","messageId":"882","endLine":12,"endColumn":6},{"ruleId":"985","severity":1,"message":"1068","line":13,"column":3,"nodeType":"881","messageId":"882","endLine":13,"endColumn":7},{"ruleId":"985","severity":1,"message":"907","line":14,"column":3,"nodeType":"881","messageId":"882","endLine":14,"endColumn":9},{"ruleId":"985","severity":1,"message":"1061","line":16,"column":3,"nodeType":"881","messageId":"882","endLine":16,"endColumn":10},{"ruleId":"985","severity":1,"message":"1069","line":17,"column":3,"nodeType":"881","messageId":"882","endLine":17,"endColumn":8},{"ruleId":"985","severity":1,"message":"1070","line":23,"column":8,"nodeType":"881","messageId":"882","endLine":23,"endColumn":15},{"ruleId":"985","severity":1,"message":"1071","line":24,"column":8,"nodeType":"881","messageId":"882","endLine":24,"endColumn":28},{"ruleId":"985","severity":1,"message":"1072","line":26,"column":10,"nodeType":"881","messageId":"882","endLine":26,"endColumn":14},{"ruleId":"985","severity":1,"message":"1073","line":26,"column":24,"nodeType":"881","messageId":"882","endLine":26,"endColumn":26},{"ruleId":"985","severity":1,"message":"1074","line":26,"column":28,"nodeType":"881","messageId":"882","endLine":26,"endColumn":32},{"ruleId":"985","severity":1,"message":"1075","line":27,"column":21,"nodeType":"881","messageId":"882","endLine":27,"endColumn":25},{"ruleId":"985","severity":1,"message":"1076","line":28,"column":23,"nodeType":"881","messageId":"882","endLine":28,"endColumn":25},{"ruleId":"985","severity":1,"message":"891","line":34,"column":10,"nodeType":"881","messageId":"882","endLine":34,"endColumn":20},{"ruleId":"985","severity":1,"message":"892","line":34,"column":22,"nodeType":"881","messageId":"882","endLine":34,"endColumn":29},{"ruleId":"985","severity":1,"message":"1077","line":35,"column":10,"nodeType":"881","messageId":"882","endLine":35,"endColumn":17},{"ruleId":"985","severity":1,"message":"1078","line":35,"column":19,"nodeType":"881","messageId":"882","endLine":35,"endColumn":33},{"ruleId":"985","severity":1,"message":"1079","line":35,"column":35,"nodeType":"881","messageId":"882","endLine":35,"endColumn":42},{"ruleId":"985","severity":1,"message":"1004","line":37,"column":10,"nodeType":"881","messageId":"882","endLine":37,"endColumn":28},{"ruleId":"985","severity":1,"message":"1080","line":39,"column":8,"nodeType":"881","messageId":"882","endLine":39,"endColumn":23},{"ruleId":"985","severity":1,"message":"1081","line":40,"column":8,"nodeType":"881","messageId":"882","endLine":40,"endColumn":25},{"ruleId":"985","severity":1,"message":"912","line":41,"column":8,"nodeType":"881","messageId":"882","endLine":41,"endColumn":17},{"ruleId":"985","severity":1,"message":"939","line":42,"column":8,"nodeType":"881","messageId":"882","endLine":42,"endColumn":24},{"ruleId":"985","severity":1,"message":"1082","line":43,"column":8,"nodeType":"881","messageId":"882","endLine":43,"endColumn":19},{"ruleId":"985","severity":1,"message":"1083","line":44,"column":8,"nodeType":"881","messageId":"882","endLine":44,"endColumn":17},{"ruleId":"985","severity":1,"message":"1084","line":45,"column":8,"nodeType":"881","messageId":"882","endLine":45,"endColumn":15},{"ruleId":"985","severity":1,"message":"1085","line":46,"column":10,"nodeType":"881","messageId":"882","endLine":46,"endColumn":14},{"ruleId":"985","severity":1,"message":"1086","line":47,"column":10,"nodeType":"881","messageId":"882","endLine":47,"endColumn":23},{"ruleId":"985","severity":1,"message":"1087","line":82,"column":12,"nodeType":"881","messageId":"882","endLine":82,"endColumn":21},{"ruleId":"985","severity":1,"message":"1088","line":90,"column":25,"nodeType":"881","messageId":"882","endLine":90,"endColumn":41},{"ruleId":"985","severity":1,"message":"1089","line":91,"column":27,"nodeType":"881","messageId":"882","endLine":91,"endColumn":45},{"ruleId":"985","severity":1,"message":"1090","line":92,"column":28,"nodeType":"881","messageId":"882","endLine":92,"endColumn":47},{"ruleId":"985","severity":1,"message":"1091","line":95,"column":24,"nodeType":"881","messageId":"882","endLine":95,"endColumn":39},{"ruleId":"985","severity":1,"message":"986","line":96,"column":20,"nodeType":"881","messageId":"882","endLine":96,"endColumn":30},{"ruleId":"985","severity":1,"message":"1092","line":144,"column":9,"nodeType":"881","messageId":"882","endLine":144,"endColumn":26},{"ruleId":"985","severity":1,"message":"1093","line":154,"column":9,"nodeType":"881","messageId":"882","endLine":154,"endColumn":23},{"ruleId":"985","severity":1,"message":"1094","line":204,"column":9,"nodeType":"881","messageId":"882","endLine":204,"endColumn":22},{"ruleId":"985","severity":1,"message":"1095","line":253,"column":9,"nodeType":"881","messageId":"882","endLine":253,"endColumn":26},{"ruleId":"985","severity":1,"message":"1096","line":270,"column":9,"nodeType":"881","messageId":"882","endLine":270,"endColumn":32},{"ruleId":"985","severity":1,"message":"1097","line":303,"column":9,"nodeType":"881","messageId":"882","endLine":303,"endColumn":22},{"ruleId":"985","severity":1,"message":"1098","line":325,"column":20,"nodeType":"881","messageId":"882","endLine":325,"endColumn":23},{"ruleId":"985","severity":1,"message":"1099","line":325,"column":25,"nodeType":"881","messageId":"882","endLine":325,"endColumn":44},{"ruleId":"1100","severity":1,"message":"1101","line":360,"column":68,"nodeType":"1102","messageId":"1103","endLine":360,"endColumn":70},{"ruleId":"1100","severity":1,"message":"1101","line":360,"column":121,"nodeType":"1102","messageId":"1103","endLine":360,"endColumn":123},{"ruleId":"1100","severity":1,"message":"1101","line":361,"column":77,"nodeType":"1102","messageId":"1103","endLine":361,"endColumn":79},{"ruleId":"1100","severity":1,"message":"1101","line":361,"column":141,"nodeType":"1102","messageId":"1103","endLine":361,"endColumn":143},{"ruleId":"1100","severity":1,"message":"1101","line":375,"column":34,"nodeType":"1102","messageId":"1103","endLine":375,"endColumn":36},{"ruleId":"1100","severity":1,"message":"1101","line":375,"column":53,"nodeType":"1102","messageId":"1103","endLine":375,"endColumn":55},{"ruleId":"1100","severity":1,"message":"1101","line":376,"column":35,"nodeType":"1102","messageId":"1103","endLine":376,"endColumn":37},{"ruleId":"1100","severity":1,"message":"1101","line":376,"column":55,"nodeType":"1102","messageId":"1103","endLine":376,"endColumn":57},{"ruleId":"953","severity":1,"message":"958","line":388,"column":67,"nodeType":"955","messageId":"956","endLine":388,"endColumn":69},{"ruleId":"953","severity":1,"message":"954","line":392,"column":69,"nodeType":"955","messageId":"956","endLine":392,"endColumn":71},{"ruleId":"1026","severity":1,"message":"1027","line":399,"column":63,"nodeType":"1028","messageId":"1029","endLine":399,"endColumn":65},{"ruleId":"1100","severity":1,"message":"1101","line":402,"column":37,"nodeType":"1102","messageId":"1103","endLine":402,"endColumn":39},{"ruleId":"1100","severity":1,"message":"1101","line":402,"column":57,"nodeType":"1102","messageId":"1103","endLine":402,"endColumn":59},{"ruleId":"1100","severity":1,"message":"1101","line":403,"column":37,"nodeType":"1102","messageId":"1103","endLine":403,"endColumn":39},{"ruleId":"1100","severity":1,"message":"1101","line":403,"column":58,"nodeType":"1102","messageId":"1103","endLine":403,"endColumn":60},{"ruleId":"953","severity":1,"message":"954","line":436,"column":52,"nodeType":"955","messageId":"956","endLine":436,"endColumn":54},{"ruleId":"953","severity":1,"message":"954","line":440,"column":55,"nodeType":"955","messageId":"956","endLine":440,"endColumn":57},{"ruleId":"953","severity":1,"message":"954","line":441,"column":61,"nodeType":"955","messageId":"956","endLine":441,"endColumn":63},{"ruleId":"985","severity":1,"message":"1104","line":445,"column":25,"nodeType":"881","messageId":"882","endLine":445,"endColumn":37},{"ruleId":"985","severity":1,"message":"1105","line":446,"column":25,"nodeType":"881","messageId":"882","endLine":446,"endColumn":41},{"ruleId":"1026","severity":1,"message":"1027","line":450,"column":65,"nodeType":"1028","messageId":"1029","endLine":450,"endColumn":67},{"ruleId":"1100","severity":1,"message":"1101","line":453,"column":39,"nodeType":"1102","messageId":"1103","endLine":453,"endColumn":41},{"ruleId":"1100","severity":1,"message":"1101","line":453,"column":59,"nodeType":"1102","messageId":"1103","endLine":453,"endColumn":61},{"ruleId":"1100","severity":1,"message":"1101","line":454,"column":39,"nodeType":"1102","messageId":"1103","endLine":454,"endColumn":41},{"ruleId":"1100","severity":1,"message":"1101","line":454,"column":60,"nodeType":"1102","messageId":"1103","endLine":454,"endColumn":62},{"ruleId":"985","severity":1,"message":"1106","line":458,"column":23,"nodeType":"881","messageId":"882","endLine":458,"endColumn":30},{"ruleId":"1026","severity":1,"message":"1027","line":461,"column":71,"nodeType":"1028","messageId":"1029","endLine":461,"endColumn":73},{"ruleId":"953","severity":1,"message":"954","line":469,"column":26,"nodeType":"955","messageId":"956","endLine":469,"endColumn":28},{"ruleId":"1100","severity":1,"message":"1101","line":497,"column":28,"nodeType":"1102","messageId":"1103","endLine":497,"endColumn":30},{"ruleId":"1100","severity":1,"message":"1101","line":497,"column":47,"nodeType":"1102","messageId":"1103","endLine":497,"endColumn":49},{"ruleId":"1100","severity":1,"message":"1101","line":498,"column":33,"nodeType":"1102","messageId":"1103","endLine":498,"endColumn":35},{"ruleId":"1100","severity":1,"message":"1101","line":498,"column":70,"nodeType":"1102","messageId":"1103","endLine":498,"endColumn":72},{"ruleId":"985","severity":1,"message":"1107","line":510,"column":7,"nodeType":"881","messageId":"882","endLine":510,"endColumn":16},{"ruleId":"985","severity":1,"message":"1108","line":518,"column":17,"nodeType":"881","messageId":"882","endLine":518,"endColumn":28},{"ruleId":"985","severity":1,"message":"1109","line":546,"column":11,"nodeType":"881","messageId":"882","endLine":546,"endColumn":25},{"ruleId":"985","severity":1,"message":"1110","line":549,"column":11,"nodeType":"881","messageId":"882","endLine":549,"endColumn":31},{"ruleId":"953","severity":1,"message":"954","line":562,"column":52,"nodeType":"955","messageId":"956","endLine":562,"endColumn":54},{"ruleId":"1026","severity":1,"message":"1027","line":564,"column":63,"nodeType":"1028","messageId":"1029","endLine":564,"endColumn":65},{"ruleId":"1100","severity":1,"message":"1101","line":567,"column":37,"nodeType":"1102","messageId":"1103","endLine":567,"endColumn":39},{"ruleId":"1100","severity":1,"message":"1101","line":567,"column":57,"nodeType":"1102","messageId":"1103","endLine":567,"endColumn":59},{"ruleId":"1100","severity":1,"message":"1101","line":568,"column":37,"nodeType":"1102","messageId":"1103","endLine":568,"endColumn":39},{"ruleId":"1100","severity":1,"message":"1101","line":568,"column":58,"nodeType":"1102","messageId":"1103","endLine":568,"endColumn":60},{"ruleId":"1111","severity":1,"message":"1112","line":597,"column":7,"nodeType":"1113","messageId":"1114","endLine":599,"endColumn":8},{"ruleId":"985","severity":1,"message":"1115","line":637,"column":7,"nodeType":"881","messageId":"882","endLine":637,"endColumn":22},{"ruleId":"985","severity":1,"message":"1116","line":638,"column":7,"nodeType":"881","messageId":"882","endLine":638,"endColumn":32},{"ruleId":"985","severity":1,"message":"1117","line":641,"column":9,"nodeType":"881","messageId":"882","endLine":641,"endColumn":27},{"ruleId":"985","severity":1,"message":"1118","line":678,"column":5,"nodeType":"881","messageId":"882","endLine":678,"endColumn":10},{"ruleId":"985","severity":1,"message":"1054","line":2,"column":10,"nodeType":"881","messageId":"882","endLine":2,"endColumn":19},{"ruleId":"985","severity":1,"message":"1064","line":3,"column":29,"nodeType":"881","messageId":"882","endLine":3,"endColumn":38},{"ruleId":"985","severity":1,"message":"1065","line":10,"column":3,"nodeType":"881","messageId":"882","endLine":10,"endColumn":10},{"ruleId":"985","severity":1,"message":"1066","line":11,"column":3,"nodeType":"881","messageId":"882","endLine":11,"endColumn":7},{"ruleId":"985","severity":1,"message":"1067","line":12,"column":3,"nodeType":"881","messageId":"882","endLine":12,"endColumn":6},{"ruleId":"985","severity":1,"message":"1068","line":13,"column":3,"nodeType":"881","messageId":"882","endLine":13,"endColumn":7},{"ruleId":"985","severity":1,"message":"1061","line":16,"column":3,"nodeType":"881","messageId":"882","endLine":16,"endColumn":10},{"ruleId":"985","severity":1,"message":"1075","line":24,"column":21,"nodeType":"881","messageId":"882","endLine":24,"endColumn":25},{"ruleId":"985","severity":1,"message":"1076","line":25,"column":23,"nodeType":"881","messageId":"882","endLine":25,"endColumn":25},{"ruleId":"985","severity":1,"message":"1004","line":29,"column":10,"nodeType":"881","messageId":"882","endLine":29,"endColumn":28},{"ruleId":"985","severity":1,"message":"1119","line":32,"column":8,"nodeType":"881","messageId":"882","endLine":32,"endColumn":26},{"ruleId":"985","severity":1,"message":"1120","line":37,"column":10,"nodeType":"881","messageId":"882","endLine":37,"endColumn":19},{"ruleId":"985","severity":1,"message":"1121","line":39,"column":9,"nodeType":"881","messageId":"882","endLine":39,"endColumn":39},{"ruleId":"985","severity":1,"message":"1087","line":72,"column":12,"nodeType":"881","messageId":"882","endLine":72,"endColumn":21},{"ruleId":"985","severity":1,"message":"1122","line":80,"column":10,"nodeType":"881","messageId":"882","endLine":80,"endColumn":23},{"ruleId":"985","severity":1,"message":"1123","line":81,"column":10,"nodeType":"881","messageId":"882","endLine":81,"endColumn":25},{"ruleId":"985","severity":1,"message":"1124","line":82,"column":10,"nodeType":"881","messageId":"882","endLine":82,"endColumn":26},{"ruleId":"985","severity":1,"message":"1125","line":84,"column":10,"nodeType":"881","messageId":"882","endLine":84,"endColumn":18},{"ruleId":"985","severity":1,"message":"986","line":85,"column":20,"nodeType":"881","messageId":"882","endLine":85,"endColumn":30},{"ruleId":"985","severity":1,"message":"1126","line":86,"column":10,"nodeType":"881","messageId":"882","endLine":86,"endColumn":21},{"ruleId":"985","severity":1,"message":"1127","line":87,"column":10,"nodeType":"881","messageId":"882","endLine":87,"endColumn":19},{"ruleId":"985","severity":1,"message":"1128","line":88,"column":10,"nodeType":"881","messageId":"882","endLine":88,"endColumn":16},{"ruleId":"985","severity":1,"message":"1129","line":89,"column":10,"nodeType":"881","messageId":"882","endLine":89,"endColumn":15},{"ruleId":"985","severity":1,"message":"1130","line":92,"column":10,"nodeType":"881","messageId":"882","endLine":92,"endColumn":17},{"ruleId":"985","severity":1,"message":"1131","line":93,"column":10,"nodeType":"881","messageId":"882","endLine":93,"endColumn":15},{"ruleId":"985","severity":1,"message":"1132","line":93,"column":17,"nodeType":"881","messageId":"882","endLine":93,"endColumn":25},{"ruleId":"985","severity":1,"message":"1133","line":95,"column":9,"nodeType":"881","messageId":"882","endLine":95,"endColumn":24},{"ruleId":"985","severity":1,"message":"1134","line":108,"column":9,"nodeType":"881","messageId":"882","endLine":108,"endColumn":27},{"ruleId":"985","severity":1,"message":"1092","line":144,"column":9,"nodeType":"881","messageId":"882","endLine":144,"endColumn":26},{"ruleId":"985","severity":1,"message":"1093","line":154,"column":9,"nodeType":"881","messageId":"882","endLine":154,"endColumn":23},{"ruleId":"985","severity":1,"message":"1135","line":182,"column":9,"nodeType":"881","messageId":"882","endLine":182,"endColumn":26},{"ruleId":"985","severity":1,"message":"1136","line":192,"column":9,"nodeType":"881","messageId":"882","endLine":192,"endColumn":33},{"ruleId":"985","severity":1,"message":"1137","line":355,"column":11,"nodeType":"881","messageId":"882","endLine":355,"endColumn":23},{"ruleId":"985","severity":1,"message":"1138","line":357,"column":13,"nodeType":"881","messageId":"882","endLine":357,"endColumn":24},{"ruleId":"985","severity":1,"message":"1139","line":360,"column":13,"nodeType":"881","messageId":"882","endLine":360,"endColumn":25},{"ruleId":"1100","severity":1,"message":"1101","line":410,"column":68,"nodeType":"1102","messageId":"1103","endLine":410,"endColumn":70},{"ruleId":"1100","severity":1,"message":"1101","line":410,"column":121,"nodeType":"1102","messageId":"1103","endLine":410,"endColumn":123},{"ruleId":"1100","severity":1,"message":"1101","line":411,"column":77,"nodeType":"1102","messageId":"1103","endLine":411,"endColumn":79},{"ruleId":"1100","severity":1,"message":"1101","line":411,"column":141,"nodeType":"1102","messageId":"1103","endLine":411,"endColumn":143},{"ruleId":"1100","severity":1,"message":"1101","line":425,"column":34,"nodeType":"1102","messageId":"1103","endLine":425,"endColumn":36},{"ruleId":"1100","severity":1,"message":"1101","line":425,"column":53,"nodeType":"1102","messageId":"1103","endLine":425,"endColumn":55},{"ruleId":"1100","severity":1,"message":"1101","line":426,"column":35,"nodeType":"1102","messageId":"1103","endLine":426,"endColumn":37},{"ruleId":"1100","severity":1,"message":"1101","line":426,"column":55,"nodeType":"1102","messageId":"1103","endLine":426,"endColumn":57},{"ruleId":"953","severity":1,"message":"954","line":442,"column":65,"nodeType":"955","messageId":"956","endLine":442,"endColumn":67},{"ruleId":"953","severity":1,"message":"954","line":443,"column":69,"nodeType":"955","messageId":"956","endLine":443,"endColumn":71},{"ruleId":"1100","severity":1,"message":"1101","line":450,"column":28,"nodeType":"1102","messageId":"1103","endLine":450,"endColumn":30},{"ruleId":"1100","severity":1,"message":"1101","line":450,"column":47,"nodeType":"1102","messageId":"1103","endLine":450,"endColumn":49},{"ruleId":"1100","severity":1,"message":"1101","line":451,"column":33,"nodeType":"1102","messageId":"1103","endLine":451,"endColumn":35},{"ruleId":"1100","severity":1,"message":"1101","line":451,"column":70,"nodeType":"1102","messageId":"1103","endLine":451,"endColumn":72},{"ruleId":"1100","severity":1,"message":"1101","line":473,"column":70,"nodeType":"1102","messageId":"1103","endLine":473,"endColumn":72},{"ruleId":"1100","severity":1,"message":"1101","line":473,"column":123,"nodeType":"1102","messageId":"1103","endLine":473,"endColumn":125},{"ruleId":"1100","severity":1,"message":"1101","line":474,"column":79,"nodeType":"1102","messageId":"1103","endLine":474,"endColumn":81},{"ruleId":"1100","severity":1,"message":"1101","line":474,"column":143,"nodeType":"1102","messageId":"1103","endLine":474,"endColumn":145},{"ruleId":"985","severity":1,"message":"1140","line":540,"column":7,"nodeType":"881","messageId":"882","endLine":540,"endColumn":18},{"ruleId":"985","severity":1,"message":"1117","line":542,"column":9,"nodeType":"881","messageId":"882","endLine":542,"endColumn":27},{"ruleId":"985","severity":1,"message":"1116","line":601,"column":5,"nodeType":"881","messageId":"882","endLine":601,"endColumn":30},{"ruleId":"985","severity":1,"message":"1118","line":603,"column":5,"nodeType":"881","messageId":"882","endLine":603,"endColumn":10},{"ruleId":"985","severity":1,"message":"1054","line":2,"column":10,"nodeType":"881","messageId":"882","endLine":2,"endColumn":19},{"ruleId":"985","severity":1,"message":"1141","line":3,"column":10,"nodeType":"881","messageId":"882","endLine":3,"endColumn":17},{"ruleId":"985","severity":1,"message":"1064","line":4,"column":29,"nodeType":"881","messageId":"882","endLine":4,"endColumn":38},{"ruleId":"985","severity":1,"message":"1075","line":30,"column":21,"nodeType":"881","messageId":"882","endLine":30,"endColumn":25},{"ruleId":"985","severity":1,"message":"1076","line":31,"column":23,"nodeType":"881","messageId":"882","endLine":31,"endColumn":25},{"ruleId":"985","severity":1,"message":"912","line":41,"column":8,"nodeType":"881","messageId":"882","endLine":41,"endColumn":17},{"ruleId":"985","severity":1,"message":"1121","line":50,"column":9,"nodeType":"881","messageId":"882","endLine":50,"endColumn":39},{"ruleId":"985","severity":1,"message":"986","line":96,"column":20,"nodeType":"881","messageId":"882","endLine":96,"endColumn":30},{"ruleId":"985","severity":1,"message":"1130","line":106,"column":10,"nodeType":"881","messageId":"882","endLine":106,"endColumn":17},{"ruleId":"985","severity":1,"message":"1131","line":107,"column":10,"nodeType":"881","messageId":"882","endLine":107,"endColumn":15},{"ruleId":"985","severity":1,"message":"1132","line":107,"column":17,"nodeType":"881","messageId":"882","endLine":107,"endColumn":25},{"ruleId":"985","severity":1,"message":"1134","line":122,"column":9,"nodeType":"881","messageId":"882","endLine":122,"endColumn":27},{"ruleId":"985","severity":1,"message":"1092","line":158,"column":9,"nodeType":"881","messageId":"882","endLine":158,"endColumn":26},{"ruleId":"985","severity":1,"message":"1093","line":168,"column":9,"nodeType":"881","messageId":"882","endLine":168,"endColumn":23},{"ruleId":"985","severity":1,"message":"1135","line":196,"column":9,"nodeType":"881","messageId":"882","endLine":196,"endColumn":26},{"ruleId":"985","severity":1,"message":"1136","line":206,"column":9,"nodeType":"881","messageId":"882","endLine":206,"endColumn":33},{"ruleId":"985","severity":1,"message":"1137","line":357,"column":11,"nodeType":"881","messageId":"882","endLine":357,"endColumn":23},{"ruleId":"985","severity":1,"message":"1138","line":359,"column":13,"nodeType":"881","messageId":"882","endLine":359,"endColumn":24},{"ruleId":"985","severity":1,"message":"1139","line":362,"column":13,"nodeType":"881","messageId":"882","endLine":362,"endColumn":25},{"ruleId":"1100","severity":1,"message":"1101","line":401,"column":68,"nodeType":"1102","messageId":"1103","endLine":401,"endColumn":70},{"ruleId":"1100","severity":1,"message":"1101","line":401,"column":121,"nodeType":"1102","messageId":"1103","endLine":401,"endColumn":123},{"ruleId":"1100","severity":1,"message":"1101","line":402,"column":77,"nodeType":"1102","messageId":"1103","endLine":402,"endColumn":79},{"ruleId":"1100","severity":1,"message":"1101","line":402,"column":141,"nodeType":"1102","messageId":"1103","endLine":402,"endColumn":143},{"ruleId":"1100","severity":1,"message":"1101","line":417,"column":34,"nodeType":"1102","messageId":"1103","endLine":417,"endColumn":36},{"ruleId":"1100","severity":1,"message":"1101","line":417,"column":53,"nodeType":"1102","messageId":"1103","endLine":417,"endColumn":55},{"ruleId":"1100","severity":1,"message":"1101","line":418,"column":35,"nodeType":"1102","messageId":"1103","endLine":418,"endColumn":37},{"ruleId":"1100","severity":1,"message":"1101","line":418,"column":55,"nodeType":"1102","messageId":"1103","endLine":418,"endColumn":57},{"ruleId":"1100","severity":1,"message":"1101","line":445,"column":28,"nodeType":"1102","messageId":"1103","endLine":445,"endColumn":30},{"ruleId":"1100","severity":1,"message":"1101","line":445,"column":47,"nodeType":"1102","messageId":"1103","endLine":445,"endColumn":49},{"ruleId":"1100","severity":1,"message":"1101","line":446,"column":33,"nodeType":"1102","messageId":"1103","endLine":446,"endColumn":35},{"ruleId":"1100","severity":1,"message":"1101","line":446,"column":70,"nodeType":"1102","messageId":"1103","endLine":446,"endColumn":72},{"ruleId":"1100","severity":1,"message":"1101","line":468,"column":70,"nodeType":"1102","messageId":"1103","endLine":468,"endColumn":72},{"ruleId":"1100","severity":1,"message":"1101","line":468,"column":123,"nodeType":"1102","messageId":"1103","endLine":468,"endColumn":125},{"ruleId":"1100","severity":1,"message":"1101","line":469,"column":79,"nodeType":"1102","messageId":"1103","endLine":469,"endColumn":81},{"ruleId":"1100","severity":1,"message":"1101","line":469,"column":143,"nodeType":"1102","messageId":"1103","endLine":469,"endColumn":145},{"ruleId":"985","severity":1,"message":"1140","line":538,"column":7,"nodeType":"881","messageId":"882","endLine":538,"endColumn":18},{"ruleId":"985","severity":1,"message":"1118","line":633,"column":5,"nodeType":"881","messageId":"882","endLine":633,"endColumn":10},{"ruleId":"985","severity":1,"message":"900","line":32,"column":10,"nodeType":"881","messageId":"882","endLine":32,"endColumn":20},{"ruleId":"985","severity":1,"message":"1056","line":32,"column":30,"nodeType":"881","messageId":"882","endLine":32,"endColumn":35},{"ruleId":"985","severity":1,"message":"980","line":175,"column":11,"nodeType":"881","messageId":"882","endLine":175,"endColumn":16},{"ruleId":"985","severity":1,"message":"1142","line":175,"column":18,"nodeType":"881","messageId":"882","endLine":175,"endColumn":23},{"ruleId":"985","severity":1,"message":"1143","line":245,"column":10,"nodeType":"881","messageId":"882","endLine":245,"endColumn":18},{"ruleId":"985","severity":1,"message":"1144","line":245,"column":20,"nodeType":"881","messageId":"882","endLine":245,"endColumn":31},{"ruleId":"985","severity":1,"message":"1145","line":255,"column":9,"nodeType":"881","messageId":"882","endLine":255,"endColumn":20},{"ruleId":"985","severity":1,"message":"1146","line":266,"column":9,"nodeType":"881","messageId":"882","endLine":266,"endColumn":27},{"ruleId":"985","severity":1,"message":"1147","line":270,"column":9,"nodeType":"881","messageId":"882","endLine":270,"endColumn":34},{"ruleId":"985","severity":1,"message":"1148","line":316,"column":9,"nodeType":"881","messageId":"882","endLine":316,"endColumn":26},{"ruleId":"879","severity":1,"message":"1054","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":26},{"ruleId":"879","severity":1,"message":"902","line":1,"column":28,"nodeType":"881","messageId":"882","endLine":1,"endColumn":36},{"ruleId":"879","severity":1,"message":"907","line":5,"column":3,"nodeType":"881","messageId":"882","endLine":5,"endColumn":9},{"ruleId":"879","severity":1,"message":"1149","line":14,"column":8,"nodeType":"881","messageId":"882","endLine":14,"endColumn":22},{"ruleId":"879","severity":1,"message":"1150","line":75,"column":10,"nodeType":"881","messageId":"882","endLine":75,"endColumn":18},{"ruleId":"879","severity":1,"message":"1151","line":75,"column":20,"nodeType":"881","messageId":"882","endLine":75,"endColumn":31},{"ruleId":"879","severity":1,"message":"1152","line":5,"column":18,"nodeType":"881","messageId":"882","endLine":5,"endColumn":32},{"ruleId":"879","severity":1,"message":"1153","line":6,"column":20,"nodeType":"881","messageId":"882","endLine":6,"endColumn":34},{"ruleId":"879","severity":1,"message":"902","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":25},{"ruleId":"879","severity":1,"message":"1054","line":1,"column":27,"nodeType":"881","messageId":"882","endLine":1,"endColumn":36},{"ruleId":"879","severity":1,"message":"1154","line":73,"column":19,"nodeType":"881","messageId":"882","endLine":73,"endColumn":27},{"ruleId":"879","severity":1,"message":"902","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":25},{"ruleId":"879","severity":1,"message":"1054","line":1,"column":27,"nodeType":"881","messageId":"882","endLine":1,"endColumn":36},{"ruleId":"879","severity":1,"message":"1155","line":1,"column":8,"nodeType":"881","messageId":"882","endLine":1,"endColumn":13},{"ruleId":"879","severity":1,"message":"1156","line":6,"column":12,"nodeType":"881","messageId":"882","endLine":6,"endColumn":25},{"ruleId":"879","severity":1,"message":"1141","line":2,"column":10,"nodeType":"881","messageId":"882","endLine":2,"endColumn":17},{"ruleId":"879","severity":1,"message":"1157","line":12,"column":11,"nodeType":"881","messageId":"882","endLine":12,"endColumn":23},{"ruleId":"879","severity":1,"message":"1158","line":23,"column":9,"nodeType":"881","messageId":"882","endLine":23,"endColumn":19},{"ruleId":"879","severity":1,"message":"880","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"879","severity":1,"message":"884","line":1,"column":21,"nodeType":"881","messageId":"882","endLine":1,"endColumn":32},{"ruleId":"879","severity":1,"message":"1159","line":20,"column":10,"nodeType":"881","messageId":"882","endLine":20,"endColumn":21},{"ruleId":"879","severity":1,"message":"888","line":22,"column":25,"nodeType":"881","messageId":"882","endLine":22,"endColumn":34},{"ruleId":"879","severity":1,"message":"1057","line":24,"column":31,"nodeType":"881","messageId":"882","endLine":24,"endColumn":46},{"ruleId":"879","severity":1,"message":"1160","line":24,"column":48,"nodeType":"881","messageId":"882","endLine":24,"endColumn":59},{"ruleId":"879","severity":1,"message":"1161","line":29,"column":10,"nodeType":"881","messageId":"882","endLine":29,"endColumn":14},{"ruleId":"879","severity":1,"message":"1162","line":87,"column":12,"nodeType":"881","messageId":"882","endLine":87,"endColumn":16},{"ruleId":"879","severity":1,"message":"1163","line":87,"column":18,"nodeType":"881","messageId":"882","endLine":87,"endColumn":25},{"ruleId":"879","severity":1,"message":"1164","line":88,"column":12,"nodeType":"881","messageId":"882","endLine":88,"endColumn":24},{"ruleId":"879","severity":1,"message":"1165","line":88,"column":26,"nodeType":"881","messageId":"882","endLine":88,"endColumn":41},{"ruleId":"879","severity":1,"message":"966","line":90,"column":12,"nodeType":"881","messageId":"882","endLine":90,"endColumn":21},{"ruleId":"879","severity":1,"message":"1166","line":90,"column":23,"nodeType":"881","messageId":"882","endLine":90,"endColumn":35},{"ruleId":"879","severity":1,"message":"1167","line":91,"column":21,"nodeType":"881","messageId":"882","endLine":91,"endColumn":31},{"ruleId":"879","severity":1,"message":"1168","line":93,"column":12,"nodeType":"881","messageId":"882","endLine":93,"endColumn":28},{"ruleId":"879","severity":1,"message":"1169","line":94,"column":12,"nodeType":"881","messageId":"882","endLine":94,"endColumn":37},{"ruleId":"879","severity":1,"message":"1170","line":94,"column":39,"nodeType":"881","messageId":"882","endLine":94,"endColumn":67},{"ruleId":"879","severity":1,"message":"1171","line":95,"column":12,"nodeType":"881","messageId":"882","endLine":95,"endColumn":36},{"ruleId":"879","severity":1,"message":"986","line":96,"column":22,"nodeType":"881","messageId":"882","endLine":96,"endColumn":32},{"ruleId":"879","severity":1,"message":"1129","line":117,"column":16,"nodeType":"881","messageId":"882","endLine":117,"endColumn":21},{"ruleId":"879","severity":1,"message":"1172","line":140,"column":11,"nodeType":"881","messageId":"882","endLine":140,"endColumn":14},{"ruleId":"879","severity":1,"message":"902","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":25},{"ruleId":"879","severity":1,"message":"1054","line":1,"column":27,"nodeType":"881","messageId":"882","endLine":1,"endColumn":36},{"ruleId":"879","severity":1,"message":"929","line":1,"column":34,"nodeType":"881","messageId":"882","endLine":1,"endColumn":41},{"ruleId":"879","severity":1,"message":"1173","line":2,"column":9,"nodeType":"881","messageId":"882","endLine":2,"endColumn":24},{"ruleId":"879","severity":1,"message":"998","line":12,"column":3,"nodeType":"881","messageId":"882","endLine":12,"endColumn":8},{"ruleId":"879","severity":1,"message":"932","line":21,"column":3,"nodeType":"881","messageId":"882","endLine":21,"endColumn":16},{"ruleId":"879","severity":1,"message":"1055","line":23,"column":3,"nodeType":"881","messageId":"882","endLine":23,"endColumn":20},{"ruleId":"879","severity":1,"message":"992","line":27,"column":11,"nodeType":"881","messageId":"882","endLine":27,"endColumn":22},{"ruleId":"879","severity":1,"message":"1153","line":32,"column":20,"nodeType":"881","messageId":"882","endLine":32,"endColumn":34},{"ruleId":"879","severity":1,"message":"1174","line":33,"column":10,"nodeType":"881","messageId":"882","endLine":33,"endColumn":14},{"ruleId":"879","severity":1,"message":"945","line":43,"column":25,"nodeType":"881","messageId":"882","endLine":43,"endColumn":43},{"ruleId":"879","severity":1,"message":"946","line":43,"column":45,"nodeType":"881","messageId":"882","endLine":43,"endColumn":59},{"ruleId":"879","severity":1,"message":"948","line":44,"column":10,"nodeType":"881","messageId":"882","endLine":44,"endColumn":30},{"ruleId":"879","severity":1,"message":"891","line":46,"column":10,"nodeType":"881","messageId":"882","endLine":46,"endColumn":20},{"ruleId":"879","severity":1,"message":"892","line":46,"column":33,"nodeType":"881","messageId":"882","endLine":46,"endColumn":40},{"ruleId":"879","severity":1,"message":"893","line":46,"column":42,"nodeType":"881","messageId":"882","endLine":46,"endColumn":55},{"ruleId":"879","severity":1,"message":"895","line":46,"column":70,"nodeType":"881","messageId":"882","endLine":46,"endColumn":83},{"ruleId":"879","severity":1,"message":"1057","line":51,"column":31,"nodeType":"881","messageId":"882","endLine":51,"endColumn":46},{"ruleId":"879","severity":1,"message":"1175","line":52,"column":64,"nodeType":"881","messageId":"882","endLine":52,"endColumn":87},{"ruleId":"879","severity":1,"message":"1176","line":52,"column":89,"nodeType":"881","messageId":"882","endLine":52,"endColumn":107},{"ruleId":"993","severity":1,"message":"994","line":94,"column":41,"nodeType":"955","messageId":"995","endLine":94,"endColumn":42},{"ruleId":"993","severity":1,"message":"994","line":97,"column":38,"nodeType":"955","messageId":"995","endLine":97,"endColumn":39},{"ruleId":"993","severity":1,"message":"994","line":97,"column":67,"nodeType":"955","messageId":"995","endLine":97,"endColumn":68},{"ruleId":"993","severity":1,"message":"994","line":97,"column":84,"nodeType":"955","messageId":"995","endLine":97,"endColumn":85},{"ruleId":"879","severity":1,"message":"952","line":123,"column":7,"nodeType":"881","messageId":"882","endLine":123,"endColumn":27},{"ruleId":"879","severity":1,"message":"1177","line":154,"column":10,"nodeType":"881","messageId":"882","endLine":154,"endColumn":20},{"ruleId":"879","severity":1,"message":"1178","line":154,"column":22,"nodeType":"881","messageId":"882","endLine":154,"endColumn":37},{"ruleId":"879","severity":1,"message":"989","line":158,"column":11,"nodeType":"881","messageId":"882","endLine":158,"endColumn":18},{"ruleId":"879","severity":1,"message":"986","line":158,"column":20,"nodeType":"881","messageId":"882","endLine":158,"endColumn":30},{"ruleId":"879","severity":1,"message":"968","line":159,"column":41,"nodeType":"881","messageId":"882","endLine":159,"endColumn":51},{"ruleId":"879","severity":1,"message":"1179","line":159,"column":53,"nodeType":"881","messageId":"882","endLine":159,"endColumn":64},{"ruleId":"879","severity":1,"message":"970","line":159,"column":100,"nodeType":"881","messageId":"882","endLine":159,"endColumn":111},{"ruleId":"879","severity":1,"message":"1180","line":162,"column":36,"nodeType":"881","messageId":"882","endLine":162,"endColumn":58},{"ruleId":"879","severity":1,"message":"1024","line":164,"column":9,"nodeType":"881","messageId":"882","endLine":164,"endColumn":16},{"ruleId":"879","severity":1,"message":"1181","line":172,"column":9,"nodeType":"881","messageId":"882","endLine":172,"endColumn":24},{"ruleId":"879","severity":1,"message":"1182","line":262,"column":17,"nodeType":"881","messageId":"882","endLine":262,"endColumn":23},{"ruleId":"879","severity":1,"message":"1183","line":273,"column":21,"nodeType":"881","messageId":"882","endLine":273,"endColumn":28},{"ruleId":"959","severity":1,"message":"1184","line":336,"column":6,"nodeType":"961","endLine":336,"endColumn":46,"suggestions":"1185"},{"ruleId":"959","severity":1,"message":"1186","line":349,"column":6,"nodeType":"961","endLine":349,"endColumn":46,"suggestions":"1187"},{"ruleId":"879","severity":1,"message":"986","line":565,"column":20,"nodeType":"881","messageId":"882","endLine":565,"endColumn":30},{"ruleId":"879","severity":1,"message":"968","line":566,"column":30,"nodeType":"881","messageId":"882","endLine":566,"endColumn":40},{"ruleId":"879","severity":1,"message":"1188","line":566,"column":59,"nodeType":"881","messageId":"882","endLine":566,"endColumn":74},{"ruleId":"879","severity":1,"message":"970","line":566,"column":76,"nodeType":"881","messageId":"882","endLine":566,"endColumn":87},{"ruleId":"879","severity":1,"message":"1189","line":572,"column":10,"nodeType":"881","messageId":"882","endLine":572,"endColumn":36},{"ruleId":"879","severity":1,"message":"1059","line":574,"column":9,"nodeType":"881","messageId":"882","endLine":574,"endColumn":17},{"ruleId":"879","severity":1,"message":"1183","line":612,"column":17,"nodeType":"881","messageId":"882","endLine":612,"endColumn":24},{"ruleId":"1190","severity":1,"message":"1191","line":619,"column":9,"nodeType":"1192","messageId":"1193","endLine":619,"endColumn":22},{"ruleId":"953","severity":1,"message":"954","line":661,"column":32,"nodeType":"955","messageId":"956","endLine":661,"endColumn":34},{"ruleId":"959","severity":1,"message":"1194","line":665,"column":6,"nodeType":"961","endLine":665,"endColumn":17,"suggestions":"1195"},{"ruleId":"959","severity":1,"message":"1196","line":671,"column":6,"nodeType":"961","endLine":671,"endColumn":30,"suggestions":"1197"},{"ruleId":"985","severity":1,"message":"900","line":3,"column":10,"nodeType":"881","messageId":"882","endLine":3,"endColumn":20},{"ruleId":"985","severity":1,"message":"1056","line":3,"column":30,"nodeType":"881","messageId":"882","endLine":3,"endColumn":35},{"ruleId":"985","severity":1,"message":"907","line":9,"column":5,"nodeType":"881","messageId":"882","endLine":9,"endColumn":11},{"ruleId":"985","severity":1,"message":"1065","line":10,"column":5,"nodeType":"881","messageId":"882","endLine":10,"endColumn":12},{"ruleId":"985","severity":1,"message":"1198","line":22,"column":5,"nodeType":"881","messageId":"882","endLine":22,"endColumn":16},{"ruleId":"985","severity":1,"message":"1199","line":33,"column":8,"nodeType":"881","messageId":"882","endLine":33,"endColumn":21},{"ruleId":"985","severity":1,"message":"1200","line":34,"column":8,"nodeType":"881","messageId":"882","endLine":34,"endColumn":22},{"ruleId":"985","severity":1,"message":"1057","line":41,"column":31,"nodeType":"881","messageId":"882","endLine":41,"endColumn":46},{"ruleId":"985","severity":1,"message":"1201","line":43,"column":10,"nodeType":"881","messageId":"882","endLine":43,"endColumn":30},{"ruleId":"985","severity":1,"message":"1202","line":45,"column":7,"nodeType":"881","messageId":"882","endLine":45,"endColumn":18},{"ruleId":"985","severity":1,"message":"900","line":3,"column":10,"nodeType":"881","messageId":"882","endLine":3,"endColumn":20},{"ruleId":"985","severity":1,"message":"1056","line":3,"column":30,"nodeType":"881","messageId":"882","endLine":3,"endColumn":35},{"ruleId":"985","severity":1,"message":"1203","line":8,"column":5,"nodeType":"881","messageId":"882","endLine":8,"endColumn":13},{"ruleId":"985","severity":1,"message":"907","line":9,"column":5,"nodeType":"881","messageId":"882","endLine":9,"endColumn":11},{"ruleId":"985","severity":1,"message":"1065","line":10,"column":5,"nodeType":"881","messageId":"882","endLine":10,"endColumn":12},{"ruleId":"985","severity":1,"message":"1204","line":31,"column":8,"nodeType":"881","messageId":"882","endLine":31,"endColumn":29},{"ruleId":"985","severity":1,"message":"1205","line":32,"column":8,"nodeType":"881","messageId":"882","endLine":32,"endColumn":27},{"ruleId":"985","severity":1,"message":"1199","line":33,"column":8,"nodeType":"881","messageId":"882","endLine":33,"endColumn":21},{"ruleId":"985","severity":1,"message":"1200","line":34,"column":8,"nodeType":"881","messageId":"882","endLine":34,"endColumn":22},{"ruleId":"985","severity":1,"message":"1206","line":39,"column":8,"nodeType":"881","messageId":"882","endLine":39,"endColumn":18},{"ruleId":"985","severity":1,"message":"1207","line":40,"column":10,"nodeType":"881","messageId":"882","endLine":40,"endColumn":29},{"ruleId":"985","severity":1,"message":"1057","line":40,"column":31,"nodeType":"881","messageId":"882","endLine":40,"endColumn":46},{"ruleId":"985","severity":1,"message":"1208","line":125,"column":7,"nodeType":"881","messageId":"882","endLine":125,"endColumn":16},{"ruleId":"985","severity":1,"message":"1209","line":128,"column":9,"nodeType":"881","messageId":"882","endLine":128,"endColumn":18},{"ruleId":"985","severity":1,"message":"1210","line":166,"column":7,"nodeType":"881","messageId":"882","endLine":166,"endColumn":15},{"ruleId":"985","severity":1,"message":"965","line":232,"column":12,"nodeType":"881","messageId":"882","endLine":232,"endColumn":16},{"ruleId":"985","severity":1,"message":"1211","line":232,"column":18,"nodeType":"881","messageId":"882","endLine":232,"endColumn":25},{"ruleId":"985","severity":1,"message":"1203","line":8,"column":5,"nodeType":"881","messageId":"882","endLine":8,"endColumn":13},{"ruleId":"985","severity":1,"message":"1160","line":105,"column":10,"nodeType":"881","messageId":"882","endLine":105,"endColumn":21},{"ruleId":"985","severity":1,"message":"1209","line":115,"column":9,"nodeType":"881","messageId":"882","endLine":115,"endColumn":18},{"ruleId":"879","severity":1,"message":"880","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"879","severity":1,"message":"890","line":2,"column":23,"nodeType":"881","messageId":"882","endLine":2,"endColumn":46},{"ruleId":"879","severity":1,"message":"942","line":4,"column":22,"nodeType":"881","messageId":"882","endLine":4,"endColumn":31},{"ruleId":"879","severity":1,"message":"893","line":4,"column":33,"nodeType":"881","messageId":"882","endLine":4,"endColumn":46},{"ruleId":"879","severity":1,"message":"943","line":4,"column":61,"nodeType":"881","messageId":"882","endLine":4,"endColumn":83},{"ruleId":"879","severity":1,"message":"944","line":4,"column":85,"nodeType":"881","messageId":"882","endLine":4,"endColumn":91},{"ruleId":"879","severity":1,"message":"1212","line":5,"column":10,"nodeType":"881","messageId":"882","endLine":5,"endColumn":15},{"ruleId":"879","severity":1,"message":"1213","line":5,"column":17,"nodeType":"881","messageId":"882","endLine":5,"endColumn":33},{"ruleId":"879","severity":1,"message":"1214","line":5,"column":35,"nodeType":"881","messageId":"882","endLine":5,"endColumn":62},{"ruleId":"879","severity":1,"message":"1215","line":6,"column":19,"nodeType":"881","messageId":"882","endLine":6,"endColumn":33},{"ruleId":"879","severity":1,"message":"1216","line":21,"column":3,"nodeType":"881","messageId":"882","endLine":21,"endColumn":12},{"ruleId":"879","severity":1,"message":"1217","line":22,"column":3,"nodeType":"881","messageId":"882","endLine":22,"endColumn":17},{"ruleId":"879","severity":1,"message":"999","line":23,"column":3,"nodeType":"881","messageId":"882","endLine":23,"endColumn":9},{"ruleId":"879","severity":1,"message":"998","line":25,"column":3,"nodeType":"881","messageId":"882","endLine":25,"endColumn":8},{"ruleId":"879","severity":1,"message":"1218","line":26,"column":3,"nodeType":"881","messageId":"882","endLine":26,"endColumn":11},{"ruleId":"879","severity":1,"message":"1219","line":35,"column":10,"nodeType":"881","messageId":"882","endLine":35,"endColumn":28},{"ruleId":"879","severity":1,"message":"1207","line":36,"column":10,"nodeType":"881","messageId":"882","endLine":36,"endColumn":29},{"ruleId":"879","severity":1,"message":"1057","line":36,"column":31,"nodeType":"881","messageId":"882","endLine":36,"endColumn":46},{"ruleId":"879","severity":1,"message":"939","line":39,"column":8,"nodeType":"881","messageId":"882","endLine":39,"endColumn":24},{"ruleId":"879","severity":1,"message":"1220","line":40,"column":8,"nodeType":"881","messageId":"882","endLine":40,"endColumn":16},{"ruleId":"879","severity":1,"message":"1221","line":45,"column":8,"nodeType":"881","messageId":"882","endLine":45,"endColumn":28},{"ruleId":"879","severity":1,"message":"1160","line":47,"column":10,"nodeType":"881","messageId":"882","endLine":47,"endColumn":21},{"ruleId":"879","severity":1,"message":"1222","line":95,"column":32,"nodeType":"881","messageId":"882","endLine":95,"endColumn":54},{"ruleId":"879","severity":1,"message":"1223","line":100,"column":12,"nodeType":"881","messageId":"882","endLine":100,"endColumn":18},{"ruleId":"879","severity":1,"message":"1224","line":101,"column":12,"nodeType":"881","messageId":"882","endLine":101,"endColumn":18},{"ruleId":"879","severity":1,"message":"1225","line":108,"column":20,"nodeType":"881","messageId":"882","endLine":108,"endColumn":29},{"ruleId":"879","severity":1,"message":"1226","line":109,"column":12,"nodeType":"881","messageId":"882","endLine":109,"endColumn":20},{"ruleId":"879","severity":1,"message":"1227","line":109,"column":22,"nodeType":"881","messageId":"882","endLine":109,"endColumn":33},{"ruleId":"879","severity":1,"message":"1228","line":113,"column":11,"nodeType":"881","messageId":"882","endLine":113,"endColumn":21},{"ruleId":"879","severity":1,"message":"967","line":127,"column":24,"nodeType":"881","messageId":"882","endLine":127,"endColumn":30},{"ruleId":"879","severity":1,"message":"1024","line":129,"column":11,"nodeType":"881","messageId":"882","endLine":129,"endColumn":18},{"ruleId":"953","severity":1,"message":"954","line":147,"column":25,"nodeType":"955","messageId":"956","endLine":147,"endColumn":27},{"ruleId":"953","severity":1,"message":"954","line":149,"column":32,"nodeType":"955","messageId":"956","endLine":149,"endColumn":34},{"ruleId":"953","severity":1,"message":"954","line":151,"column":32,"nodeType":"955","messageId":"956","endLine":151,"endColumn":34},{"ruleId":"1026","severity":1,"message":"1027","line":156,"column":55,"nodeType":"1028","messageId":"1029","endLine":156,"endColumn":57},{"ruleId":"953","severity":1,"message":"954","line":157,"column":28,"nodeType":"955","messageId":"956","endLine":157,"endColumn":30},{"ruleId":"879","severity":1,"message":"1229","line":280,"column":23,"nodeType":"881","messageId":"882","endLine":280,"endColumn":43},{"ruleId":"879","severity":1,"message":"1230","line":285,"column":23,"nodeType":"881","messageId":"882","endLine":285,"endColumn":35},{"ruleId":"953","severity":1,"message":"954","line":323,"column":27,"nodeType":"955","messageId":"956","endLine":323,"endColumn":29},{"ruleId":"953","severity":1,"message":"954","line":323,"column":49,"nodeType":"955","messageId":"956","endLine":323,"endColumn":51},{"ruleId":"953","severity":1,"message":"954","line":327,"column":34,"nodeType":"955","messageId":"956","endLine":327,"endColumn":36},{"ruleId":"953","severity":1,"message":"954","line":327,"column":55,"nodeType":"955","messageId":"956","endLine":327,"endColumn":57},{"ruleId":"953","severity":1,"message":"954","line":332,"column":34,"nodeType":"955","messageId":"956","endLine":332,"endColumn":36},{"ruleId":"953","severity":1,"message":"954","line":332,"column":56,"nodeType":"955","messageId":"956","endLine":332,"endColumn":58},{"ruleId":"959","severity":1,"message":"1231","line":346,"column":8,"nodeType":"961","endLine":346,"endColumn":10,"suggestions":"1232"},{"ruleId":"953","severity":1,"message":"954","line":352,"column":27,"nodeType":"955","messageId":"956","endLine":352,"endColumn":29},{"ruleId":"953","severity":1,"message":"954","line":352,"column":49,"nodeType":"955","messageId":"956","endLine":352,"endColumn":51},{"ruleId":"953","severity":1,"message":"954","line":355,"column":34,"nodeType":"955","messageId":"956","endLine":355,"endColumn":36},{"ruleId":"953","severity":1,"message":"954","line":355,"column":55,"nodeType":"955","messageId":"956","endLine":355,"endColumn":57},{"ruleId":"953","severity":1,"message":"954","line":359,"column":34,"nodeType":"955","messageId":"956","endLine":359,"endColumn":36},{"ruleId":"953","severity":1,"message":"954","line":359,"column":56,"nodeType":"955","messageId":"956","endLine":359,"endColumn":58},{"ruleId":"959","severity":1,"message":"1233","line":372,"column":8,"nodeType":"961","endLine":372,"endColumn":22,"suggestions":"1234"},{"ruleId":"953","severity":1,"message":"958","line":605,"column":55,"nodeType":"955","messageId":"956","endLine":605,"endColumn":57},{"ruleId":"879","severity":1,"message":"880","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"879","severity":1,"message":"890","line":2,"column":23,"nodeType":"881","messageId":"882","endLine":2,"endColumn":46},{"ruleId":"879","severity":1,"message":"944","line":4,"column":85,"nodeType":"881","messageId":"882","endLine":4,"endColumn":91},{"ruleId":"879","severity":1,"message":"1219","line":7,"column":10,"nodeType":"881","messageId":"882","endLine":7,"endColumn":28},{"ruleId":"879","severity":1,"message":"1216","line":21,"column":3,"nodeType":"881","messageId":"882","endLine":21,"endColumn":12},{"ruleId":"879","severity":1,"message":"1217","line":22,"column":3,"nodeType":"881","messageId":"882","endLine":22,"endColumn":17},{"ruleId":"879","severity":1,"message":"1207","line":35,"column":10,"nodeType":"881","messageId":"882","endLine":35,"endColumn":29},{"ruleId":"879","severity":1,"message":"1057","line":35,"column":31,"nodeType":"881","messageId":"882","endLine":35,"endColumn":46},{"ruleId":"879","severity":1,"message":"1235","line":93,"column":27,"nodeType":"881","messageId":"882","endLine":93,"endColumn":43},{"ruleId":"879","severity":1,"message":"967","line":109,"column":24,"nodeType":"881","messageId":"882","endLine":109,"endColumn":30},{"ruleId":"879","severity":1,"message":"1024","line":111,"column":11,"nodeType":"881","messageId":"882","endLine":111,"endColumn":18},{"ruleId":"953","severity":1,"message":"954","line":155,"column":30,"nodeType":"955","messageId":"956","endLine":155,"endColumn":32},{"ruleId":"959","severity":1,"message":"1236","line":326,"column":8,"nodeType":"961","endLine":326,"endColumn":22,"suggestions":"1237"},{"ruleId":"879","severity":1,"message":"880","line":1,"column":17,"nodeType":"881","messageId":"882","endLine":1,"endColumn":19},{"ruleId":"879","severity":1,"message":"884","line":1,"column":21,"nodeType":"881","messageId":"882","endLine":1,"endColumn":32},{"ruleId":"879","severity":1,"message":"1057","line":24,"column":31,"nodeType":"881","messageId":"882","endLine":24,"endColumn":46},{"ruleId":"879","severity":1,"message":"1220","line":26,"column":8,"nodeType":"881","messageId":"882","endLine":26,"endColumn":16},{"ruleId":"879","severity":1,"message":"1160","line":40,"column":10,"nodeType":"881","messageId":"882","endLine":40,"endColumn":21},{"ruleId":"959","severity":1,"message":"1238","line":165,"column":8,"nodeType":"961","endLine":165,"endColumn":14,"suggestions":"1239"},"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'ReactNode' is defined but never used.","'useCallback' is defined but never used.","'Router' is defined but never used.","'Box' is defined but never used.","'useConnection' is defined but never used.","'useWallet' is defined but never used.","'WalletError' is defined but never used.","'WalletNotConnectedError' is defined but never used.","'Connection' is defined but never used.","'Keypair' is defined but never used.","'SystemProgram' is defined but never used.","'Transaction' is defined but never used.","'clusterApiUrl' is defined but never used.","'useSnackbar' is defined but never used.","'getLedgerWallet' is defined but never used.","'FREE_RPC_ENDPOINT' is defined but never used.","'Drawer' is assigned a value but never used.","'makeStyles' is defined but never used.","'themeInstance' is assigned a value but never used.","'useState' is defined but never used.","@typescript-eslint/no-redeclare","'SessionContext' is already defined.","redeclared","'Link' is defined but never used.","'Button' is defined but never used.","'Snackbar' is defined but never used.","'AssessmentIcon' is defined but never used.","'GroupWorkIcon' is defined but never used.","'DashboardIcon' is defined but never used.","'ImageIcon' is defined but never used.","'LocalOfferIcon' is defined but never used.","'truncate' is defined but never used.","'RssFeed' is defined but never used.","'HeaderProps' is defined but never used.","'Alert' is assigned a value but never used.","'open_menu' is assigned a value but never used.","'open_snackbar' is assigned a value but never used.","'tokenParam' is assigned a value but never used.","'setTokenParam' is assigned a value but never used.","'discordId' is assigned a value but never used.","'setDiscordId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'setProviders' is assigned a value but never used.","'wallets' is assigned a value but never used.","'menuWalletId' is assigned a value but never used.","'handleCloseSnackbar' is assigned a value but never used.","'useMemo' is defined but never used.","'Typography' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'List' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'Backdrop' is defined but never used.","'CircularProgress' is defined but never used.","'DisconnectIcon' is defined but never used.","'Session' is defined but never used.","'PublicKey' is defined but never used.","'TransactionInstruction' is defined but never used.","'Signer' is defined but never used.","'ConnectionProvider' is defined but never used.","'WalletProvider' is defined but never used.","'WalletDisconnectButton' is defined but never used.","'WalletAdapterNetwork' is defined but never used.","'propsToClassKey' is defined but never used.","'confirmDialog' is defined but never used.","'BootstrapDialog' is assigned a value but never used.","'BootstrapDialogTitle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'naked_session' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'confirmWalletWithTransaction', 'createNakedSession', 'disconnectSession', 'discordId', 'login', 'publicKey', 'session', 'setSession', 'token', 'userId', and 'wallet?.adapter.name'. Either include them or remove the dependency array.","ArrayExpression",["1240"],"React Hook React.useEffect has missing dependencies: 'VerifyWallet', 'callstopk', and 'session.publicKey'. Either include them or remove the dependency array. You can also do a functional update 'setCallToPk(c => ...)' if you only need 'callstopk' in the 'setCallToPk' call.",["1241"],"'open' is assigned a value but never used.","'publicKey' is assigned a value but never used.","'wallet' is assigned a value but never used.","'disconnect' is assigned a value but never used.","'sendTransaction' is assigned a value but never used.","'signMessage' is assigned a value but never used.","'showWalletAddress' is defined but never used.","'handleOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'isConnected' is assigned a value but never used.","'menuId' is assigned a value but never used.","'handleProfileMenuOpen' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'buttonText' is assigned a value but never used.","'userId' is assigned a value but never used.","'token' is assigned a value but never used.","'login' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'handleInput' is assigned a value but never used.","no-unused-vars","'setSession' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'callstopk'. Either include it or remove the dependency array. You can also do a functional update 'setCallToPk(c => ...)' if you only need 'callstopk' in the 'setCallToPk' call.",["1242"],"'session' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'setSession'. Either include it or remove the dependency array.",["1243"],"'createTheme' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'content' is assigned a value but never used.","'useSession' is defined but never used.","'Paper' is defined but never used.","'Avatar' is defined but never used.","'getRealms' is defined but never used.","'getVoteRecordsByVoter' is defined but never used.","'getTokenOwnerRecordsByOwner' is defined but never used.","'useTheme' is defined but never used.","'PretifyCommaNumber' is defined but never used.","'realms' is assigned a value but never used.","'setRealms' is assigned a value but never used.","'realmsArray' is assigned a value but never used.","'setRealmsArray' is assigned a value but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"1244","text":"1245"},"new-parens","Missing '()' invoking a constructor.","missing",{"range":"1246","text":"1247"},"'voteRecords' is assigned a value but never used.","'setVoteRecords' is assigned a value but never used.","'ownerRecordsAll' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getGovernance' and 'loading'. Either include them or remove the dependency array.",["1248"],"'grapeGovernanceBalance' is assigned a value but never used.","'onError' is assigned a value but never used.","'data_json' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook React.useEffect has missing dependencies: 'fetchTokenAccountOwnerHoldings' and 'loading'. Either include them or remove the dependency array.",["1249"],"'StyledPaperOuter' is assigned a value but never used.","'StyledPaperInner' is assigned a value but never used.","'Item' is assigned a value but never used.","'MembershipItem' is assigned a value but never used.","'backgroundHeader' is assigned a value but never used.","'useParams' is defined but never used.","'useLocation' is defined but never used.","'getQueryVariable' is defined but never used.","'serverId' is assigned a value but never used.","'setServerId' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","'setDiscordUrl' is assigned a value but never used.","'provider' is assigned a value but never used.","'setProvider' is assigned a value but never used.","'setServerName' is assigned a value but never used.","'setServerLogo' is assigned a value but never used.","'isRegistered' is assigned a value but never used.","'setIsRegistered' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setSession'. Either include it or remove the dependency array.",["1250"],"React Hook useEffect has a missing dependency: 'disconnectSession'. Either include it or remove the dependency array.",["1251"],"'useEffect' is defined but never used.","'DialogContentText' is defined but never used.","'alpha' is defined but never used.","'ValidateAddress' is defined but never used.","'twitter' is assigned a value but never used.","'endpoint' is assigned a value but never used.","'unlinkTwitter' is assigned a value but never used.","'Tooltip' is defined but never used.","'LinearProgressProps' is defined but never used.","'getPartnerData' is assigned a value but never used.","'TokenInfo' is defined but never used.","'Divider' is defined but never used.","'Chip' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'Badge' is defined but never used.","'Summary' is defined but never used.","'TwitterFeedComponent' is defined but never used.","'nu64' is defined but never used.","'u8' is defined but never used.","'blob' is defined but never used.","'u128' is defined but never used.","'lt' is defined but never used.","'getOrca' is defined but never used.","'OrcaPoolConfig' is defined but never used.","'OrcaU64' is defined but never used.","'ArrowUpwardIcon' is defined but never used.","'ArrowDownwardIcon' is defined but never used.","'RefreshIcon' is defined but never used.","'GrapeIcon' is defined but never used.","'SolIcon' is defined but never used.","'dark' is defined but never used.","'lookupService' is defined but never used.","'a11yProps' is defined but never used.","'setInitPortfolio' is assigned a value but never used.","'setInitCGPriceData' is assigned a value but never used.","'setInitNewPriceData' is assigned a value but never used.","'setInitTokenMap' is assigned a value but never used.","'fetchPairsSolFarm' is assigned a value but never used.","'fetchPairsOrca' is assigned a value but never used.","'fetchBalances' is assigned a value but never used.","'fetchNSWPriceList' is assigned a value but never used.","'fetchCoinGeckoPriceList' is assigned a value but never used.","'fetchTokenMap' is assigned a value but never used.","'sol' is assigned a value but never used.","'additionalFarmPools' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'farmPlatform' is assigned a value but never used.","'farmPlatformLogo' is assigned a value but never used.","'rassets' is assigned a value but never used.","'portfolio' is assigned a value but never used.","'stakerOwner' is assigned a value but never used.","'stupid_balance' is assigned a value but never used.","'stupid_pendingReward' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'portfolioChange' is assigned a value but never used.","'portfolioPercentageChange' is assigned a value but never used.","'handleDeleteChange' is assigned a value but never used.","'total' is assigned a value but never used.","'TransactionHistory' is defined but never used.","'FarmsView' is defined but never used.","'USER_STAKE_INFO_ACCOUNT_LAYOUT' is assigned a value but never used.","'initPortfolio' is assigned a value but never used.","'initCGPriceData' is assigned a value but never used.","'initNewPriceData' is assigned a value but never used.","'tokenMap' is assigned a value but never used.","'grapeTicker' is assigned a value but never used.","'solTicker' is assigned a value but never used.","'tstamp' is assigned a value but never used.","'value' is assigned a value but never used.","'success' is assigned a value but never used.","'array' is assigned a value but never used.","'setArray' is assigned a value but never used.","'handleTabChange' is assigned a value but never used.","'fetchStakedRaydium' is assigned a value but never used.","'fetchPairsRaydium' is assigned a value but never used.","'fetchAdditionalFarmPools' is assigned a value but never used.","'other_stakes' is assigned a value but never used.","'grapesymbol' is assigned a value but never used.","'solanasymbol' is assigned a value but never used.","'stakedTotal' is assigned a value but never used.","'NavLink' is defined but never used.","'index' is assigned a value but never used.","'searched' is assigned a value but never used.","'setSearched' is assigned a value but never used.","'emptyRowsT2' is assigned a value but never used.","'handleChangePageT2' is assigned a value but never used.","'handleChangeRowsPerPageT2' is assigned a value but never used.","'createSortHandler' is assigned a value but never used.","'ExpandMoreIcon' is defined but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","'CardActionArea' is defined but never used.","'SnackbarOrigin' is defined but never used.","'response' is assigned a value but never used.","'React' is defined but never used.","'autoPrecision' is defined but never used.","'SummaryProps' is defined but never used.","'swaptomint' is assigned a value but never used.","'TokenAmount' is defined but never used.","'trimAddress' is defined but never used.","'web3' is defined but never used.","'mint' is assigned a value but never used.","'setMint' is assigned a value but never used.","'mintdecimals' is assigned a value but never used.","'setMintDecimals' is assigned a value but never used.","'setPublicKey' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'transactionArray' is assigned a value but never used.","'transactionHistoryDetails' is assigned a value but never used.","'setTransactionHistoryDetails' is assigned a value but never used.","'transactionRecentHistory' is assigned a value but never used.","'pos' is assigned a value but never used.","'CopyToClipboard' is defined but never used.","'sign' is defined but never used.","'getHandleAndRegistryKey' is defined but never used.","'getTwitterRegistry' is defined but never used.","'walletPKId' is assigned a value but never used.","'setInputPKValue' is assigned a value but never used.","'autoConnect' is assigned a value but never used.","'setTwitterRegistration' is assigned a value but never used.","'handleCopyClick' is assigned a value but never used.","'result' is assigned a value but never used.","'timeout' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'connection' and 'sendTransaction'. Either exclude them or remove the dependency array.",["1252"],"React Hook useCallback has a missing dependency: 'registerWithConnectedWallet'. Either include it or remove the dependency array.",["1253"],"'signTransaction' is assigned a value but never used.","'twitterOnChainRegistration' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","React Hook React.useEffect has missing dependencies: 'checkTwitterRegistration', 'connection', and 'session.publicKey'. Either include them or remove the dependency array.",["1254"],"React Hook React.useEffect has a missing dependency: 'checkTwitterRegistration'. Either include it or remove the dependency array.",["1255"],"'AvatarGroup' is defined but never used.","'OpenInNewIcon' is defined but never used.","'TableSortLabel' is defined but never used.","'ConstructionOutlined' is defined but never used.","'StyledTable' is assigned a value but never used.","'Collapse' is defined but never used.","'KeyboardArrowDownIcon' is defined but never used.","'KeyboardArrowUpIcon' is defined but never used.","'TopHolders' is defined but never used.","'MakeLinkableAddress' is defined but never used.","'FarmStake' is assigned a value but never used.","'stakeList' is assigned a value but never used.","'FarmIcon' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'Token' is defined but never used.","'TOKEN_PROGRAM_ID' is defined but never used.","'ASSOCIATED_TOKEN_PROGRAM_ID' is defined but never used.","'OrcaFarmConfig' is defined but never used.","'FormLabel' is defined but never used.","'FormHelperText' is defined but never used.","'Skeleton' is defined but never used.","'GRAPE_RPC_ENDPOINT' is defined but never used.","'HelpIcon' is defined but never used.","'ArrowCircleRightIcon' is defined but never used.","'setPortofolioPositions' is assigned a value but never used.","'tokena' is assigned a value but never used.","'tokenb' is assigned a value but never used.","'setSwapTo' is assigned a value but never used.","'tokenmap' is assigned a value but never used.","'setTokenMap' is assigned a value but never used.","'grape_mint' is assigned a value but never used.","'expectedoutputamount' is assigned a value but never used.","'networkfeesB' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getPortfolioTokenBalance' and 'swapfrom'. Either include them or remove the dependency array.",["1256"],"React Hook React.useEffect has missing dependencies: 'getConvertedValue', 'orca', 'swapfrom', and 'swapto'. Either include them or remove the dependency array.",["1257"],"'setShowTokenName' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'conversionrate'. Either include it or remove the dependency array.",["1258"],"React Hook React.useEffect has missing dependencies: 'fetchTokenAccountData', 'fetchTokenSupply', 'largestAccounts', and 'tokenSupply'. Either include them or remove the dependency array.",["1259"],{"desc":"1260","fix":"1261"},{"desc":"1262","fix":"1263"},{"desc":"1264","fix":"1265"},{"desc":"1266","fix":"1267"},[1165,1174],"[]",[1174,1174],"()",{"desc":"1268","fix":"1269"},{"desc":"1270","fix":"1271"},{"desc":"1272","fix":"1273"},{"desc":"1274","fix":"1275"},{"desc":"1276","fix":"1277"},{"desc":"1278","fix":"1279"},{"desc":"1280","fix":"1281"},{"desc":"1282","fix":"1283"},{"desc":"1284","fix":"1285"},{"desc":"1286","fix":"1287"},{"desc":"1288","fix":"1289"},{"desc":"1290","fix":"1291"},"Update the dependencies array to be: [confirmWalletWithTransaction, createNakedSession, disconnectSession, discordId, login, publicKey, session, setSession, signMessage, token, userId, wallet?.adapter.name]",{"range":"1292","text":"1293"},"Update the dependencies array to be: [VerifyWallet, callstopk, publicKey, session.publicKey]",{"range":"1294","text":"1295"},"Update the dependencies array to be: [session, publicKey, callstopk]",{"range":"1296","text":"1297"},"Update the dependencies array to be: [onClick, disconnect, setSession]",{"range":"1298","text":"1299"},"Update the dependencies array to be: [getGovernance, loading, publicKey]",{"range":"1300","text":"1301"},"Update the dependencies array to be: [fetchTokenAccountOwnerHoldings, loading, publicKey]",{"range":"1302","text":"1303"},"Update the dependencies array to be: [setSession, tokenParam]",{"range":"1304","text":"1305"},"Update the dependencies array to be: [disconnectSession, session]",{"range":"1306","text":"1307"},"Update the dependencies array to be: [publicKey]",{"range":"1308","text":"1309"},"Update the dependencies array to be: [registerWithConnectedWallet, publicKey]",{"range":"1310","text":"1311"},"Update the dependencies array to be: [checkTwitterRegistration, connection, publicKey, session.publicKey]",{"range":"1312","text":"1313"},"Update the dependencies array to be: [checkTwitterRegistration, newTwitterRegistration]",{"range":"1314","text":"1315"},"Update the dependencies array to be: [getPortfolioTokenBalance, swapfrom]",{"range":"1316","text":"1317"},"Update the dependencies array to be: [amounttoswap, getConvertedValue, orca, swapfrom, swapto]",{"range":"1318","text":"1319"},"Update the dependencies array to be: [amounttosend, conversionrate]",{"range":"1320","text":"1321"},"Update the dependencies array to be: [fetchTokenAccountData, fetchTokenSupply, largestAccounts, mint, tokenSupply]",{"range":"1322","text":"1323"},[13596,13609],"[confirmWalletWithTransaction, createNakedSession, disconnectSession, discordId, login, publicKey, session, setSession, signMessage, token, userId, wallet?.adapter.name]",[14097,14108],"[VerifyWallet, callstopk, publicKey, session.publicKey]",[1946,1966],"[session, publicKey, callstopk]",[1089,1110],"[onClick, disconnect, setSession]",[3342,3353],"[getGovernance, loading, publicKey]",[14522,14533],"[fetchTokenAccountOwnerHoldings, loading, publicKey]",[4481,4493],"[setSession, tokenParam]",[4666,4675],"[disconnectSession, session]",[11292,11332],"[publicKey]",[11797,11837],"[registerWithConnectedWallet, publicKey]",[23469,23480],"[checkTwitterRegistration, connection, publicKey, session.publicKey]",[23589,23613],"[checkTwitterRegistration, newTwitterRegistration]",[16176,16178],"[getPortfolioTokenBalance, swapfrom]",[17357,17371],"[amounttoswap, getConvertedValue, orca, swapfrom, swapto]",[13458,13472],"[amounttosend, conversionrate]",[4388,4394],"[fetchTokenAccountData, fetchTokenSupply, largestAccounts, mint, tokenSupply]"]